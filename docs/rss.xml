<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[leanrada.com notes]]></title>
        <description><![CDATA[leanrada.com notes]]></description>
        <link>https://leanrada.com</link>
        <generator>RSS for Node</generator>
        
        <atom:link href="https://leanrada.com/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[2023 in review]]></title>
            <description><![CDATA[
<p>What happened in 2023? Stuff happened.</p>

<h2 id="2023-website-redesign-🎨">2023 website redesign 🎨</h2>

<p>Feb 2023, I redesigned <a target="_self" href="https://leanrada.com/wares/personal-website?ref=rss">my site</a>, with a goal of making it more personal instead of just being a mere portfolio.</p>

<img srcset="/wares/personal-website/media/v4_664.generated.png 664w" sizes=" 664px" alt="screenshot of 2023 website" src="https://leanrada.com/wares/personal-website/media/v4.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>It came with a blog section, which made me start writing a blog.</p>

<h2 id="started-a-blog-🖊">Started a blog 🖊</h2>
<blockquote>
              <p>“I’m starting a blog!</p>
              <p>I’ve done some blogging in the past (for gamedev), and I already do write-ups for my projects, so I think it’d be good to officially keep a blog!</p>
              <p>I have some ideas to populate the first few posts, then we’ll see how it goes from there.</p>
              <p>Watch this space!”</p>
              <p><cite>First blog post on the new site (now unpublished), 24 Feb 2023</cite></p>
            </blockquote>
<p>Well, it went well! In 2023 I had:</p>
12 posts
              1.6k visits
              
<p>The hottest posts were:</p>

<ul>
              <li>🔥 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss"><strong>Sort, sweep, and prune: Collision detection algorithms</strong></a></li>
              <li>🔥 <a target="_self" href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss"><strong>Dynamic patrol behaviour in stealth games with Markov chains</strong></a></li>
            </ul>

<p>It is a nice new hobby and something I shall continue. 🙌</p>

<h2 id="side-projects-💻">Side projects 💻</h2>

<p>This year I launched two webapps, <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">portabl.ink</a> and <a target="_self" href="https://leanrada.com/guhit-kudlit?ref=rss">GuhitKudlit</a>!</p>

<img srcset="/notes/2023-review/portabl.ink_664.generated.png 664w" sizes=" 664px" alt="screenshot of portablink" src="https://leanrada.com/notes/2023-review/portabl.ink.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
portabl.ink
<p><strong>Portablink</strong> was just a fun experiment without much utility. I don’t have analytics on it so I don’t know if anyone visits it. We’ll see if I renew the domain.</p>

<img srcset="/notes/2023-review/guhit-kudlit_664.generated.png 664w" sizes=" 664px" alt="screenshot of GuhitKudlit" src="https://leanrada.com/notes/2023-review/guhit-kudlit.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
GuhitKudlit - Baybayin calligraphy generator
<p><strong>GuhitKudlit</strong> did great and is getting regular visitors coming from Google. From the Google Search Console report, it looks like there is demand for baybayin translation and generation or tattoos or whatever. I might rewrite this site properly if it sees more use.</p>

<h2 id="personal--misc-✨">Personal / Misc ✨</h2>

<ul>
              <li>💼 Got a new job. Still a software engineer.</li>
              <li>🎮 Finally finished <a target="_blank" href="https://zelda.nintendo.com/tears-of-the-kingdom/"><strong>Tears of the Kingdom</strong></a>.</li>
              <li>🎮 Replayed <strong>Splinter Cell: Chaos Theory</strong>. First was around 15 years ago.</li>
              <li>🎓 Began an attempt to learn the Japanese language.</li>
            </ul>

<h3 id="steam-🫧">Steam 🫧</h3>

<p>Here’s a bit of my <strong>Steam Year in Review</strong>:</p>

<img srcset="/notes/2023-review/steam-spider_664.generated.png 664w" sizes=" 664px" alt="This spider graph shows the kinds of games you spent the most time in 2023. MOBA, 3; Card Battler, 1.7; Puzzle Platformer, 1.3; Automation, 1; Stealth, 3.8; Platformer, 2.6" src="https://leanrada.com/notes/2023-review/steam-spider.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>MOBA, Platformer, and Stealth… I guess I can conclude that I played a diverse range of games this year? This graph is missing the roguelike category though.</p>

<img srcset="/notes/2023-review/steam_664.generated.png 664w" sizes=" 664px" alt="Dota 2, Splinter Cell: Chaos Theory, Portal 2, Monster Train, Noita, Peglin, Braid, FTL, Factorio, Black Mesa" src="https://leanrada.com/notes/2023-review/steam.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Most played games on Steam in order</span>
<p>Apparently, I played a lot of <strong>Dota</strong>. I don’t even remember playing it this year.</p>

<p>You might have noticed the bias for the <a target="_blank" href="https://en.wikipedia.org/wiki/Roguelike">roguelike genre</a>. Shoutout to <a target="_blank" href="https://store.steampowered.com/app/881100/Noita/"><strong>Noita</strong></a>, <a target="_blank" href="https://store.steampowered.com/app/212680/FTL_Faster_Than_Light/"><strong>FTL</strong></a>, and <a target="_blank" href="https://store.steampowered.com/app/1102190/Monster_Train/"><strong>Monster Train</strong></a>. Great games.</p>

<h3 id="spotify-🎵">Spotify 🎵</h3>

<p>Here’s a nonsensical thing from my <strong>Spotify Wrapped</strong> — <em>My Top Artists</em> in 2023:</p>

<img srcset="/notes/2023-review/spotify_664.generated.jpg 664w" sizes=" 664px" alt="My top artists on Spotify." src="https://leanrada.com/notes/2023-review/spotify.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="" height="100%">

<p><a target="_blank" href="https://open.spotify.com/artist/5oOhM2DFWab8XhSdQiITry"><strong>Tycho</strong></a> is chillwave ambient IDM downtempo post-rock instrumental music. Nice listening.</p>

<p><a target="_blank" href="https://open.spotify.com/artist/7pnSUizGuS2tAW2yCAhafn"><strong>Vanilla</strong></a> is instrumental hip hop soul-sampling electronic music. Nice grooves.</p>

<p>The third artist is me, so it doesn’t count.</p>

<p>I don’t actually know who the fourth artist is. I’ll explain below.</p>

<p><a target="_blank" href="https://open.spotify.com/artist/0rFHElzeddB9ymDjgpBENX"><strong>Lamp</strong></a> is a Japanese band making indie pop jazz pop bossa nova J-pop music. I like the chord progressions.</p>

<p><span>I think I use Spotify a bit differently than most people. I don’t primarily listen to <em>artists</em>. I just use the playlists, especially the dynamic <strong>Discover Weekly</strong> playlist. As such, “top artists” don’t really make sense. These top 5 artists don’t make up a majority of my listens. Accidentally listening to any artist’s song twice skyrockets them to my “top artists” list. Nonetheless, there are some exceptional artists that I discover and do replay from time to time; some were mentioned above.</span></p>

<h2 id="conclusion-💡">Conclusion 💡</h2>

<p>The year two thousand and twenty-three was definitely one of the years of all time.</p>
]]></description>
            <link>https://leanrada.com/notes/2023-review?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/2023-review?ref=rss</guid>
            <pubDate>Mon, 25 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[2023 in review]]></title>
            <description><![CDATA[
<p>What happened in 2023? Stuff happened.</p>

<h2 id="2023-website-redesign-🎨">2023 website redesign 🎨</h2>

<p>Feb 2023, I redesigned <a target="_self" href="https://leanrada.com/wares/personal-website?ref=rss">my site</a>, with a goal of making it more personal instead of just being a mere portfolio.</p>

<img srcset="/wares/personal-website/media/v4_664.generated.png 664w" sizes=" 664px" alt="screenshot of 2023 website" src="https://leanrada.com/wares/personal-website/media/v4.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>It came with a blog section, which made me start writing a blog.</p>

<h2 id="started-a-blog-🖊">Started a blog 🖊</h2>
<blockquote>
              <p>“I’m starting a blog!</p>
              <p>I’ve done some blogging in the past (for gamedev), and I already do write-ups for my projects, so I think it’d be good to officially keep a blog!</p>
              <p>I have some ideas to populate the first few posts, then we’ll see how it goes from there.</p>
              <p>Watch this space!”</p>
              <p><cite>First blog post on the new site (now unpublished), 24 Feb 2023</cite></p>
            </blockquote>
<p>Well, it went well! In 2023 I had:</p>
12 posts
              1.6k visits
              
<p>The hottest posts were:</p>

<ul>
              <li>🔥 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss"><strong>Sort, sweep, and prune: Collision detection algorithms</strong></a></li>
              <li>🔥 <a target="_self" href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss"><strong>Dynamic patrol behaviour in stealth games with Markov chains</strong></a></li>
            </ul>

<p>It is a nice new hobby and something I shall continue. 🙌</p>

<h2 id="side-projects-💻">Side projects 💻</h2>

<p>This year I launched two webapps, <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">portabl.ink</a> and <a target="_self" href="https://leanrada.com/guhit-kudlit?ref=rss">GuhitKudlit</a>!</p>

<img srcset="/notes/2023-review/portabl.ink_664.generated.png 664w" sizes=" 664px" alt="screenshot of portablink" src="https://leanrada.com/notes/2023-review/portabl.ink.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
portabl.ink
<p><strong>Portablink</strong> was just a fun experiment without much utility. I don’t have analytics on it so I don’t know if anyone visits it. We’ll see if I renew the domain.</p>

<img srcset="/notes/2023-review/guhit-kudlit_664.generated.png 664w" sizes=" 664px" alt="screenshot of GuhitKudlit" src="https://leanrada.com/notes/2023-review/guhit-kudlit.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
GuhitKudlit - Baybayin calligraphy generator
<p><strong>GuhitKudlit</strong> did great and is getting regular visitors coming from Google. From the Google Search Console report, it looks like there is demand for baybayin translation and generation or tattoos or whatever. I might rewrite this site properly if it sees more use.</p>

<h2 id="personal--misc-✨">Personal / Misc ✨</h2>

<ul>
              <li>💼 Got a new job. Still a software engineer.</li>
              <li>🎮 Finally finished <a target="_blank" href="https://zelda.nintendo.com/tears-of-the-kingdom/"><strong>Tears of the Kingdom</strong></a>.</li>
              <li>🎮 Replayed <strong>Splinter Cell: Chaos Theory</strong>. First was around 15 years ago.</li>
              <li>🎓 Began an attempt to learn the Japanese language.</li>
            </ul>

<h3 id="steam-🫧">Steam 🫧</h3>

<p>Here’s a bit of my <strong>Steam Year in Review</strong>:</p>

<img srcset="/notes/2023-review/steam-spider_664.generated.png 664w" sizes=" 664px" alt="This spider graph shows the kinds of games you spent the most time in 2023. MOBA, 3; Card Battler, 1.7; Puzzle Platformer, 1.3; Automation, 1; Stealth, 3.8; Platformer, 2.6" src="https://leanrada.com/notes/2023-review/steam-spider.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>MOBA, Platformer, and Stealth… I guess I can conclude that I played a diverse range of games this year? This graph is missing the roguelike category though.</p>

<img srcset="/notes/2023-review/steam_664.generated.png 664w" sizes=" 664px" alt="Dota 2, Splinter Cell: Chaos Theory, Portal 2, Monster Train, Noita, Peglin, Braid, FTL, Factorio, Black Mesa" src="https://leanrada.com/notes/2023-review/steam.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Most played games on Steam in order</span>
<p>Apparently, I played a lot of <strong>Dota</strong>. I don’t even remember playing it this year.</p>

<p>You might have noticed the bias for the <a target="_blank" href="https://en.wikipedia.org/wiki/Roguelike">roguelike genre</a>. Shoutout to <a target="_blank" href="https://store.steampowered.com/app/881100/Noita/"><strong>Noita</strong></a>, <a target="_blank" href="https://store.steampowered.com/app/212680/FTL_Faster_Than_Light/"><strong>FTL</strong></a>, and <a target="_blank" href="https://store.steampowered.com/app/1102190/Monster_Train/"><strong>Monster Train</strong></a>. Great games.</p>

<h3 id="spotify-🎵">Spotify 🎵</h3>

<p>Here’s a nonsensical thing from my <strong>Spotify Wrapped</strong> — <em>My Top Artists</em> in 2023:</p>

<img srcset="/notes/2023-review/spotify_664.generated.jpg 664w" sizes=" 664px" alt="My top artists on Spotify." src="https://leanrada.com/notes/2023-review/spotify.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="" height="100%">

<p><a target="_blank" href="https://open.spotify.com/artist/5oOhM2DFWab8XhSdQiITry"><strong>Tycho</strong></a> is chillwave ambient IDM downtempo post-rock instrumental music. Nice listening.</p>

<p><a target="_blank" href="https://open.spotify.com/artist/7pnSUizGuS2tAW2yCAhafn"><strong>Vanilla</strong></a> is instrumental hip hop soul-sampling electronic music. Nice grooves.</p>

<p>The third artist is me, so it doesn’t count.</p>

<p>I don’t actually know who the fourth artist is. I’ll explain below.</p>

<p><a target="_blank" href="https://open.spotify.com/artist/0rFHElzeddB9ymDjgpBENX"><strong>Lamp</strong></a> is a Japanese band making indie pop jazz pop bossa nova J-pop music. I like the chord progressions.</p>

<p><span>I think I use Spotify a bit differently than most people. I don’t primarily listen to <em>artists</em>. I just use the playlists, especially the dynamic <strong>Discover Weekly</strong> playlist. As such, “top artists” don’t really make sense. These top 5 artists don’t make up a majority of my listens. Accidentally listening to any artist’s song twice skyrockets them to my “top artists” list. Nonetheless, there are some exceptional artists that I discover and do replay from time to time; some were mentioned above.</span></p>

<h2 id="conclusion-💡">Conclusion 💡</h2>

<p>The year two thousand and twenty-three was definitely one of the years of all time.</p>
]]></description>
            <link>https://leanrada.com/notes/2023-review?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/2023-review?ref=rss</guid>
            <pubDate>Mon, 25 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My personalised 55% split keyboard]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">original post on leanrada.com</a>.</em></p>

<p>I’ve been using my <a target="_blank" href="https://github.com/kata0510/Lily58"><strong>Lily58 split keyboard</strong></a> for more than a year now. It’s a compact 58-key split keyboard with column-staggered keys, 55% the size of a standard 104-key keyboard.</p>

<p>Thanks to the open-source firmware/framework <a target="_blank" href="https://qmk.fm/">QMK</a>, I customised it and programmed it to my satisfaction. I figured now’s a good time to post about my layout so far.</p>

<img srcset="/notes/my-personalised-keyboard/photo_664.generated.jpg 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/my-personalised-keyboard/photo.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The keyboard in question</span>
<h2 id="quick-rundown">Quick rundown</h2>

<p><strong>Hardware:</strong> Split keyboard with 58 keys in total. A 32×128 pixel OLED screen on each half. Both halves are connected by wire, and the whole thing is wired USB-C to the computer.</p>

<p><strong>Software:</strong> It runs the QMK firmware, which I used to implement 7-8 layers and several custom functions. I customised the heck out of my keyboard’s firmware.</p>

<h2 id="the-basics">The basics</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>

<p>This is the <em>base layer</em> of my keyboard, where all the typing happens primarily.</p>

<p>Largely in the middle lies the alphabet. Instead of the usual QWERTY layout, it’s in a layout called <a target="_blank" href="https://colemakmods.github.io/mod-dh/"><strong>Colemak-DH</strong></a>. It took some time to get used to but I appreciate how easier it was for typing (in English), as the most common letters are in the home row.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〘 q  〙〘 w  〙〘 f  〙〘 p  〙〘 b  〙
    〔Tab 〕〘 a  〙〘 r  〙〘 s  〙〘 t  〙〘 g  〙
    〔 +  〕〘 z  〙〘 x  〙〘 c  〙〘 d  〙〘 v  〙
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〘 j  〙〘 l  〙〘 u  〙〘 y  〙〘 =  〙〔 '  〕
    〘 m  〙〘 n  〙〘 e  〙〘 i  〙〘 o  〙〔 ↵  〕
    〘 k  〙〘 h  〙〘 .  〙〘 ,  〙〘 /  〙〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Alphabetic input
<p>The alphabet is flanked by the familiar <kbd>Esc</kbd>, <kbd>⌫</kbd>, <kbd>↵</kbd>, and <kbd>Tab</kbd> keys, only to be punctuated by some of the common <em>punctuations</em>.</p>

<p>The bottom row gives access to hidden <em>layers</em> which can be activated by holding down the layer <kbd>L(*)</kbd> keys. More on layers later.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〘 ⌃  〙〘L(s)〙〘 ❖  〙〘 ␣  〙〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〘 ␣  〙〘L(n)〙〘L(#)〙〘L(f)〙</pre>
Layer keys, <em>Space</em><kbd>␣</kbd> bar, and primary modifiers <code>Control</code>/<code>Command</code>
<p>The top row is where it gets interesting. Here we have <em>single-key shortcuts</em>.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〘 ⌃[ 〙〘 ⌃] 〙〘⌃⇧Tab〙〘⌃Tab〙〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〘Wksp←〙〘Wksp↑〙〘Wksp↓〙〘Wksp→〙〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Top row: shortcuts
<p>On the left hand top row we have “universal” shortcuts for navigating within an application: Back, Forward, Previous tab, and Next tab.</p>

<video muted="" autoplay="" loop="" aria-label="">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/appnav.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/appnav.mp4?ref=rss"></a>
              </video>
<span>Using the application navigation keys.</span>
<ul>
              <li><kbd>⌃[</kbd> - Back</li>
              <li><kbd>⌃]</kbd> - Forward</li>
              <li><kbd>⌃⇧Tab</kbd> - Previous tab</li>
              <li><kbd>⌃Tab</kbd> - Next tab</li>
            </ul>

<p>They’re compatible with most web browsers and code editors. Really handy when surfing the web or when tracing code across multiple files.</p>

<p>On the other <em>hand</em>, we have <kbd>Wksp←</kbd> and <kbd>Wksp→</kbd>, shortcuts for switching between workspaces (a.k.a. spaces and virtual desktops in macOS and Windows, respectively).</p>

<video muted="" autoplay="" loop="" aria-label="demo video of using the workspace switcher keys">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/wksp.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/wksp.mp4?ref=rss">demo video of using the workspace switcher keys</a>
              </video>

<p><kbd>Wksp↑</kbd> and <kbd>Wksp↓</kbd> are bound to desktop-specific actions like Exposé in macOS. I don’t actually remember their functions exactly because they’re not consistent across OSes.</p>

<h2 id="home-row-modifiers">Home row modifiers</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〘a/⇧ 〙〘r/⌘ 〙〘s/⌥ 〙〘t/⌃ 〙〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〘n/⌃ 〙〘e/⌥ 〙〘i/⌘ 〙〘o/⇧ 〙〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Tap/Hold dual purpose home row keys
<p>The home row on a keyboard is where fingers rest by default. As such, the home row on my keyboard serves a second purpose besides alphabetic input. Some of them can be held down to activate <em>modifiers</em> such as <code>Control</code>, <code>Alt</code>, and <code>Super</code>.</p>

<p>For example, the key <kbd>a</kbd> activates <code>Shift</code> when held down, while a tap produces the letter <code>a</code>.</p>

<p>Home row modifiers make keyboard shortcuts much more comfortable, in contrast to the awkward contortions you have to perform on regular keyboards.</p>

<p>This makes use of the <a target="_blank" href="https://docs.qmk.fm/#/mod_tap"><strong>Mod-Tap</strong></a> feature from the QMK framework, a.k.a. Tap/Hold keys.</p>

<p><span>The home row mods, among other things, were inspired by the famous <a target="_blank" href="https://github.com/manna-harbour/miryoku"><strong>Miryoku</strong></a> layout. Credits to Manna Harbour for designing the Miryoku layout.</span></p>

<h2 id="layers">Layers</h2>

<p>As mentioned earlier, I use <strong>layers</strong>, due to the limited number of physical keys on the keyboard. Inputs such as numbers and symbols have to be organised into separate layers. I can switch between these layers either through dedicated layer keys or programmatically.</p>

<p>Here are the layers I ended up with:</p>

<ol>
              <li>Alphabet (Default)</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/shift_layer_oled.png?ref=rss"> Shifted alphabet (Uppercase)</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/symbol_layer_oled.png?ref=rss"> Symbols</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/navigation_layer_oled.png?ref=rss"> Navigation / manipulation</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/number_layer_oled.png?ref=rss"> Numbers</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/function_layer_oled.png?ref=rss"> Functions</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji_layer_oled.png?ref=rss"> Emojis</li>
            </ol>

<p><span>Btw, the OLED screen is programmed to show the current layer’s icon.</span></p>

<p>Let’s dive into each layer in the following sections. 🤿</p>

<h2 id="shift-layer-">Shift layer <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/shift_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 ~  〕〔 @  〕〔 #  〕〔 %  〕〔    〕
    〔 !  〕〔 Q  〕〔 W  〕〔 F  〕〔 P  〕〔 B  〕
    〔Tab 〕〔 A  〕〔 R  〕〔 S  〕〔 T  〕〔 G  〕
    〔    〕〔 Z  〕〔 X  〕〔 C  〕〔 D  〕〔 V  〕
    〔    〕〔    〕〔    〕〔 ⇧  〕〔    〕
  Right hand:
    〔    〕〔 ^  〕〔 &amp;  〕〔 |  〕〔 \  〕〔 ⌫  〕
    〔 J  〕〔 L  〕〔 U  〕〔 Y  〕〔 _  〕〔 "  〕
    〔 M  〕〔 N  〕〔 E  〕〔 I  〕〔 O  〕〔 ↵  〕
    〔 K  〕〔 H  〕〔 :  〕〔 ;  〕〔 *  〕〔    〕
    〔    〕〔 ␣  〕〔    〕〔    〕〔    〕</pre>
Interactive diagram! Click the highlighted <kbd>⇧</kbd> layer activation key above to toggle between the base layer and the Shift layer.
<p>The <strong>Shift layer</strong> is just a shifted or uppercase version of the base layer. You know, like when you hold <em>Shift</em> on a regular keyboard! Though, this layer is activated by holding down the left <em>Space</em> key <kbd>␣</kbd> instead of the <em>Shift</em> key.</p>

<p>Some of my shifted punctuations differ from their counterparts in a regular QWERTY keyboard. Like how <kbd>?</kbd> shifts into <kbd>!</kbd>, <kbd>.</kbd> to <kbd>:</kbd>, <kbd>,</kbd> to <kbd>;</kbd>, etc…</p>

<p><span>I used this great <a target="_blank" href="https://getreuer.info/posts/keyboards/custom-shift-keys/index.html"><strong>Custom Shift Keys</strong> library</a> from Pascal Getreuer to customise the shifted values.</span></p>

<h2 id="symbols-">Symbols <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/symbol_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〘    〙〘    〙〘    〙〘    〙〘    〙〘    〙
    〘 `  〙〘 \  〙〘 $  〙〘 {  〙〘 }  〙〘    〙
    〘 &lt;  〙〘 =  〙〘 -  〙〘 (  〙〘 )  〙〘 &gt;  〙
    〘    〙〘    〙〘    〙〘 [  〙〘 ]  〙〘    〙
    〔    〕〘L(s)〙〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〘 ⌃  〙〘 ⌥  〙〘 ⌘  〙〘 ⇧  〙〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕</pre>

<p>The <strong>Symbol layer</strong> is activated by holding the dedicated <em>Symbol layer key</em> <kbd>L(s)</kbd> with the left thumb. Matching the thumb, the symbols are laid out on the left-hand side only. The right-hand side defaults to home row mods.</p>

<p>There is a bit of special programming that I added for this layer. The parentheses, brackets, braces, and angle brackets — the "enclosure" keys — have a nifty little shortcut in them for a smoother coding experience.</p>

<video muted="" autoplay="" loop="" aria-label="">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/closing-bracket-reposition.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/closing-bracket-reposition.mp4?ref=rss"></a>
              </video>
<span>Caret repositioning in brackets</span>
<p>What it does exactly is it lets me automatically reposition the caret or cursor inside the brackets without the need for arrow keys. The arrow keys are on a separate layer, and layer-switching has an overhead.</p>

<p>The trigger for it is simple: if I still have the opening symbol’s key held down as I release the closing symbol’s key, it repositions. Otherwise, it types normally. This way I can control whether I want to quickly reposition or not.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bracket keyboard input</pre>
Demo! You’ll need a keyboard for this.<br>To trigger caret repositioning, hold <kbd>1</kbd>, press <kbd>2</kbd>, release <kbd>2</kbd>, before releasing <kbd>1</kbd>. It’s a reversing motion, mirroring the cursor’s movements.
<h2 id="navigation-">Navigation <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/navigation_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〘 ⇧  〙〘 ⌘  〙〘 ⌥  〙〘 ⌃  〙〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〘    〙〘    〙〘    〙〘⇧Tab〙〘Tab 〙〘 ⌫  〙
    〘 W⌫ 〙〘 W← 〙〘WSel〙〘    〙〘 W→ 〙〘    〙
    〘 ⌦  〙〘 ←  〙〘 ↑  〙〘 ↓  〙〘 →  〙〘 ↵  〙
    〘    〙〘Home〙〘PgUp〙〘PgDn〙〘End 〙〘    〙
    〔    〕〔    〕〘L(n)〙〔    〕〔    〕</pre>

<p>The <strong>Navigation / manipulation layer</strong> provides the arrow keys, page navigation keys, and word navigation, all on the right side. Some text manipulation functions are here as well. This layer is especially useful when editing text.</p>

<p>On the home row sit the most used keys, the arrow keys.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔⇧Tab〕〔Tab 〕〔 ⌫  〕
    〔 W⌫ 〕〔 W← 〕〔WSel〕〔    〕〔 W→ 〕〔    〕
    〔 ⌦  〕〘 ←  〙〘 ↑  〙〘 ↓  〙〘 →  〙〔 ↵  〕
    〔    〕〔Home〕〔PgUp〕〔PgDn〕〔End 〕〔    〕
    〔    〕〔    〕〔L(n)〕〔    〕〔    〕</pre>

<p><span>Yes, the Up and Down arrows are in that order — opposite of Vim style. I think it’s more logical this way.</span></p>

<p>Above the arrow keys are the <em>word navigation</em> keys. These operate on <em>words</em> rather than individual letters.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔⇧Tab〕〔Tab 〕〔 ⌫  〕
    〘 W⌫ 〙〘 W← 〙〘WSel〙〘    〙〘 W→ 〙〔    〕
    〔 ⌦  〕〔 ←  〕〔 ↑  〕〔 ↓  〕〔 →  〕〔 ↵  〕
    〔    〕〔Home〕〔PgUp〕〔PgDn〕〔End 〕〔    〕
    〔    〕〔    〕〔L(n)〕〔    〕〔    〕</pre>

<p>The <kbd>W←</kbd> and <kbd>W→</kbd> keys, for instance, let you move the cursor one word at a time.</p>

<video muted="" autoplay="" loop="" aria-label="">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/word-jump.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/word-jump.mp4?ref=rss"></a>
              </video>
<span>Moving the cursor, one word at a time</span>
<p>Word navigation works by using a lesser-known feature native to most desktop operating systems, which does exactly that — jumping to the next or previous word. On macOS, it’s the keyboard shortcuts <code>Option+Left</code> and <code>Option+Right</code>. On Linux, <code>Control+Left</code> and <code>Control+Right</code>. Depending on the current OS, these shortcuts are mapped to the word navigation <kbd>W←</kbd> and <kbd>W→</kbd> keys.</p>

<p>One of the other word keys is the <strong>Select Word</strong> <kbd>WSel</kbd> key, which selects the current word under the caret.</p>

<video muted="" autoplay="" loop="" aria-label="Word selection demo">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/word-sel.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/word-sel.mp4?ref=rss">Word selection demo</a>
              </video>

<p>The <em>Select Word</em> key itself is just a macro. It’s composed of the following sequence of keystrokes:</p>

<ol>
              <li><kbd>W←</kbd></li>
              <li><kbd>W→</kbd></li>
              <li>Hold <code>Shift</code></li>
              <li><kbd>W←</kbd></li>
              <li>Release <code>Shift</code></li>
            </ol>

<p>Which results in a selection spanning the nearest word boundaries around the caret. There are edge cases with this macro (literally), but they’re not that annoying. This macro has been extremely useful.</p>

<p>The <strong>Delete Word</strong> <kbd>W⌫</kbd> key is just the <em>Select Word</em> macro + <em>Backspace</em> <kbd>⌫</kbd>.</p>

<p>These word navigation functions greatly increase text and code editing efficiency.</p>

<h2 id="numbers-">Numbers <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/number_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔 *  〕〔 /  〕〔 ⌫  〕
    〔    〕〔    〕〔 7  〕〔 8  〕〔 9  〕〔 -  〕
    〔    〕〔 0  〕〔 4  〕〔 5  〕〔 6  〕〔 ↵  〕
    〔    〕〔 +  〕〔 1  〕〔 2  〕〔 3  〕〔 .  〕
    〔    〕〔    〕〔    〕〔L(#)〕〔    〕</pre>

<p>This layer contains numbers and some arithmetic operators laid out like a numpad on the right hand side. Convenient when doing calculations. Nothing special here.</p>

<h2 id="functions-">Functions <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/function_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔    〕〔QWERTY〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔Linux〕〔    〕〔macOS〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〔FB0 〕〔FB1 〕〔FB2 〕〔FB3 〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>The <strong>Function layer</strong> contains “functions”, or things that do stuff instead of inputting text. Volume buttons, brightness buttons, media controls, you name it.</p>

<p>And of course, the <em>Function</em> keys themselves (i.e., <code>F1</code>, <code>F2</code>, <code>F3</code>, …, <code>F12</code>) can be accessed from this layer, though not obvious. That’s because Function keys are entered through the four bit keys <kbd>FB0</kbd>, <kbd>FB1</kbd>, <kbd>FB2</kbd>, and <kbd>FB3</kbd> in a <em>bitwise</em> manner.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔QWERTY〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔Linux〕〔    〕〔macOS〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〘FB0 〙〘FB1 〙〘FB2 〙〘FB3 〙
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>To illustrate the Function keys’ <strong>bitwise input method</strong>, take <code>F10</code> as an example. The number <strong>10</strong> equals 2<sup><strong>1</strong></sup>&nbsp;+&nbsp;2<sup><strong>3</strong></sup>, corresponding to bits 1 and 3. Therefore, to input <code>F10</code>, you simultaneously press the bit 1 key <kbd>FB1</kbd> and the bit 3 key <kbd>FB3</kbd>!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Demo! Here, the bit keys are mapped to QWER. You’ll need a keyboard for this.
<p>More details and demos in <a target="_blank" href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">this post about how this bitwise input works</a>.</p>

<p>On the left side we have the OS switchers, providing the <kbd>macOS</kbd> &amp; <kbd>Linux</kbd> modes. The selected OS determines a lot of things, such as the primary modifier (either <code>Control</code> or <code>Command</code>) and some desktop shortcuts.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〘QWERTY〙〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〘Linux〙〘    〙〘macOS〙〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〔FB0 〕〔FB1 〕〔FB2 〕〔FB3 〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>I don’t use Windows, so I didn’t support it.</p>

<p>Finally, the <kbd>QWERTY</kbd> button. Its function should be obvious enough, but we’ll get to that later.</p>

<h2 id="emojis-">Emojis <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Cancel〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 😭 〕〔 👋 〕〔 🥺 〕〔 🎉 〕〔    〕
    〔    〕〔 😂 〕〔 😃 〕〔 🙂 〕〔 🤔 〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔L(e)〕〔 ‘  〕〔 ’  〕〔 “  〕〔 ”  〕〔 ❌  〕
    〔    〕〔 👈 〕〔 ☝  〕〔 👇 〕〔 👉 〕〔 👍 〕
    〔    〕〔 ←  〕〔 ↑  〕〔 ↓  〕〔 →  〕〔 ✔  〕
    〔    〕〔 ⬅  〕〔 ⬆  〕〔 ⬇  〕〔 ➡  〕〔 ✅  〕
    〔    〕〔    〕〔    〕〔    〕〔    〕</pre>

<p>Yep, an <strong>Emoji layer</strong>! 😃 <span>⬅ I typed that with my keyboard!</span> And other useful Unicode symbols.</p>

<p>I mapped the emojis so they line up with the base layer. For instance, 🎉 is on the same position as <kbd>p</kbd>, which can stand for “party”. 👋 on <kbd>w</kbd>ave. 🤔 on <kbd>t</kbd>hink. <code>✔</code> on <code>Enter</code>, and so on. Meanwhile, the arrow symbols correspond to the arrow keys in the Navigation layer.</p>

<p>The Emoji layer works a bit differently. It’s a <a target="_blank" href="https://docs.qmk.fm/#/one_shot_keys">one-shot layer</a> in QMK terms. That is, you don’t have to hold down the layer key <kbd>L(e)</kbd> to keep the layer active. It stays active until you select an emoji or you cancel. This allows the Emoji layer key to be tucked in the top corner without sacrificing comfort.</p>

<p>Being a one-shot layer also opens up the possibility of a new gesture, <em>double tap</em>. I’ve set it so that double tapping the Emoji key launches the desktop-level <strong>emoji picker</strong> for all of my other emoji needs.</p>

<img srcset="/notes/my-personalised-keyboard/emoji-picker_664.generated.png 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji-picker.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>macOS Character Viewer (left) and Linux-based emoji-picker (right)</span>
<p>On macOS, it’s <code>Command+Control+Space</code> to bring up Character Viewer. On Windows (hypothetically), that’d be <code>Super+.</code> for the “emoji keyboard”. On Linux there is no standard emoji picker, so I installed one and bound it to some arbitrary shortcut. I’m not liking how the Linux one looks, but it’s what it is.</p>

<h2 id="oled-📺">OLED 📺</h2>

<img srcset="/notes/my-personalised-keyboard/oled_664.generated.jpg 664w" sizes=" 664px" alt="close-up photo of the OLED screen" src="https://leanrada.com/notes/my-personalised-keyboard/oled.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>I drew and implemented my own graphics for the keyboard’s built-in OLED. You’ve seen some of them from the examples above. The OLED shows the current active layer, the current OS mode, and any active modifiers.</p>

<img srcset="/notes/my-personalised-keyboard/legend_600.generated.png 600w,/notes/my-personalised-keyboard/legend_664.generated.png 664w" sizes="not (min-width:664px) 600px, 664px" alt="OLED icons legend" src="https://leanrada.com/notes/my-personalised-keyboard/legend.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>It has been a struggle to make legible tile graphics at a very low resolution, but I think they turned out fine for my purposes.</p>

<h2 id="layer-lock-🔒">Layer lock 🔒</h2>

<p>Sometimes it gets tiring to hold down a layer key for long. Like when browsing a web page, I would want to have Page Down and Page Up readily accessible.</p>

<p><em>Layer Lock</em> to the rescue. I used another of Getreuer’s modular QMK libraries, the <a target="_blank" href="https://getreuer.info/posts/keyboards/layer-lock/index.html"><strong>Layer Lock library</strong></a>, which was really easy to plug in.</p>

<h2 id="gaming-mode--qwerty-🎮">Gaming mode / QWERTY 🎮</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 1  〕〔 2  〕〔 3  〕〔 4  〕〔 5  〕
    〔 `  〕〔 Q  〕〔 W  〕〔 E  〕〔 R  〕〔 T  〕
    〔Tab 〕〔 A  〕〔 S  〕〔 D  〕〔 F  〕〔 G  〕
    〔 ⇧  〕〔 Z  〕〔 X  〕〔 C  〕〔 V  〕〔 B  〕
    〔 ⌃  〕〔 ⌥  〕〔 ❖  〕〔 ␣  〕〔    〕
  Right hand:
    〔 6  〕〔 7  〕〔 8  〕〔 9  〕〔 0  〕〔 ⌫  〕
    〔 Y  〕〔 U  〕〔 I  〕〔 O  〕〔 P  〕〔 -  〕
    〔 H  〕〔 J  〕〔 K  〕〔 L  〕〔 ↑  〕〔 ↵  〕
    〔 N  〕〔 M  〕〔 .  〕〔 ←  〕〔 ↓  〕〔 →  〕
    〔Cancel〕〔 ␣  〕〔 ◆  〕〔    〕〔Chat〕</pre>

<p>I play video games on my computer. Games almost always default to a QWERTY layout, and I couldn’t be bothered to remap the keybindings to my own keyboard layout.</p>

<p>Thus, <strong>QWERTY mode</strong>.</p>

<p>The interesting bit here is the <kbd>Chat</kbd> key, which temporarily activates the base layer for the purpose of chatting in-game. Upon sending a message (on <code>Enter</code>), it reverts back to QWERTY mode so I can get back to the action in no time.</p>

<p>It’s not perfect. When gaming with a mouse, I don’t have access to the right half of the keyboard, as it becomes either too far or inconvenient to reach. It’s a problem if, say, I needed to press the number <kbd>6</kbd> to activate the 6th item in my inventory.</p>

<p>Often I end up remapping keybindings anyway, just to fit them within the left half.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Programming my keyboard was definitely worth it. You see, I get wrist and upper back pain sometimes. Part of the job, I guess. It helps to have a split keyboard, so I can position my arms and hands in a natural position.</p>

<h3 id="ergonomics">Ergonomics</h3>

<p>In a regular keyboard, you kinda squeeze your hands together, and the wrists insists on twisting which ouches in the long term. That’s not a problem when each hand has its own separate half of the keyboard as in a split keyboard.</p>

<img srcset="/notes/my-personalised-keyboard/desk_664.generated.jpg 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/my-personalised-keyboard/desk.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>My desk setup.</span>
<p>The distance between both halves can also be <span aria-label="widened">&nbsp;w&nbsp;i&nbsp;d&nbsp;e&nbsp;n&nbsp;e&nbsp;d&nbsp;</span> which, in turn, widens my shoulders and counters the slouch of the upper back. It also helps that overall finger movement is reduced, thanks to the customised keyboard layout.</p>

<h3 id="layout">Layout</h3>

<p>It wasn’t easy adjusting to a completely new keyboard layout. I even made <a target="_blank" href="https://leanrada.com/notes/my-personalised-keyboard/layers.pdf?ref=rss">cheatsheets</a> for my own reference. I only got comfortable with it after about 2 months of daily use. Today, I still don’t type as fast as I was before with QWERTY, and I don’t think I ever will be, but I choose comfort over speed. :)</p>

<p>A lot of people say they found it difficult to come back to a regular QWERTY keyboard (like when using a laptop away from their desks), but I did not find it difficult myself. Somehow, I retained my QWERTY muscle memory. I’m guessing it’s because I used a completely different layout, Colemak, on my split keyboard so my brain didn’t confuse it with my existing QWERTY pathways.</p>

<p>It’s also interesting that I struggled typing with QWERTY on <em>this</em> keyboard (I used QWERTY at first before trying Colemak). And that it was easier to learn Colemak than relearn QWERTY on this keyboard.</p>

<p>I think it’s like how you don’t confuse using a mouse with using a touchpad — <em>they’re different pathways</em>. So my advice is to use a completely different layout when trying out a new ortholinear or split keyboard.</p>

<h3 id="fun">Fun</h3>

<p>There’s a fun aspect to it too. Well, if tinkering with a keyboard and optimising it is your idea of fun… I knew I was going to like having a programmable keyboard because of my experience with the Steam Controller which was a kind of a programmable controller in a sense. I might have overdone it with the layers, but in the end it works for me.</p>

<p>As a bonus, I get to practice my C programming skills!</p>

<p>tl;dr:</p>

<ul>
              <li>Comfort 👍</li>
              <li>Speed ❌</li>
              <li>Efficiency ✅</li>
              <li>“Fun” ✅</li>
              <li>Coding practice ✅</li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/my-personalised-keyboard?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/my-personalised-keyboard?ref=rss</guid>
            <pubDate>Fri, 01 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My personalised 55% split keyboard]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">original post on leanrada.com</a>.</em></p>

<p>I’ve been using my <a target="_blank" href="https://github.com/kata0510/Lily58"><strong>Lily58 split keyboard</strong></a> for more than a year now. It’s a compact 58-key split keyboard with column-staggered keys, 55% the size of a standard 104-key keyboard.</p>

<p>Thanks to the open-source firmware/framework <a target="_blank" href="https://qmk.fm/">QMK</a>, I customised it and programmed it to my satisfaction. I figured now’s a good time to post about my layout so far.</p>

<img srcset="/notes/my-personalised-keyboard/photo_664.generated.jpg 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/my-personalised-keyboard/photo.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The keyboard in question</span>
<h2 id="quick-rundown">Quick rundown</h2>

<p><strong>Hardware:</strong> Split keyboard with 58 keys in total. A 32×128 pixel OLED screen on each half. Both halves are connected by wire, and the whole thing is wired USB-C to the computer.</p>

<p><strong>Software:</strong> It runs the QMK firmware, which I used to implement 7-8 layers and several custom functions. I customised the heck out of my keyboard’s firmware.</p>

<h2 id="the-basics">The basics</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>

<p>This is the <em>base layer</em> of my keyboard, where all the typing happens primarily.</p>

<p>Largely in the middle lies the alphabet. Instead of the usual QWERTY layout, it’s in a layout called <a target="_blank" href="https://colemakmods.github.io/mod-dh/"><strong>Colemak-DH</strong></a>. It took some time to get used to but I appreciate how easier it was for typing (in English), as the most common letters are in the home row.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〘 q  〙〘 w  〙〘 f  〙〘 p  〙〘 b  〙
    〔Tab 〕〘 a  〙〘 r  〙〘 s  〙〘 t  〙〘 g  〙
    〔 +  〕〘 z  〙〘 x  〙〘 c  〙〘 d  〙〘 v  〙
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〘 j  〙〘 l  〙〘 u  〙〘 y  〙〘 =  〙〔 '  〕
    〘 m  〙〘 n  〙〘 e  〙〘 i  〙〘 o  〙〔 ↵  〕
    〘 k  〙〘 h  〙〘 .  〙〘 ,  〙〘 /  〙〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Alphabetic input
<p>The alphabet is flanked by the familiar <kbd>Esc</kbd>, <kbd>⌫</kbd>, <kbd>↵</kbd>, and <kbd>Tab</kbd> keys, only to be punctuated by some of the common <em>punctuations</em>.</p>

<p>The bottom row gives access to hidden <em>layers</em> which can be activated by holding down the layer <kbd>L(*)</kbd> keys. More on layers later.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〘 ⌃  〙〘L(s)〙〘 ❖  〙〘 ␣  〙〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〘 ␣  〙〘L(n)〙〘L(#)〙〘L(f)〙</pre>
Layer keys, <em>Space</em><kbd>␣</kbd> bar, and primary modifiers <code>Control</code>/<code>Command</code>
<p>The top row is where it gets interesting. Here we have <em>single-key shortcuts</em>.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〘 ⌃[ 〙〘 ⌃] 〙〘⌃⇧Tab〙〘⌃Tab〙〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〘Wksp←〙〘Wksp↑〙〘Wksp↓〙〘Wksp→〙〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Top row: shortcuts
<p>On the left hand top row we have “universal” shortcuts for navigating within an application: Back, Forward, Previous tab, and Next tab.</p>

<video muted="" autoplay="" loop="" aria-label="">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/appnav.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/appnav.mp4?ref=rss"></a>
              </video>
<span>Using the application navigation keys.</span>
<ul>
              <li><kbd>⌃[</kbd> - Back</li>
              <li><kbd>⌃]</kbd> - Forward</li>
              <li><kbd>⌃⇧Tab</kbd> - Previous tab</li>
              <li><kbd>⌃Tab</kbd> - Next tab</li>
            </ul>

<p>They’re compatible with most web browsers and code editors. Really handy when surfing the web or when tracing code across multiple files.</p>

<p>On the other <em>hand</em>, we have <kbd>Wksp←</kbd> and <kbd>Wksp→</kbd>, shortcuts for switching between workspaces (a.k.a. spaces and virtual desktops in macOS and Windows, respectively).</p>

<video muted="" autoplay="" loop="" aria-label="demo video of using the workspace switcher keys">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/wksp.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/wksp.mp4?ref=rss">demo video of using the workspace switcher keys</a>
              </video>

<p><kbd>Wksp↑</kbd> and <kbd>Wksp↓</kbd> are bound to desktop-specific actions like Exposé in macOS. I don’t actually remember their functions exactly because they’re not consistent across OSes.</p>

<h2 id="home-row-modifiers">Home row modifiers</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〘a/⇧ 〙〘r/⌘ 〙〘s/⌥ 〙〘t/⌃ 〙〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〘n/⌃ 〙〘e/⌥ 〙〘i/⌘ 〙〘o/⇧ 〙〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Tap/Hold dual purpose home row keys
<p>The home row on a keyboard is where fingers rest by default. As such, the home row on my keyboard serves a second purpose besides alphabetic input. Some of them can be held down to activate <em>modifiers</em> such as <code>Control</code>, <code>Alt</code>, and <code>Super</code>.</p>

<p>For example, the key <kbd>a</kbd> activates <code>Shift</code> when held down, while a tap produces the letter <code>a</code>.</p>

<p>Home row modifiers make keyboard shortcuts much more comfortable, in contrast to the awkward contortions you have to perform on regular keyboards.</p>

<p>This makes use of the <a target="_blank" href="https://docs.qmk.fm/#/mod_tap"><strong>Mod-Tap</strong></a> feature from the QMK framework, a.k.a. Tap/Hold keys.</p>

<p><span>The home row mods, among other things, were inspired by the famous <a target="_blank" href="https://github.com/manna-harbour/miryoku"><strong>Miryoku</strong></a> layout. Credits to Manna Harbour for designing the Miryoku layout.</span></p>

<h2 id="layers">Layers</h2>

<p>As mentioned earlier, I use <strong>layers</strong>, due to the limited number of physical keys on the keyboard. Inputs such as numbers and symbols have to be organised into separate layers. I can switch between these layers either through dedicated layer keys or programmatically.</p>

<p>Here are the layers I ended up with:</p>

<ol>
              <li>Alphabet (Default)</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/shift_layer_oled.png?ref=rss"> Shifted alphabet (Uppercase)</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/symbol_layer_oled.png?ref=rss"> Symbols</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/navigation_layer_oled.png?ref=rss"> Navigation / manipulation</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/number_layer_oled.png?ref=rss"> Numbers</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/function_layer_oled.png?ref=rss"> Functions</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji_layer_oled.png?ref=rss"> Emojis</li>
            </ol>

<p><span>Btw, the OLED screen is programmed to show the current layer’s icon.</span></p>

<p>Let’s dive into each layer in the following sections. 🤿</p>

<h2 id="shift-layer-">Shift layer <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/shift_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 ~  〕〔 @  〕〔 #  〕〔 %  〕〔    〕
    〔 !  〕〔 Q  〕〔 W  〕〔 F  〕〔 P  〕〔 B  〕
    〔Tab 〕〔 A  〕〔 R  〕〔 S  〕〔 T  〕〔 G  〕
    〔    〕〔 Z  〕〔 X  〕〔 C  〕〔 D  〕〔 V  〕
    〔    〕〔    〕〔    〕〔 ⇧  〕〔    〕
  Right hand:
    〔    〕〔 ^  〕〔 &amp;  〕〔 |  〕〔 \  〕〔 ⌫  〕
    〔 J  〕〔 L  〕〔 U  〕〔 Y  〕〔 _  〕〔 "  〕
    〔 M  〕〔 N  〕〔 E  〕〔 I  〕〔 O  〕〔 ↵  〕
    〔 K  〕〔 H  〕〔 :  〕〔 ;  〕〔 *  〕〔    〕
    〔    〕〔 ␣  〕〔    〕〔    〕〔    〕</pre>
Interactive diagram! Click the highlighted <kbd>⇧</kbd> layer activation key above to toggle between the base layer and the Shift layer.
<p>The <strong>Shift layer</strong> is just a shifted or uppercase version of the base layer. You know, like when you hold <em>Shift</em> on a regular keyboard! Though, this layer is activated by holding down the left <em>Space</em> key <kbd>␣</kbd> instead of the <em>Shift</em> key.</p>

<p>Some of my shifted punctuations differ from their counterparts in a regular QWERTY keyboard. Like how <kbd>?</kbd> shifts into <kbd>!</kbd>, <kbd>.</kbd> to <kbd>:</kbd>, <kbd>,</kbd> to <kbd>;</kbd>, etc…</p>

<p><span>I used this great <a target="_blank" href="https://getreuer.info/posts/keyboards/custom-shift-keys/index.html"><strong>Custom Shift Keys</strong> library</a> from Pascal Getreuer to customise the shifted values.</span></p>

<h2 id="symbols-">Symbols <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/symbol_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〘    〙〘    〙〘    〙〘    〙〘    〙〘    〙
    〘 `  〙〘 \  〙〘 $  〙〘 {  〙〘 }  〙〘    〙
    〘 &lt;  〙〘 =  〙〘 -  〙〘 (  〙〘 )  〙〘 &gt;  〙
    〘    〙〘    〙〘    〙〘 [  〙〘 ]  〙〘    〙
    〔    〕〘L(s)〙〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〘 ⌃  〙〘 ⌥  〙〘 ⌘  〙〘 ⇧  〙〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕</pre>

<p>The <strong>Symbol layer</strong> is activated by holding the dedicated <em>Symbol layer key</em> <kbd>L(s)</kbd> with the left thumb. Matching the thumb, the symbols are laid out on the left-hand side only. The right-hand side defaults to home row mods.</p>

<p>There is a bit of special programming that I added for this layer. The parentheses, brackets, braces, and angle brackets — the "enclosure" keys — have a nifty little shortcut in them for a smoother coding experience.</p>

<video muted="" autoplay="" loop="" aria-label="">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/closing-bracket-reposition.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/closing-bracket-reposition.mp4?ref=rss"></a>
              </video>
<span>Caret repositioning in brackets</span>
<p>What it does exactly is it lets me automatically reposition the caret or cursor inside the brackets without the need for arrow keys. The arrow keys are on a separate layer, and layer-switching has an overhead.</p>

<p>The trigger for it is simple: if I still have the opening symbol’s key held down as I release the closing symbol’s key, it repositions. Otherwise, it types normally. This way I can control whether I want to quickly reposition or not.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bracket keyboard input</pre>
Demo! You’ll need a keyboard for this.<br>To trigger caret repositioning, hold <kbd>1</kbd>, press <kbd>2</kbd>, release <kbd>2</kbd>, before releasing <kbd>1</kbd>. It’s a reversing motion, mirroring the cursor’s movements.
<h2 id="navigation-">Navigation <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/navigation_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〘 ⇧  〙〘 ⌘  〙〘 ⌥  〙〘 ⌃  〙〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〘    〙〘    〙〘    〙〘⇧Tab〙〘Tab 〙〘 ⌫  〙
    〘 W⌫ 〙〘 W← 〙〘WSel〙〘    〙〘 W→ 〙〘    〙
    〘 ⌦  〙〘 ←  〙〘 ↑  〙〘 ↓  〙〘 →  〙〘 ↵  〙
    〘    〙〘Home〙〘PgUp〙〘PgDn〙〘End 〙〘    〙
    〔    〕〔    〕〘L(n)〙〔    〕〔    〕</pre>

<p>The <strong>Navigation / manipulation layer</strong> provides the arrow keys, page navigation keys, and word navigation, all on the right side. Some text manipulation functions are here as well. This layer is especially useful when editing text.</p>

<p>On the home row sit the most used keys, the arrow keys.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔⇧Tab〕〔Tab 〕〔 ⌫  〕
    〔 W⌫ 〕〔 W← 〕〔WSel〕〔    〕〔 W→ 〕〔    〕
    〔 ⌦  〕〘 ←  〙〘 ↑  〙〘 ↓  〙〘 →  〙〔 ↵  〕
    〔    〕〔Home〕〔PgUp〕〔PgDn〕〔End 〕〔    〕
    〔    〕〔    〕〔L(n)〕〔    〕〔    〕</pre>

<p><span>Yes, the Up and Down arrows are in that order — opposite of Vim style. I think it’s more logical this way.</span></p>

<p>Above the arrow keys are the <em>word navigation</em> keys. These operate on <em>words</em> rather than individual letters.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔⇧Tab〕〔Tab 〕〔 ⌫  〕
    〘 W⌫ 〙〘 W← 〙〘WSel〙〘    〙〘 W→ 〙〔    〕
    〔 ⌦  〕〔 ←  〕〔 ↑  〕〔 ↓  〕〔 →  〕〔 ↵  〕
    〔    〕〔Home〕〔PgUp〕〔PgDn〕〔End 〕〔    〕
    〔    〕〔    〕〔L(n)〕〔    〕〔    〕</pre>

<p>The <kbd>W←</kbd> and <kbd>W→</kbd> keys, for instance, let you move the cursor one word at a time.</p>

<video muted="" autoplay="" loop="" aria-label="">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/word-jump.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/word-jump.mp4?ref=rss"></a>
              </video>
<span>Moving the cursor, one word at a time</span>
<p>Word navigation works by using a lesser-known feature native to most desktop operating systems, which does exactly that — jumping to the next or previous word. On macOS, it’s the keyboard shortcuts <code>Option+Left</code> and <code>Option+Right</code>. On Linux, <code>Control+Left</code> and <code>Control+Right</code>. Depending on the current OS, these shortcuts are mapped to the word navigation <kbd>W←</kbd> and <kbd>W→</kbd> keys.</p>

<p>One of the other word keys is the <strong>Select Word</strong> <kbd>WSel</kbd> key, which selects the current word under the caret.</p>

<video muted="" autoplay="" loop="" aria-label="Word selection demo">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/word-sel.mp4?ref=rss">
                <a href="https://leanrada.com/notes/my-personalised-keyboard/word-sel.mp4?ref=rss">Word selection demo</a>
              </video>

<p>The <em>Select Word</em> key itself is just a macro. It’s composed of the following sequence of keystrokes:</p>

<ol>
              <li><kbd>W←</kbd></li>
              <li><kbd>W→</kbd></li>
              <li>Hold <code>Shift</code></li>
              <li><kbd>W←</kbd></li>
              <li>Release <code>Shift</code></li>
            </ol>

<p>Which results in a selection spanning the nearest word boundaries around the caret. There are edge cases with this macro (literally), but they’re not that annoying. This macro has been extremely useful.</p>

<p>The <strong>Delete Word</strong> <kbd>W⌫</kbd> key is just the <em>Select Word</em> macro + <em>Backspace</em> <kbd>⌫</kbd>.</p>

<p>These word navigation functions greatly increase text and code editing efficiency.</p>

<h2 id="numbers-">Numbers <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/number_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔 *  〕〔 /  〕〔 ⌫  〕
    〔    〕〔    〕〔 7  〕〔 8  〕〔 9  〕〔 -  〕
    〔    〕〔 0  〕〔 4  〕〔 5  〕〔 6  〕〔 ↵  〕
    〔    〕〔 +  〕〔 1  〕〔 2  〕〔 3  〕〔 .  〕
    〔    〕〔    〕〔    〕〔L(#)〕〔    〕</pre>

<p>This layer contains numbers and some arithmetic operators laid out like a numpad on the right hand side. Convenient when doing calculations. Nothing special here.</p>

<h2 id="functions-">Functions <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/function_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔    〕〔QWERTY〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔Linux〕〔    〕〔macOS〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〔FB0 〕〔FB1 〕〔FB2 〕〔FB3 〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>The <strong>Function layer</strong> contains “functions”, or things that do stuff instead of inputting text. Volume buttons, brightness buttons, media controls, you name it.</p>

<p>And of course, the <em>Function</em> keys themselves (i.e., <code>F1</code>, <code>F2</code>, <code>F3</code>, …, <code>F12</code>) can be accessed from this layer, though not obvious. That’s because Function keys are entered through the four bit keys <kbd>FB0</kbd>, <kbd>FB1</kbd>, <kbd>FB2</kbd>, and <kbd>FB3</kbd> in a <em>bitwise</em> manner.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔QWERTY〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔Linux〕〔    〕〔macOS〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〘FB0 〙〘FB1 〙〘FB2 〙〘FB3 〙
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>To illustrate the Function keys’ <strong>bitwise input method</strong>, take <code>F10</code> as an example. The number <strong>10</strong> equals 2<sup><strong>1</strong></sup>&nbsp;+&nbsp;2<sup><strong>3</strong></sup>, corresponding to bits 1 and 3. Therefore, to input <code>F10</code>, you simultaneously press the bit 1 key <kbd>FB1</kbd> and the bit 3 key <kbd>FB3</kbd>!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Demo! Here, the bit keys are mapped to QWER. You’ll need a keyboard for this.
<p>More details and demos in <a target="_blank" href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">this post about how this bitwise input works</a>.</p>

<p>On the left side we have the OS switchers, providing the <kbd>macOS</kbd> &amp; <kbd>Linux</kbd> modes. The selected OS determines a lot of things, such as the primary modifier (either <code>Control</code> or <code>Command</code>) and some desktop shortcuts.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〘QWERTY〙〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〘Linux〙〘    〙〘macOS〙〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〔FB0 〕〔FB1 〕〔FB2 〕〔FB3 〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>I don’t use Windows, so I didn’t support it.</p>

<p>Finally, the <kbd>QWERTY</kbd> button. Its function should be obvious enough, but we’ll get to that later.</p>

<h2 id="emojis-">Emojis <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Cancel〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 😭 〕〔 👋 〕〔 🥺 〕〔 🎉 〕〔    〕
    〔    〕〔 😂 〕〔 😃 〕〔 🙂 〕〔 🤔 〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔L(e)〕〔 ‘  〕〔 ’  〕〔 “  〕〔 ”  〕〔 ❌  〕
    〔    〕〔 👈 〕〔 ☝  〕〔 👇 〕〔 👉 〕〔 👍 〕
    〔    〕〔 ←  〕〔 ↑  〕〔 ↓  〕〔 →  〕〔 ✔  〕
    〔    〕〔 ⬅  〕〔 ⬆  〕〔 ⬇  〕〔 ➡  〕〔 ✅  〕
    〔    〕〔    〕〔    〕〔    〕〔    〕</pre>

<p>Yep, an <strong>Emoji layer</strong>! 😃 <span>⬅ I typed that with my keyboard!</span> And other useful Unicode symbols.</p>

<p>I mapped the emojis so they line up with the base layer. For instance, 🎉 is on the same position as <kbd>p</kbd>, which can stand for “party”. 👋 on <kbd>w</kbd>ave. 🤔 on <kbd>t</kbd>hink. <code>✔</code> on <code>Enter</code>, and so on. Meanwhile, the arrow symbols correspond to the arrow keys in the Navigation layer.</p>

<p>The Emoji layer works a bit differently. It’s a <a target="_blank" href="https://docs.qmk.fm/#/one_shot_keys">one-shot layer</a> in QMK terms. That is, you don’t have to hold down the layer key <kbd>L(e)</kbd> to keep the layer active. It stays active until you select an emoji or you cancel. This allows the Emoji layer key to be tucked in the top corner without sacrificing comfort.</p>

<p>Being a one-shot layer also opens up the possibility of a new gesture, <em>double tap</em>. I’ve set it so that double tapping the Emoji key launches the desktop-level <strong>emoji picker</strong> for all of my other emoji needs.</p>

<img srcset="/notes/my-personalised-keyboard/emoji-picker_664.generated.png 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji-picker.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>macOS Character Viewer (left) and Linux-based emoji-picker (right)</span>
<p>On macOS, it’s <code>Command+Control+Space</code> to bring up Character Viewer. On Windows (hypothetically), that’d be <code>Super+.</code> for the “emoji keyboard”. On Linux there is no standard emoji picker, so I installed one and bound it to some arbitrary shortcut. I’m not liking how the Linux one looks, but it’s what it is.</p>

<h2 id="oled-📺">OLED 📺</h2>

<img srcset="/notes/my-personalised-keyboard/oled_664.generated.jpg 664w" sizes=" 664px" alt="close-up photo of the OLED screen" src="https://leanrada.com/notes/my-personalised-keyboard/oled.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>I drew and implemented my own graphics for the keyboard’s built-in OLED. You’ve seen some of them from the examples above. The OLED shows the current active layer, the current OS mode, and any active modifiers.</p>

<img srcset="/notes/my-personalised-keyboard/legend_600.generated.png 600w,/notes/my-personalised-keyboard/legend_664.generated.png 664w" sizes="not (min-width:664px) 600px, 664px" alt="OLED icons legend" src="https://leanrada.com/notes/my-personalised-keyboard/legend.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>It has been a struggle to make legible tile graphics at a very low resolution, but I think they turned out fine for my purposes.</p>

<h2 id="layer-lock-🔒">Layer lock 🔒</h2>

<p>Sometimes it gets tiring to hold down a layer key for long. Like when browsing a web page, I would want to have Page Down and Page Up readily accessible.</p>

<p><em>Layer Lock</em> to the rescue. I used another of Getreuer’s modular QMK libraries, the <a target="_blank" href="https://getreuer.info/posts/keyboards/layer-lock/index.html"><strong>Layer Lock library</strong></a>, which was really easy to plug in.</p>

<h2 id="gaming-mode--qwerty-🎮">Gaming mode / QWERTY 🎮</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 1  〕〔 2  〕〔 3  〕〔 4  〕〔 5  〕
    〔 `  〕〔 Q  〕〔 W  〕〔 E  〕〔 R  〕〔 T  〕
    〔Tab 〕〔 A  〕〔 S  〕〔 D  〕〔 F  〕〔 G  〕
    〔 ⇧  〕〔 Z  〕〔 X  〕〔 C  〕〔 V  〕〔 B  〕
    〔 ⌃  〕〔 ⌥  〕〔 ❖  〕〔 ␣  〕〔    〕
  Right hand:
    〔 6  〕〔 7  〕〔 8  〕〔 9  〕〔 0  〕〔 ⌫  〕
    〔 Y  〕〔 U  〕〔 I  〕〔 O  〕〔 P  〕〔 -  〕
    〔 H  〕〔 J  〕〔 K  〕〔 L  〕〔 ↑  〕〔 ↵  〕
    〔 N  〕〔 M  〕〔 .  〕〔 ←  〕〔 ↓  〕〔 →  〕
    〔Cancel〕〔 ␣  〕〔 ◆  〕〔    〕〔Chat〕</pre>

<p>I play video games on my computer. Games almost always default to a QWERTY layout, and I couldn’t be bothered to remap the keybindings to my own keyboard layout.</p>

<p>Thus, <strong>QWERTY mode</strong>.</p>

<p>The interesting bit here is the <kbd>Chat</kbd> key, which temporarily activates the base layer for the purpose of chatting in-game. Upon sending a message (on <code>Enter</code>), it reverts back to QWERTY mode so I can get back to the action in no time.</p>

<p>It’s not perfect. When gaming with a mouse, I don’t have access to the right half of the keyboard, as it becomes either too far or inconvenient to reach. It’s a problem if, say, I needed to press the number <kbd>6</kbd> to activate the 6th item in my inventory.</p>

<p>Often I end up remapping keybindings anyway, just to fit them within the left half.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Programming my keyboard was definitely worth it. You see, I get wrist and upper back pain sometimes. Part of the job, I guess. It helps to have a split keyboard, so I can position my arms and hands in a natural position.</p>

<h3 id="ergonomics">Ergonomics</h3>

<p>In a regular keyboard, you kinda squeeze your hands together, and the wrists insists on twisting which ouches in the long term. That’s not a problem when each hand has its own separate half of the keyboard as in a split keyboard.</p>

<img srcset="/notes/my-personalised-keyboard/desk_664.generated.jpg 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/my-personalised-keyboard/desk.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>My desk setup.</span>
<p>The distance between both halves can also be <span aria-label="widened">&nbsp;w&nbsp;i&nbsp;d&nbsp;e&nbsp;n&nbsp;e&nbsp;d&nbsp;</span> which, in turn, widens my shoulders and counters the slouch of the upper back. It also helps that overall finger movement is reduced, thanks to the customised keyboard layout.</p>

<h3 id="layout">Layout</h3>

<p>It wasn’t easy adjusting to a completely new keyboard layout. I even made <a target="_blank" href="https://leanrada.com/notes/my-personalised-keyboard/layers.pdf?ref=rss">cheatsheets</a> for my own reference. I only got comfortable with it after about 2 months of daily use. Today, I still don’t type as fast as I was before with QWERTY, and I don’t think I ever will be, but I choose comfort over speed. :)</p>

<p>A lot of people say they found it difficult to come back to a regular QWERTY keyboard (like when using a laptop away from their desks), but I did not find it difficult myself. Somehow, I retained my QWERTY muscle memory. I’m guessing it’s because I used a completely different layout, Colemak, on my split keyboard so my brain didn’t confuse it with my existing QWERTY pathways.</p>

<p>It’s also interesting that I struggled typing with QWERTY on <em>this</em> keyboard (I used QWERTY at first before trying Colemak). And that it was easier to learn Colemak than relearn QWERTY on this keyboard.</p>

<p>I think it’s like how you don’t confuse using a mouse with using a touchpad — <em>they’re different pathways</em>. So my advice is to use a completely different layout when trying out a new ortholinear or split keyboard.</p>

<h3 id="fun">Fun</h3>

<p>There’s a fun aspect to it too. Well, if tinkering with a keyboard and optimising it is your idea of fun… I knew I was going to like having a programmable keyboard because of my experience with the Steam Controller which was a kind of a programmable controller in a sense. I might have overdone it with the layers, but in the end it works for me.</p>

<p>As a bonus, I get to practice my C programming skills!</p>

<p>tl;dr:</p>

<ul>
              <li>Comfort 👍</li>
              <li>Speed ❌</li>
              <li>Efficiency ✅</li>
              <li>“Fun” ✅</li>
              <li>Coding practice ✅</li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/my-personalised-keyboard?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/my-personalised-keyboard?ref=rss</guid>
            <pubDate>Fri, 01 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Debug CSS boxes with this bookmarklet]]></title>
            <description><![CDATA[
<p>Here’s a quick &amp; simple way to show all element bounds on a page.</p>

<pre><code><span>javascript</span><span>:</span><span>(</span>a<span>=</span><span>(</span>d<span>=</span>document<span>)</span><span>.</span><span>createElement</span><span>(</span><span>'style'</span><span>)</span><span>)</span><span>.</span>innerHTML<span>=</span><span>'*{outline:solid 1px red}'</span><span>;</span>d<span>.</span>head<span>.</span><span>append</span><span>(</span>a<span>)</span></code></pre>

<p>The bookmarklet: <a target="_self" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:solid 1px red}';d.head.append(a)?ref=rss"><strong>▤outlinify</strong></a></p>

<img srcset="/notes/debug-css-boxes-bookmarklet/example_800.generated.png 800w,/notes/debug-css-boxes-bookmarklet/example_1020.generated.png 1020w,/notes/debug-css-boxes-bookmarklet/example_1400.generated.png 1400w" sizes="not (min-width:800px) 800px,(max-width:1275px) 1020px, 1400px" alt="example of a website with element outlines visible" src="https://leanrada.com/notes/debug-css-boxes-bookmarklet/example.png?ref=rss" spec="100% [800) 80% [1750) 1400" loading="lazy" width="400%" height="">
<span>Example result on threads.net</span>
<p>Not sure how to use it? Save or <em>drag</em> the following link into your bookmarks:</p>
<a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:solid 1px red}';d.head.append(a)?ref=rss">
                ▤outlinify
              </a>☝
<video muted="" autoplay="" loop="" aria-label="video of dragging the bookmarklet into the bookmarks bar">
                  <source src="https://leanrada.com/notes/debug-css-boxes-bookmarklet/drag.web.mp4?ref=rss">
                  <a href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/drag.web.mp4?ref=rss">video of dragging the bookmarklet into the bookmarks bar</a>
                </video>

<p>If you prefer different styles:</p>

<ul>
              <li>Dashed: <a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:dashed 1px red}';d.head.append(a)?ref=rss">
                  ▤outlinify
                </a></li>
              <li>Dotted: <a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:dotted 1px red}';d.head.append(a)?ref=rss">
                  ▤outlinify
                </a></li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/debug-css-boxes-bookmarklet?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/debug-css-boxes-bookmarklet?ref=rss</guid>
            <pubDate>Sun, 15 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Debug CSS boxes with this bookmarklet]]></title>
            <description><![CDATA[
<p>Here’s a quick &amp; simple way to show all element bounds on a page.</p>

<pre><code><span>javascript</span><span>:</span><span>(</span>a<span>=</span><span>(</span>d<span>=</span>document<span>)</span><span>.</span><span>createElement</span><span>(</span><span>'style'</span><span>)</span><span>)</span><span>.</span>innerHTML<span>=</span><span>'*{outline:solid 1px red}'</span><span>;</span>d<span>.</span>head<span>.</span><span>append</span><span>(</span>a<span>)</span></code></pre>

<p>The bookmarklet: <a target="_self" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:solid 1px red}';d.head.append(a)?ref=rss"><strong>▤outlinify</strong></a></p>

<img srcset="/notes/debug-css-boxes-bookmarklet/example_800.generated.png 800w,/notes/debug-css-boxes-bookmarklet/example_1020.generated.png 1020w,/notes/debug-css-boxes-bookmarklet/example_1400.generated.png 1400w" sizes="not (min-width:800px) 800px,(max-width:1275px) 1020px, 1400px" alt="example of a website with element outlines visible" src="https://leanrada.com/notes/debug-css-boxes-bookmarklet/example.png?ref=rss" spec="100% [800) 80% [1750) 1400" loading="lazy" width="400%" height="">
<span>Example result on threads.net</span>
<p>Not sure how to use it? Save or <em>drag</em> the following link into your bookmarks:</p>
<a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:solid 1px red}';d.head.append(a)?ref=rss">
                ▤outlinify
              </a>☝
<video muted="" autoplay="" loop="" aria-label="video of dragging the bookmarklet into the bookmarks bar">
                  <source src="https://leanrada.com/notes/debug-css-boxes-bookmarklet/drag.web.mp4?ref=rss">
                  <a href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/drag.web.mp4?ref=rss">video of dragging the bookmarklet into the bookmarks bar</a>
                </video>

<p>If you prefer different styles:</p>

<ul>
              <li>Dashed: <a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:dashed 1px red}';d.head.append(a)?ref=rss">
                  ▤outlinify
                </a></li>
              <li>Dotted: <a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:dotted 1px red}';d.head.append(a)?ref=rss">
                  ▤outlinify
                </a></li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/debug-css-boxes-bookmarklet?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/debug-css-boxes-bookmarklet?ref=rss</guid>
            <pubDate>Sun, 15 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Compressing a website into a URL]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/compressing-websites-into-urls?ref=rss">original post on leanrada.com</a>.</em></p>

<p>This post explains how <a target="_blank" href="https://portabl.ink"><strong>portabl.ink</strong></a> works. Portablink is a tool that creates self-contained compressed web pages in a single link. Check <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">portablink project page</a> for more info.</p>

<p>tl;dr: It uses <strong>data URLs</strong> containing <strong>compressed data</strong> which is bundled with its own <strong>decompression instructions</strong>.</p>

<h2 id="data-urls">Data URLs</h2>

<p>In case you aren’t familiar with <a target="_blank" href="https://en.wikipedia.org/wiki/Data_URI_scheme"><strong>data URLs</strong></a>, they are URLs whose contents are in the URL itself. They all start with <code>data:</code>. Here, let me show you with this <em>interactive</em> mock browser:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/compressing-websites-into-urls?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: browser demo</pre>

<p><em>(Hint: edit the URL in the address bar!)</em></p>

<p>When you load a data URL, the browser shows the content embedded in the URL directly.</p>
<blockquote>
              <p>So, that’s it? Website in a URL?&nbsp;— Use data URLs! Easy!</p>
            </blockquote>
<p>Wait, there’s more! The portablink tool does some more things than just putting your HTML in a data URL. The tool also <strong>compresses</strong> your content so you don’t end up with humongous URLs.</p>

<h2 id="compression">Compression</h2>

<p>Within a data URL, the tool bundles both the compressed data <em>and</em> the instructions needed to decompress and bootstrap that data. This produces a self-contained, compressed document in a single portable link that can be decompressed and rendered by any modern browser.</p>

<p>Here’s an example URL generated by the tool:</p>

<pre><code>data:text/html,<span><span><span>&lt;</span>body</span> <span><span>onload</span><span><span>=</span><span>"</span><span>fetch<span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68OyX8pDpSibDJhwqbGZbdrQpP/7DI7WpluDZPv8fb7Pd8dBXJqKJ3HJaJ7EBgxnyRJEi5aQhYbaIVk8dvhgEGvTdgZCqczbvV0RykHXnLazgrPdvEe2jTZQtGEmhWHCzDI7MeU4ymEjQjCs0id4Yc+GBa2At7MGQiUbkbMce9eg6AaERAuqGvRJmhIy9E3JLx7+3kB2q6nI8ZWsCqkMpXhBxZYqwN4HBZSjH04GLZbevxD6KHnu4SsbUmpdtGxUxkIrqMNaSdwbmikouggf7RhtFOSnSXeIS6CzQpuWhQ2zqfOmEnqmWM2o8S/xpFCBO3gPuSln76O7CoRDSgab0jyDusvSxhgp9k/F0fDAZtN3T24cBAuPvpGDUqlypmZacshRhFJOs9tTwZkwZZiVwHP/UgT4/3g4CfbP9ELOChMe4653rwqK4dtTPyPrl27x+NhC1nI913VSEudwhzJOtSZeV0mv67HY3YAgJ14UeUk8dsBLbnKGm57hoskZzTPc9AwXTc9onuGmJ1w8tvXoagTVBmmVEc9DUjClpCLegDODAG/xLa6wIqsIT/B0jUty8buRZg7CHrxeLj67LTZKkAg/kFxmTWW/uFFX8FW5HuB7UpNEM7OEisnG+L9IsqecKePXQ+dsm1XoN84O5i8VyMMjnkRRMMCU+DaggCT2ja/ccTcPYbi1N2XEah+Jm2NcbvnqlvWoorVvw/HVSMuK+S1J1IjdMdX6O5JQf4fboLuS1MHhcMK0ePcKszvDTMO/XBBc0Kqe99O9b/cD1UcDXQidsbVhpSRJR1Jk3P5zumRS63w4+N1yrPvNMZWVLfhPMlnjzLfSPu0rY59B/4L7Zh/3/9w/</span><span>`</span></span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span><span>new</span> <span>Response</span><span>(</span>a<span>.</span>body<span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span><span>)</span><span>.</span><span>text</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span>document<span>.</span>documentElement<span>.</span>innerHTML<span>=</span>a<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span></code></pre>

<p>The URL above is 1,078 bytes. It was compressed from a source doc of size 1.37 KB, which is a 23% compression!</p>

<p>Btw, the above URL loads a simple tic-tac-toe web game. See for yourself by copying it into your browser’s address bar.</p>

<h2 id="so-how-does-it-work">So, how does it work?</h2>

<p>The embedded document contains a singular <code>&lt;body&gt;</code> tag with an <code>onload</code> callback. The callback itself contains the main script that will decompress and render the desired content.</p>

<p>A small point: Why <code>onload</code>? Well, it’s shorter than using a <code>&lt;script&gt;</code> tag.</p>

<pre><code>A: <span><span><span>&lt;</span>body</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>/* code */</span></span><span>"</span></span></span><span>&gt;</span></span>
B: <span><span><span>&lt;</span>script</span><span>&gt;</span></span><span><span><span>/* code */</span></span></span><span><span><span>&lt;/</span>script</span><span>&gt;</span></span></code></pre>

<p>The closing tag is optional for <code>body</code> but not for <code>script</code>. In the end, the <code>body</code> tag wins by 1 character! Every character - in a URL - is precious.</p>
<span>
              <code>&lt;img onerror="..."&gt;</code> would’ve worked as well, having equal length as the <code>body</code> option.
            </span>
<p>Now, with that out of the way, let’s break the main script down. I’ll plop the prettified code here first, then explain the interesting bits.</p>

<pre><code><span>fetch</span><span>(</span>
  <span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68OyX8pDpSibDJhwqbGZbdrQpP/7DI7WpluDZPv8fb7Pd8dBXJqKJ3HJaJ7EBgxnyRJEi5aQhYbaIVk8dvhgEGvTdgZCqczbvV0RykHXnLazgrPdvEe2jTZQtGEmhWHCzDI7MeU4ymEjQjCs0id4Yc+GBa2At7MGQiUbkbMce9eg6AaERAuqGvRJmhIy9E3JLx7+3kB2q6nI8ZWsCqkMpXhBxZYqwN4HBZSjH04GLZbevxD6KHnu4SsbUmpdtGxUxkIrqMNaSdwbmikouggf7RhtFOSnSXeIS6CzQpuWhQ2zqfOmEnqmWM2o8S/xpFCBO3gPuSln76O7CoRDSgab0jyDusvSxhgp9k/F0fDAZtN3T24cBAuPvpGDUqlypmZacshRhFJOs9tTwZkwZZiVwHP/UgT4/3g4CfbP9ELOChMe4653rwqK4dtTPyPrl27x+NhC1nI913VSEudwhzJOtSZeV0mv67HY3YAgJ14UeUk8dsBLbnKGm57hoskZzTPc9AwXTc9onuGmJ1w8tvXoagTVBmmVEc9DUjClpCLegDODAG/xLa6wIqsIT/B0jUty8buRZg7CHrxeLj67LTZKkAg/kFxmTWW/uFFX8FW5HuB7UpNEM7OEisnG+L9IsqecKePXQ+dsm1XoN84O5i8VyMMjnkRRMMCU+DaggCT2ja/ccTcPYbi1N2XEah+Jm2NcbvnqlvWoorVvw/HVSMuK+S1J1IjdMdX6O5JQf4fboLuS1MHhcMK0ePcKszvDTMO/XBBc0Kqe99O9b/cD1UcDXQidsbVhpSRJR1Jk3P5zumRS63w4+N1yrPvNMZWVLfhPMlnjzLfSPu0rY59B/4L7Zh/3/9w/</span><span>`</span></span>
<span>)</span>
<span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
  <span>new</span> <span>Response</span><span>(</span>
    compressedHtml<span>.</span>body
      <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
  <span>)</span>
  <span>.</span><span>text</span><span>(</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>html</span> <span>=&gt;</span>
    document<span>.</span>documentElement<span>.</span>innerHTML <span>=</span> html
  <span>)</span>
<span>)</span></code></pre>

<h3 id="1-fetchdatabase64fvtfb5sweh">1. fetch(`data:;base64,fVTfb5swEH...`)</h3>

<p>The first thing you’ll notice is the huge chunk of base64-encoded data wrapped in a <code>fetch()</code> call.</p>

<p>The encoded data is the compressed HTML which has been prepared by a complementary compression script. Since compressed data is binary, it has been encoded in a text-friendly format for it to be a valid URL. Base64, an encoding that’s native to the web, was used for this purpose.</p>

<p>To decode the base64 data, instead of using the standard <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/atob"><code>atob()</code></a> function, <code>fetch()</code> was used. <code>fetch</code> sees the <code>;base64</code> flag in that data URL and decodes it natively. </p>

<p>While it accomplishes the same thing as <code>atob</code>, <code>fetch</code> is slightly better, because:</p>

<ol>
              <li><code>fetch()</code> outputs a stream, the format needed for decompression later.</li>
              <li>Code size. We’re optimising for the total URL length. The <code>atob</code> method requires <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem">extra massaging for Unicode</a>.</li>
            </ol>

<p>Here’s a quick length comparison. A is fetch. B is atob. Below is a character ruler with markings.</p>

<pre><code><span>A</span><span>:</span> fetch<span><span>`</span><span>data:;base64,dVo=</span><span>`</span></span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span>a<span>.</span>body<span>)</span>
<span>B</span><span>:</span> <span>new</span> <span>Blob</span><span>(</span><span>[</span>Uint8Array<span>.</span><span>from</span><span>(</span>atob<span><span>`</span><span>dVo=</span><span>`</span></span><span>,</span><span>a</span><span>=&gt;</span>a<span>.</span><span>codePointAt</span><span>(</span><span>0</span><span>)</span><span>)</span><span>]</span><span>)</span><span>.</span><span>stream</span><span>(</span><span>)</span>
                                          <span>^</span>                           <span>^</span>
                                          <span>A</span>                           <span>B</span>
   <span>0</span>        <span>10</span>        <span>20</span>        <span>30</span>        <span>40</span>        <span>50</span>        <span>60</span>       
   <span>12345678901234567890123456789012345678901234567890123456789012345678</span></code></pre>

<p>The <code>atob()</code> method requires additional 28 characters!</p>
<span>
              <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">Tagged templates</a></strong> can be abused here to save a couple of characters. Instead of <code>fetch("abc")</code>, we can use <code>fetch`abc`</code>!
            </span>
<p>Here is the code described so far:</p>

<pre><code><span><span> </span> <span>/* wrap the compressed data in base64 */</span>
<span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
<span> </span>   <span>/* a binary stream of the compressed data is given by body */</span>
<span> </span>   compressedHtml<span>.</span>body
<span> </span> <span>)</span></span></code></pre>

<h3 id="2-bodypipethroughnew-decompressionstream">2. body.pipeThrough(new DecompressionStream(...))</h3>

<p>Next thing to note is the <code>DecompressionStream</code> class. This is from the new <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API"><strong>Compression Streams API</strong></a> which allows browser native compression and decompression. This saves a lot of decompression code from being bundled with the URL.</p>

<p>As of writing, this API can only consume streams. That’s why the code required streams.</p>

<p>Continuing. The <code>body</code> stream containing the compressed data is piped through the decompressor, which results in the uncompressed, original HTML string - in a <em>stream</em>.</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
</span><span><span>-</span>   compressedHtml<span>.</span>body
</span><span><span>+</span>   <span>/* this results in a stream of the original HTML */</span>
<span>+</span>   compressedHtml<span>.</span>body
<span>+</span>     <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<p><code>deflate-raw</code> is the compression algorithm. The same algorithm must be specified for both compression and decompression.</p>

<p>To convert the decompressed stream to a usable <em>string</em>, we can use...</p>

<h3 id="3-new-responsestreamtext">3. new Response(stream).text()</h3>

<p>We can abuse the native <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Response="><strong>Response</strong></a> class’s <code>text()</code> function to convert the stream into a string.</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
</span><span><span>+</span>   <span>/* a Response wrapper will be used to decode into text */</span>
<span>+</span>   <span>new</span> <span>Response</span><span>(</span>
</span><span><span> </span>     compressedHtml<span>.</span>body
<span> </span>       <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
</span><span><span>+</span>   <span>)</span>
<span>+</span>   <span>/* decode stream into text */</span>
<span>+</span>   <span>.</span><span>text</span><span>(</span><span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<h3 id="4-documentdocumentelementinnerhtml--html">4. document.documentElement.innerHTML = html</h3>

<p>Finally, the uncompressed HTML in string form is assigned to the whole document. <code>document.write(html)</code> could have been used here, but some browsers don’t like this function. <code>innerHTML</code> works equivalently well.</p>

<p>This brings us to the final form:</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
<span> </span>   <span>new</span> <span>Response</span><span>(</span>
<span> </span>     compressedHtml<span>.</span>body
<span> </span>       <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
<span> </span>   <span>)</span>
<span> </span>   <span>.</span><span>text</span><span>(</span><span>)</span>
</span><span><span>+</span>   <span>.</span><span>then</span><span>(</span><span>html</span> <span>=&gt;</span>
<span>+</span>     <span>/* replace page with decoded html */</span>
<span>+</span>     document<span>.</span>documentElement<span>.</span>innerHTML <span>=</span> html
<span>+</span>   <span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<p>I’m pretty sure the above code could be minified further, but this is the smallest I could make it.</p>

<h2 id="preparing-the-compressed-code">Preparing the compressed code</h2>

<p>The above describes the process of <em>decompressing</em> the base64-encoded compressed HTML. Where does that compressed HTML string come from?</p>

<p>The following function creates the base64-encoded compressed string from an input HTML:</p>

<pre><code><span>async</span> <span>function</span> <span>formatPayload</span><span>(</span><span>html</span><span>)</span> <span>{</span>
  <span>const</span> compressed <span>=</span> <span>await</span> <span>new</span> <span>Response</span><span>(</span>
    <span>new</span> <span>Blob</span><span>(</span><span>[</span>html<span>]</span><span>)</span>
      <span>.</span><span>stream</span><span>(</span><span>)</span>
      <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>CompressionStream</span><span>(</span><span>'deflate-raw'</span><span>)</span><span>)</span>
  <span>)</span><span>.</span><span>arrayBuffer</span><span>(</span><span>)</span><span>;</span>
  <span>return</span> <span>btoa</span><span>(</span>String<span>.</span><span>fromCharCode</span><span>(</span><span>...</span><span>new</span> <span>Uint8Array</span><span>(</span>compressed<span>)</span><span>)</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>This function is called at authoring time.</p>

<p><span>It’s important to compress the data first before encoding it in base64. Doing it in the wrong order results in a larger size! This is because base64 messes with the byte (octet) alignment but the compression algorithm works in terms of bytes. In addition, base64 encoding in itself inflates the data by 33%.</span></p>

<h2 id="demo">Demo</h2>

<p>This demo was made using the portablink’s core library <code>https://portabl.ink/pack.js</code>.</p>

<p>Edit the HTML below!</p>
<textarea id="demoHTML" rows="8"></textarea>⬇<textarea id="demoURL" rows="8" readonly=""></textarea><script type="module" async="" defer="" src="/scripts/notes_compressing_websites_into_urls_index_html.js"></script>
<p><span>Note: If your input is not compressible enough, the overhead of bundling the decompression code might not be worth it. The tool may decide to use plain text, whichever is smaller.</span></p>

<p>Check out the full-fledged tool at <a target="_blank" href="https://portabl.ink"><strong>portabl.ink</strong></a>! It’s got a WYSIWYG editor, pretty pages, and more!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Portablink was a fun weekend project (actually about a week). I learned about new Web APIs and some <a target="_blank" href="https://en.wikipedia.org/wiki/Code_golf">code golfing</a> techniques. I launched a “product”!</p>

<p>Potential improvement(s):</p>

<ul>
              <li>Use <a target="_blank" href="https://github.com/kevinAlbs/Base122">Base122</a> for more compression. We’re not restricted to ASCII anymore. We can use a larger range of characters than base64. This adds a significant amount of decoder code though.</li>
              <li>Better authoring experience.</li>
            </ul>

<p>Limitation(s):</p>

<ul>
              <li>Data URLs, while portable, are a poor way to share links. Browsers restrict navigation to data URLs. Apps don’t accept them. These URLs are presumed to be malicious nowadays.</li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/compressing-websites-into-urls?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/compressing-websites-into-urls?ref=rss</guid>
            <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Compressing a website into a URL]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/compressing-websites-into-urls?ref=rss">original post on leanrada.com</a>.</em></p>

<p>This post explains how <a target="_blank" href="https://portabl.ink"><strong>portabl.ink</strong></a> works. Portablink is a tool that creates self-contained compressed web pages in a single link. Check <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">portablink project page</a> for more info.</p>

<p>tl;dr: It uses <strong>data URLs</strong> containing <strong>compressed data</strong> which is bundled with its own <strong>decompression instructions</strong>.</p>

<h2 id="data-urls">Data URLs</h2>

<p>In case you aren’t familiar with <a target="_blank" href="https://en.wikipedia.org/wiki/Data_URI_scheme"><strong>data URLs</strong></a>, they are URLs whose contents are in the URL itself. They all start with <code>data:</code>. Here, let me show you with this <em>interactive</em> mock browser:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/compressing-websites-into-urls?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: browser demo</pre>

<p><em>(Hint: edit the URL in the address bar!)</em></p>

<p>When you load a data URL, the browser shows the content embedded in the URL directly.</p>
<blockquote>
              <p>So, that’s it? Website in a URL?&nbsp;— Use data URLs! Easy!</p>
            </blockquote>
<p>Wait, there’s more! The portablink tool does some more things than just putting your HTML in a data URL. The tool also <strong>compresses</strong> your content so you don’t end up with humongous URLs.</p>

<h2 id="compression">Compression</h2>

<p>Within a data URL, the tool bundles both the compressed data <em>and</em> the instructions needed to decompress and bootstrap that data. This produces a self-contained, compressed document in a single portable link that can be decompressed and rendered by any modern browser.</p>

<p>Here’s an example URL generated by the tool:</p>

<pre><code>data:text/html,<span><span><span>&lt;</span>body</span> <span><span>onload</span><span><span>=</span><span>"</span><span>fetch<span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68OyX8pDpSibDJhwqbGZbdrQpP/7DI7WpluDZPv8fb7Pd8dBXJqKJ3HJaJ7EBgxnyRJEi5aQhYbaIVk8dvhgEGvTdgZCqczbvV0RykHXnLazgrPdvEe2jTZQtGEmhWHCzDI7MeU4ymEjQjCs0id4Yc+GBa2At7MGQiUbkbMce9eg6AaERAuqGvRJmhIy9E3JLx7+3kB2q6nI8ZWsCqkMpXhBxZYqwN4HBZSjH04GLZbevxD6KHnu4SsbUmpdtGxUxkIrqMNaSdwbmikouggf7RhtFOSnSXeIS6CzQpuWhQ2zqfOmEnqmWM2o8S/xpFCBO3gPuSln76O7CoRDSgab0jyDusvSxhgp9k/F0fDAZtN3T24cBAuPvpGDUqlypmZacshRhFJOs9tTwZkwZZiVwHP/UgT4/3g4CfbP9ELOChMe4653rwqK4dtTPyPrl27x+NhC1nI913VSEudwhzJOtSZeV0mv67HY3YAgJ14UeUk8dsBLbnKGm57hoskZzTPc9AwXTc9onuGmJ1w8tvXoagTVBmmVEc9DUjClpCLegDODAG/xLa6wIqsIT/B0jUty8buRZg7CHrxeLj67LTZKkAg/kFxmTWW/uFFX8FW5HuB7UpNEM7OEisnG+L9IsqecKePXQ+dsm1XoN84O5i8VyMMjnkRRMMCU+DaggCT2ja/ccTcPYbi1N2XEah+Jm2NcbvnqlvWoorVvw/HVSMuK+S1J1IjdMdX6O5JQf4fboLuS1MHhcMK0ePcKszvDTMO/XBBc0Kqe99O9b/cD1UcDXQidsbVhpSRJR1Jk3P5zumRS63w4+N1yrPvNMZWVLfhPMlnjzLfSPu0rY59B/4L7Zh/3/9w/</span><span>`</span></span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span><span>new</span> <span>Response</span><span>(</span>a<span>.</span>body<span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span><span>)</span><span>.</span><span>text</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span>document<span>.</span>documentElement<span>.</span>innerHTML<span>=</span>a<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span></code></pre>

<p>The URL above is 1,078 bytes. It was compressed from a source doc of size 1.37 KB, which is a 23% compression!</p>

<p>Btw, the above URL loads a simple tic-tac-toe web game. See for yourself by copying it into your browser’s address bar.</p>

<h2 id="so-how-does-it-work">So, how does it work?</h2>

<p>The embedded document contains a singular <code>&lt;body&gt;</code> tag with an <code>onload</code> callback. The callback itself contains the main script that will decompress and render the desired content.</p>

<p>A small point: Why <code>onload</code>? Well, it’s shorter than using a <code>&lt;script&gt;</code> tag.</p>

<pre><code>A: <span><span><span>&lt;</span>body</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>/* code */</span></span><span>"</span></span></span><span>&gt;</span></span>
B: <span><span><span>&lt;</span>script</span><span>&gt;</span></span><span><span><span>/* code */</span></span></span><span><span><span>&lt;/</span>script</span><span>&gt;</span></span></code></pre>

<p>The closing tag is optional for <code>body</code> but not for <code>script</code>. In the end, the <code>body</code> tag wins by 1 character! Every character - in a URL - is precious.</p>
<span>
              <code>&lt;img onerror="..."&gt;</code> would’ve worked as well, having equal length as the <code>body</code> option.
            </span>
<p>Now, with that out of the way, let’s break the main script down. I’ll plop the prettified code here first, then explain the interesting bits.</p>

<pre><code><span>fetch</span><span>(</span>
  <span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68OyX8pDpSibDJhwqbGZbdrQpP/7DI7WpluDZPv8fb7Pd8dBXJqKJ3HJaJ7EBgxnyRJEi5aQhYbaIVk8dvhgEGvTdgZCqczbvV0RykHXnLazgrPdvEe2jTZQtGEmhWHCzDI7MeU4ymEjQjCs0id4Yc+GBa2At7MGQiUbkbMce9eg6AaERAuqGvRJmhIy9E3JLx7+3kB2q6nI8ZWsCqkMpXhBxZYqwN4HBZSjH04GLZbevxD6KHnu4SsbUmpdtGxUxkIrqMNaSdwbmikouggf7RhtFOSnSXeIS6CzQpuWhQ2zqfOmEnqmWM2o8S/xpFCBO3gPuSln76O7CoRDSgab0jyDusvSxhgp9k/F0fDAZtN3T24cBAuPvpGDUqlypmZacshRhFJOs9tTwZkwZZiVwHP/UgT4/3g4CfbP9ELOChMe4653rwqK4dtTPyPrl27x+NhC1nI913VSEudwhzJOtSZeV0mv67HY3YAgJ14UeUk8dsBLbnKGm57hoskZzTPc9AwXTc9onuGmJ1w8tvXoagTVBmmVEc9DUjClpCLegDODAG/xLa6wIqsIT/B0jUty8buRZg7CHrxeLj67LTZKkAg/kFxmTWW/uFFX8FW5HuB7UpNEM7OEisnG+L9IsqecKePXQ+dsm1XoN84O5i8VyMMjnkRRMMCU+DaggCT2ja/ccTcPYbi1N2XEah+Jm2NcbvnqlvWoorVvw/HVSMuK+S1J1IjdMdX6O5JQf4fboLuS1MHhcMK0ePcKszvDTMO/XBBc0Kqe99O9b/cD1UcDXQidsbVhpSRJR1Jk3P5zumRS63w4+N1yrPvNMZWVLfhPMlnjzLfSPu0rY59B/4L7Zh/3/9w/</span><span>`</span></span>
<span>)</span>
<span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
  <span>new</span> <span>Response</span><span>(</span>
    compressedHtml<span>.</span>body
      <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
  <span>)</span>
  <span>.</span><span>text</span><span>(</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>html</span> <span>=&gt;</span>
    document<span>.</span>documentElement<span>.</span>innerHTML <span>=</span> html
  <span>)</span>
<span>)</span></code></pre>

<h3 id="1-fetchdatabase64fvtfb5sweh">1. fetch(`data:;base64,fVTfb5swEH...`)</h3>

<p>The first thing you’ll notice is the huge chunk of base64-encoded data wrapped in a <code>fetch()</code> call.</p>

<p>The encoded data is the compressed HTML which has been prepared by a complementary compression script. Since compressed data is binary, it has been encoded in a text-friendly format for it to be a valid URL. Base64, an encoding that’s native to the web, was used for this purpose.</p>

<p>To decode the base64 data, instead of using the standard <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/atob"><code>atob()</code></a> function, <code>fetch()</code> was used. <code>fetch</code> sees the <code>;base64</code> flag in that data URL and decodes it natively. </p>

<p>While it accomplishes the same thing as <code>atob</code>, <code>fetch</code> is slightly better, because:</p>

<ol>
              <li><code>fetch()</code> outputs a stream, the format needed for decompression later.</li>
              <li>Code size. We’re optimising for the total URL length. The <code>atob</code> method requires <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem">extra massaging for Unicode</a>.</li>
            </ol>

<p>Here’s a quick length comparison. A is fetch. B is atob. Below is a character ruler with markings.</p>

<pre><code><span>A</span><span>:</span> fetch<span><span>`</span><span>data:;base64,dVo=</span><span>`</span></span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span>a<span>.</span>body<span>)</span>
<span>B</span><span>:</span> <span>new</span> <span>Blob</span><span>(</span><span>[</span>Uint8Array<span>.</span><span>from</span><span>(</span>atob<span><span>`</span><span>dVo=</span><span>`</span></span><span>,</span><span>a</span><span>=&gt;</span>a<span>.</span><span>codePointAt</span><span>(</span><span>0</span><span>)</span><span>)</span><span>]</span><span>)</span><span>.</span><span>stream</span><span>(</span><span>)</span>
                                          <span>^</span>                           <span>^</span>
                                          <span>A</span>                           <span>B</span>
   <span>0</span>        <span>10</span>        <span>20</span>        <span>30</span>        <span>40</span>        <span>50</span>        <span>60</span>       
   <span>12345678901234567890123456789012345678901234567890123456789012345678</span></code></pre>

<p>The <code>atob()</code> method requires additional 28 characters!</p>
<span>
              <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">Tagged templates</a></strong> can be abused here to save a couple of characters. Instead of <code>fetch("abc")</code>, we can use <code>fetch`abc`</code>!
            </span>
<p>Here is the code described so far:</p>

<pre><code><span><span> </span> <span>/* wrap the compressed data in base64 */</span>
<span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
<span> </span>   <span>/* a binary stream of the compressed data is given by body */</span>
<span> </span>   compressedHtml<span>.</span>body
<span> </span> <span>)</span></span></code></pre>

<h3 id="2-bodypipethroughnew-decompressionstream">2. body.pipeThrough(new DecompressionStream(...))</h3>

<p>Next thing to note is the <code>DecompressionStream</code> class. This is from the new <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API"><strong>Compression Streams API</strong></a> which allows browser native compression and decompression. This saves a lot of decompression code from being bundled with the URL.</p>

<p>As of writing, this API can only consume streams. That’s why the code required streams.</p>

<p>Continuing. The <code>body</code> stream containing the compressed data is piped through the decompressor, which results in the uncompressed, original HTML string - in a <em>stream</em>.</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
</span><span><span>-</span>   compressedHtml<span>.</span>body
</span><span><span>+</span>   <span>/* this results in a stream of the original HTML */</span>
<span>+</span>   compressedHtml<span>.</span>body
<span>+</span>     <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<p><code>deflate-raw</code> is the compression algorithm. The same algorithm must be specified for both compression and decompression.</p>

<p>To convert the decompressed stream to a usable <em>string</em>, we can use...</p>

<h3 id="3-new-responsestreamtext">3. new Response(stream).text()</h3>

<p>We can abuse the native <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Response="><strong>Response</strong></a> class’s <code>text()</code> function to convert the stream into a string.</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
</span><span><span>+</span>   <span>/* a Response wrapper will be used to decode into text */</span>
<span>+</span>   <span>new</span> <span>Response</span><span>(</span>
</span><span><span> </span>     compressedHtml<span>.</span>body
<span> </span>       <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
</span><span><span>+</span>   <span>)</span>
<span>+</span>   <span>/* decode stream into text */</span>
<span>+</span>   <span>.</span><span>text</span><span>(</span><span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<h3 id="4-documentdocumentelementinnerhtml--html">4. document.documentElement.innerHTML = html</h3>

<p>Finally, the uncompressed HTML in string form is assigned to the whole document. <code>document.write(html)</code> could have been used here, but some browsers don’t like this function. <code>innerHTML</code> works equivalently well.</p>

<p>This brings us to the final form:</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
<span> </span>   <span>new</span> <span>Response</span><span>(</span>
<span> </span>     compressedHtml<span>.</span>body
<span> </span>       <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
<span> </span>   <span>)</span>
<span> </span>   <span>.</span><span>text</span><span>(</span><span>)</span>
</span><span><span>+</span>   <span>.</span><span>then</span><span>(</span><span>html</span> <span>=&gt;</span>
<span>+</span>     <span>/* replace page with decoded html */</span>
<span>+</span>     document<span>.</span>documentElement<span>.</span>innerHTML <span>=</span> html
<span>+</span>   <span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<p>I’m pretty sure the above code could be minified further, but this is the smallest I could make it.</p>

<h2 id="preparing-the-compressed-code">Preparing the compressed code</h2>

<p>The above describes the process of <em>decompressing</em> the base64-encoded compressed HTML. Where does that compressed HTML string come from?</p>

<p>The following function creates the base64-encoded compressed string from an input HTML:</p>

<pre><code><span>async</span> <span>function</span> <span>formatPayload</span><span>(</span><span>html</span><span>)</span> <span>{</span>
  <span>const</span> compressed <span>=</span> <span>await</span> <span>new</span> <span>Response</span><span>(</span>
    <span>new</span> <span>Blob</span><span>(</span><span>[</span>html<span>]</span><span>)</span>
      <span>.</span><span>stream</span><span>(</span><span>)</span>
      <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>CompressionStream</span><span>(</span><span>'deflate-raw'</span><span>)</span><span>)</span>
  <span>)</span><span>.</span><span>arrayBuffer</span><span>(</span><span>)</span><span>;</span>
  <span>return</span> <span>btoa</span><span>(</span>String<span>.</span><span>fromCharCode</span><span>(</span><span>...</span><span>new</span> <span>Uint8Array</span><span>(</span>compressed<span>)</span><span>)</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>This function is called at authoring time.</p>

<p><span>It’s important to compress the data first before encoding it in base64. Doing it in the wrong order results in a larger size! This is because base64 messes with the byte (octet) alignment but the compression algorithm works in terms of bytes. In addition, base64 encoding in itself inflates the data by 33%.</span></p>

<h2 id="demo">Demo</h2>

<p>This demo was made using the portablink’s core library <code>https://portabl.ink/pack.js</code>.</p>

<p>Edit the HTML below!</p>
<textarea id="demoHTML" rows="8"></textarea>⬇<textarea id="demoURL" rows="8" readonly=""></textarea><script type="module" async="" defer="" src="/scripts/notes_compressing_websites_into_urls_index_html.js"></script>
<p><span>Note: If your input is not compressible enough, the overhead of bundling the decompression code might not be worth it. The tool may decide to use plain text, whichever is smaller.</span></p>

<p>Check out the full-fledged tool at <a target="_blank" href="https://portabl.ink"><strong>portabl.ink</strong></a>! It’s got a WYSIWYG editor, pretty pages, and more!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Portablink was a fun weekend project (actually about a week). I learned about new Web APIs and some <a target="_blank" href="https://en.wikipedia.org/wiki/Code_golf">code golfing</a> techniques. I launched a “product”!</p>

<p>Potential improvement(s):</p>

<ul>
              <li>Use <a target="_blank" href="https://github.com/kevinAlbs/Base122">Base122</a> for more compression. We’re not restricted to ASCII anymore. We can use a larger range of characters than base64. This adds a significant amount of decoder code though.</li>
              <li>Better authoring experience.</li>
            </ul>

<p>Limitation(s):</p>

<ul>
              <li>Data URLs, while portable, are a poor way to share links. Browsers restrict navigation to data URLs. Apps don’t accept them. These URLs are presumed to be malicious nowadays.</li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/compressing-websites-into-urls?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/compressing-websites-into-urls?ref=rss</guid>
            <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introducing portabl.ink]]></title>
            <description><![CDATA[
<p>I just released a small weekend project called <a target="_blank" href="https://portabl.ink">portabl.ink</a>. It’s a tool to compress whole web pages into a self-contained portable link.</p>

<p>Try it out online at <a target="_blank" href="https://portabl.ink">portabl.ink</a>!</p>

<img srcset="/notes/introducing-portabl.ink/hero_800.generated.png 800w,/notes/introducing-portabl.ink/hero_1280.generated.png 1280w,/notes/introducing-portabl.ink/hero_1400.generated.png 1400w" sizes="not (min-width:800px) 800px,not (min-width:1750px) 1280px, 1400px" alt="screenshot" src="https://leanrada.com/notes/introducing-portabl.ink/hero.png?ref=rss" spec="100% [800) 80% [1750) 1400" loading="lazy" width="400%" height="">

<p>For some examples and more details, read the <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">project page</a>.</p>

<p>Next, I will write another post on how it works under-the-hood. Stay tuned!
            </p>
]]></description>
            <link>https://leanrada.com/notes/introducing-portabl.ink?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/introducing-portabl.ink?ref=rss</guid>
            <pubDate>Mon, 25 Sep 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introducing portabl.ink]]></title>
            <description><![CDATA[
<p>I just released a small weekend project called <a target="_blank" href="https://portabl.ink">portabl.ink</a>. It’s a tool to compress whole web pages into a self-contained portable link.</p>

<p>Try it out online at <a target="_blank" href="https://portabl.ink">portabl.ink</a>!</p>

<img srcset="/notes/introducing-portabl.ink/hero_800.generated.png 800w,/notes/introducing-portabl.ink/hero_1280.generated.png 1280w,/notes/introducing-portabl.ink/hero_1400.generated.png 1400w" sizes="not (min-width:800px) 800px,not (min-width:1750px) 1280px, 1400px" alt="screenshot" src="https://leanrada.com/notes/introducing-portabl.ink/hero.png?ref=rss" spec="100% [800) 80% [1750) 1400" loading="lazy" width="400%" height="">

<p>For some examples and more details, read the <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">project page</a>.</p>

<p>Next, I will write another post on how it works under-the-hood. Stay tuned!
            </p>
]]></description>
            <link>https://leanrada.com/notes/introducing-portabl.ink?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/introducing-portabl.ink?ref=rss</guid>
            <pubDate>Mon, 25 Sep 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Sort, sweep, and prune: Part 2]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">original post on leanrada.com</a>.</em></p>

<p>In the <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss">first part</a>, we figured that sorting lets us exploit the transitive property of inequality to optimise the number of pairwise tests.</p>

<p>We ended up with - let’s call it a <strong>“simplified version”</strong>, of the full sweep-and-prune algorithm.</p>

<p>This part explores the more sophisticated versions of sweep-and-prune.</p>

<img srcset="/notes/sweep-and-prune-2/sophisticated_250.generated.png 250w" sizes=" 250px" alt="Classy rageface" src="https://leanrada.com/notes/sweep-and-prune-2/sophisticated.png?ref=rss" spec="250" loading="lazy" width="100%" height="">
<span>Sophisticated sip and prune.</span>
<h2 id="proper-sweep-and-prune-🧐">Proper sweep-and-prune 🧐</h2>

<p>Let’s see how the original version tackled the problem (Not sure which one’s original, tbh).</p>

<p>First, sorting widthy objects.</p>

<p>To account for the width of objects while keeping the benefits of unambiguous sort order, we track the left and the right edges of each object as two separate points.</p>

<p>This is done by maintaining a separate <strong>array of edge points</strong> corresponding to the objects’ left &amp; right edges.</p>

<p>See how it works by playing with this <span>draggable</span> demo. The left and right edges of each ball are visualised. These edge points are stored in a sorted array shown below the box.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive diagram showing a specific mechanism</pre>

              Sorted array of edges:
              
<p>Of course, we need to initialise the edge data and continually keep them in sync with the objects. I’ll leave that out as an implementation detail.</p>

<pre><code><span>// todo: extract 2 edges from each object into the array</span>
<span>let</span> <span>edges</span><span>:</span> Array<span>&lt;</span><span>{</span>
  <span>object</span><span>:</span> Object<span>;</span>  <span>// parent object</span>
  <span>x</span><span>:</span> number<span>;</span>       <span>// x-coordinate</span>
  <span>isLeft</span><span>:</span> boolean<span>;</span> <span>// true if left edge. false if right</span>
<span>}</span><span>&gt;</span><span>;</span></code></pre>

<p>This sorted array of edges is all we need to facilitate the reduction of unnecessary pairwise tests.</p>

<h3 id="index-as-position-position-as-index">Index as position, position as index</h3>

<p>Remember the <code>intersects()</code> function? Let’s focus only on the x-axis checks:</p>

<pre><code><span>function</span> <span>intersects</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>return</span> object1<span>.</span>left <span>&lt;</span> object2<span>.</span>right
      <span>&amp;&amp;</span> object1<span>.</span>right <span>&gt;</span> object2<span>.</span>left
      <span>/* ... */</span><span>;</span>
<span>}</span></code></pre>

<p>We can replace these x-coordinate comparisons with a new approach based on array indices. Since we have a sorted array of every object’s left and right points, finding x-overlaps can be done via index-based searches rather than global pairwise testing.</p>

<p>Take one ball for example. Get the indices of its left and right points, and you can simply run in between those two points in the array to find all x-overlapping objects! This is a very fast linear operation.</p>

<p>Here’s a viz. Try <span>dragging</span> the <span>highlighted ball</span> below and observe the edges enclosed visually and in the sorted array:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive diagram showing a specific mechanism</pre>

              Sorted array of edges:
              
<p>The above is a simple 1-to-n overlap detection (which is flawed, btw). For n-to-n overlap detection, turns out there is a neat way to find all overlapping pairs in a single pass!</p>

<h2 id="chapter-2-sweeping">Chapter 2. Sweeping</h2>

<p>To generalise the above to an n-interval overlap scan, imagine a vertical line sweeping across the whole space from left to right. The sweep line keeps track of the objects it is currently touching.</p>

<p>Let’s see what that looks like without collision:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

                Objects touching the line are lit up in <span>pink</span>.
              
<p>As for the implementation, the line is merely a metaphor. It’s just a visualisation of an iteration through the sorted list of edges.</p>

<p>To keep track of objects touching the line, we maintain a set called <span><code>touching</code></span> in code.</p>

<p>Whenever the line runs into an object (a left edge), the object is added to the set. Likewise, whenever it exits an object (right edge), the object is removed from the set.</p>

<pre><code><span>sort</span><span>(</span>edges<span>)</span><span>;</span>

<span>const</span> touching <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>
<span>for</span> <span>(</span><span>const</span> edge <span>of</span> edges<span>)</span> <span>{</span>
  <span>if</span> <span>(</span>edge<span>.</span>isLeft<span>)</span> <span>{</span>
    <span>// entering an object</span>
    touching<span>.</span><span>add</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// exiting an object</span>
    touching<span>.</span><span>delete</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Once we have the sweep working, detecting overlaps is easy…</p>

<p>👉 Whenever the sweep line enters a new object (a left edge), in addition to inserting it to <code>touching</code>, we can mark it as overlapping with the rest of the objects in <code>touching</code>.</p>

<p>Watch closely whenever the line enters a ball while the line is <code>touching</code> other balls. Detected overlaps are highlighted:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

                X-overlapping pairs are highlighted <span aria-label="a connecting green line"></span> as the line sweeps.
              
<p>Here’s the updated code for detecting and reporting overlaps:</p>

<pre><code><span><span> </span> <span>sort</span><span>(</span>edges<span>)</span><span>;</span>
<span> </span> 
<span> </span> <span>const</span> touching <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>
<span> </span> <span>for</span> <span>(</span><span>const</span> edge <span>of</span> edges<span>)</span> <span>{</span>
<span> </span>   <span>if</span> <span>(</span>edge<span>.</span>isLeft<span>)</span> <span>{</span>
<span> </span>     <span>// entering an object</span>
</span><span><span>+</span>     
<span>+</span>     <span>// the new object is overlapping with the existing ones</span>
<span>+</span>     <span>for</span> <span>(</span><span>const</span> other <span>of</span> touching<span>)</span> <span>{</span>
<span>+</span>       <span>onOverlapX</span><span>(</span>other<span>,</span> edge<span>.</span>object<span>)</span><span>;</span>
<span>+</span>     <span>}</span>
<span>+</span>     
</span><span><span> </span>     touching<span>.</span><span>add</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
<span> </span>   <span>}</span> <span>else</span> <span>{</span>
<span> </span>     <span>// exiting an object</span>
<span> </span>     touching<span>.</span><span>delete</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
<span> </span>   <span>}</span>
<span> </span> <span>}</span></span></code></pre>

<h2 id="chapter-3-pruning">Chapter 3. Pruning</h2>

<p><code>onOverlapX()</code> is called whenever two balls are overlapping in the x dimension. What about the other dimension, <em>y</em>? What if we’re working with 3D, how about <em>z</em>?</p>

<p>Don’t worry; the sweep is just a broad-phase test, a way to <em>prune</em> candidate pairs in bulk. There will be a narrow-phase test to determine exactly the intersections in each of the remaining pairs.</p>

<p><code>onOverlapX()</code> can be hooked up to an exact intersection test like the full <code>intersects()</code> function earlier. Or, since we already know that the argument pair overlaps in <em>x</em>, we can just check for <em>y</em>.</p>

<pre><code><span>onOverlapX</span> <span>=</span> <span>function</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>// just check for y</span>
  <span>if</span> <span>(</span>object1<span>.</span>top <span>&lt;</span> object2<span>.</span>bottom
   <span>&amp;&amp;</span> object1<span>.</span>bottom <span>&gt;</span> object2<span>.</span>top<span>)</span> <span>{</span>
    <span>collide</span><span>(</span>object1<span>,</span> object2<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>

<p>While the above formula works for most games, a more precise and time-consuming check could be done at this level since most candidates have already been pruned. Our ball example would work better with the following circle intersection test using the <a target="_blank" href="https://en.wikipedia.org/wiki/Euclidean_distance">Euclidean distance formula</a>:</p>

<pre><code><span>onOverlapX</span> <span>=</span> <span>function</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>// compute circle-to-circle intersection</span>
  <span>const</span> distance <span>=</span> <span>sqrt</span><span>(</span>
      <span>(</span>object1<span>.</span>x <span>-</span> object2<span>.</span>x<span>)</span> <span>**</span> <span>2</span>
    <span>+</span> <span>(</span>object1<span>.</span>y <span>-</span> object2<span>.</span>y<span>)</span> <span>**</span> <span>2</span>
  <span>)</span><span>;</span>
  <span>if</span> <span>(</span>distance <span>&lt;</span> object1<span>.</span>radius <span>+</span> object2<span>.</span>radius<span>)</span> <span>{</span>
    <span>bounce</span><span>(</span>object1<span>,</span> object2<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Finally, the demo:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

                Ball sim using sweep-and-prune. <code>onOverlapX()</code> calls highlighted <span aria-label="a connecting green line"></span>.
              
<p>Notice that it behaves very similarly to the simplified version. It limits tests to x-overlapping pairs.</p>

<p><span>The sweep-and-prune algorithm is also known as sort-and-sweep.</span></p>

<h3 id="note-for-higher-dimensions">Note for higher dimensions</h3>

<p>There is a variant which performs the <strong>sweep for each axis</strong>, not just <em>x</em>. For example in 3D, it maintains three <em>separate</em> sorted lists of edges for x, y, and z. Indeed, this is how the full sweep-and-prune implementation works as described in the <a target="_blank" href="https://ecommons.cornell.edu/handle/1813/7115">original paper by D. Baraff</a>. Object pairs are flagged for overlaps separately per dimension. Pairs flagged in all dimensions would be considered intersecting.</p>

<p>This is the advantage the full sweep-and-prune has over the simplified “sorted pairwise” version. It can prune in multiple dimensions!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap-2d' strategy</pre>

                2D sweep-and-prune. Only pairs with overlapping <a target="_blank" href="https://en.wikipedia.org/wiki/Bounding_volume#:~:text=axis%2Daligned%20bounding%20box">AABBs</a> are tested <span aria-label="a connecting green line"></span>.
              
<h2 id="performance-of-sweep-and-prune">Performance of sweep-and-prune</h2>

<p><a id="comparisons"></a>Here’s a side-by-side comparison of the strategies we’ve covered so far! Observe the amount of intersection checks required per frame. 🔍</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>
Global pairwise
<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>
1D sweep and prune
<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap-2d' strategy</pre>
2D sweep and prune
<p>Let’s analyse the time complexity of 1D sweep-and-prune. 👓</p>

<p>The sort step, again, is <em>O(n log n)</em>.</p>

<p>The sweep, which is a linear pass with an inner loop for overlaps, should be <em>O(n&nbsp;+&nbsp;m)</em> in the average case. Again, <em>m</em> is the number of overlaps.</p>

<pre><code><span>function</span> <span>sweepAndPrune</span><span>(</span><span>edges</span><span>)</span> <span>{</span>
  <span>// O(n log n)</span>
  <span>sort</span><span>(</span>edges<span>)</span><span>;</span>

  <span>const</span> touching <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>

  <span>// O(n + m)</span>
  <span>for</span> <span>(</span><span>const</span> edge <span>of</span> edges<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>edge<span>.</span>isLeft<span>)</span> <span>{</span>
      <span>// O(1) at best; O(m/n) on average; O(n) at worst</span>
      <span>for</span> <span>(</span><span>const</span> other <span>of</span> touching<span>)</span> <span>{</span>
        <span>onOverlapX</span><span>(</span>other<span>,</span> edge<span>.</span>object<span>)</span><span>;</span>
      <span>}</span>
      touching<span>.</span><span>add</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span> 
    <span>}</span> <span>else</span> <span>{</span>
      touching<span>.</span><span>delete</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>So this sweep-and-prune is <em><strong>O(n log n + m)</strong></em>.</p>

<p>That’s great, but it’s the same as simplified sweep-and-prune but with more code and more state to keep tabs on. <em>Can we improve it further?</em></p>

<h2 id="small-detail-big-improvement">Small detail, big improvement</h2>

<p>Again, let’s ask the question: Where is redundant work being done here?</p>

<p>Let’s look at the sort step, which is the bottleneck of the algorithm according to the analysis.</p>

<p>The following is a visualisation of the sorting of the edges array, using an optimised <a target="_blank" href="https://en.wikipedia.org/wiki/Quicksort">quicksort</a> (n&nbsp;log&nbsp;n):</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-quicksort' strategy</pre>

                Sort <span>comparisons</span> and <span>swaps</span> are highlighted. The fixed lines at the top are edge array positions, connected to actual ball edge x positions below. Line crossings signal incorrect order.
              
<p>You can see that most of the time, the sort does nothing at all! The list is almost always <strong>already sorted from the previous frame</strong>.</p>

<p>Even when it becomes unsorted, it usually just takes a couple of swaps to be sorted again. There won’t be more than a few object boundaries changing places in one time step.</p>

<p>Fortunately, the subject of sorting algorithms is well-researched. We’re dealing with the special quality of being <em>nearly-sorted</em>. And one great choice for sorting nearly-sorted lists is <a target="_blank" href="https://en.wikipedia.org/wiki/Insertion_sort"><strong>insertion sort</strong></a>!</p>

<pre><code><span>function</span> <span>insertionSort</span><span>(</span><span>edges</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> edges<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span> j <span>&gt;=</span> <span>0</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>edges<span>[</span>j<span>]</span><span>.</span>x <span>&lt;</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>.</span>x<span>)</span> <span>break</span><span>;</span>
      <span>[</span>edges<span>[</span>j<span>]</span><span>,</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>]</span> <span>=</span> <span>[</span>edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> edges<span>[</span>j<span>]</span><span>]</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Insertion sort has a running time of <em>O(n)</em> at best when the list is already sorted or nearly-sorted, and <em>O(n<sup>2</sup>)</em> at worst when the list is in reverse. We can argue that the average case is <em><strong>O(n)</strong></em>, since the list is almost always sorted due to the previous frame’s sort.</p>

<p>Here’s insertion sort in action:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-insertionsort' strategy</pre>

                Sort <span>comparisons</span> and <span>swaps</span> are highlighted.
              
<p>Look at it go!</p>

<p>By switching to insertion sort, we’ve reduced the overall average running time of sweep-and-prune to <em><strong>O(n&nbsp;+&nbsp;m)</strong></em>! Awesome!</p>
<span>
              <b>Caveat:</b> It’s important to consider the primary axis of sweep-and-prune due to the sweeps plus the nature of insertion sort. It should be the axis where objects are most widely distributed to minimize swaps and overlaps.
            </span>
<p>Of course, don’t forget about our simplified sweep-and-prune from the first part. Since it has a sort step as well, we can make it insertion sort too. So it can also be <em>O(n&nbsp;+&nbsp;m)</em>! Can we ever top that?</p>

<h2 id="sweeps-and-swaps">Sweeps and swaps</h2>

<p>Well, there is yet another way to optimise this algorithm! Hold on to your balloons, it’s about to get quite dense. 🪨</p>

<p>Look at the insertion sort example above. You can observe that <span>swaps</span> happen when and only <strong>when an edge point passes through another edge point</strong>.</p>

<p>The event where an edge point passes another can be classified into four cases:</p>
<table>
                <thead>
                  <tr>
                    <th>Case</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code>)↔(</code></td>
                    <td>R edge from the west swaps with L edge from the east.</td>
                  </tr>
                  <tr>
                    <td><code>(↔)</code></td>
                    <td>L edge from the west swaps with R edge from the east.</td>
                  </tr>
                  <tr>
                    <td><code>(↔(</code></td>
                    <td>L edges swap.</td>
                  </tr>
                  <tr>
                    <td><code>)↔)</code></td>
                    <td>R edges swap.</td>
                  </tr>
                </tbody>
              </table>
<p>Each swap scenario can mean something significant. Let’s look more closely into each case. </p>

<h3 id="case-↔-entering">case )↔(. “Entering”</h3>

<video muted="" autoplay="" loop="" aria-label="Animation of a R edge swapping with a L edge">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-rl.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-rl.mp4?ref=rss">Animation of a R edge swapping with a L edge</a>
              </video>

<p>When a right edge from the west swaps with a left edge from the east, we can infer that the corresponding balls are <strong>initiating an overlap</strong>.</p>

<h3 id="case-↔-exiting">case (↔). “Exiting”</h3>

<video muted="" autoplay="" loop="" aria-label="Animation of a L edge swapping with a R edge">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-lr.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-lr.mp4?ref=rss">Animation of a L edge swapping with a R edge</a>
              </video>

<p>Conversely, when a left edge from the west swaps with a right edge from the east, the corresponding balls <strong>cease to overlap</strong>.</p>

<h3 id="cases-↔-and-↔">cases (↔( and )↔)</h3>

<video muted="" autoplay="" loop="" aria-label="Animation of a L edge swapping with a L edge">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-ll.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-ll.mp4?ref=rss">Animation of a L edge swapping with a L edge</a>
              </video>

<p>Edges of the same polarity can swap without affecting the overlappedness of their corresponding balls. We can ignore these ones.</p>

<h2 id="swaps-and-sweeps">Swaps and sweeps</h2>

<p>Based on these swap events we can reframe the mechanics of sweep-and-prune in a new perspective, a bottom-up way centred around the swaps.</p>

<p>A fun way to think about it is to pretend that a right edge is equivalent to a <em>localised</em> sweep line. In that sense, the right edge <em>is</em> the line sweeping over these other left edges.</p>

<video muted="" autoplay="" loop="" aria-label="Animation a line sweep vs animation of an edge swap">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-as-sweep.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-as-sweep.mp4?ref=rss">Animation a line sweep vs animation of an edge swap</a>
              </video>
<span>An edge can be thought of as a local sweep line.</span>
<p>Just as in a global sweep, passing over left edges will mark the corresponding balls as “touching”; in right-edge-as-a-local-sweep version, <em>swapping</em> left edges will mark its ball as overlapping with the right edge’s ball.</p>

<p>In the global sweep, there is a global <code>touching</code> set keeping track of which balls are in contact with the sweep line. In local swaps, we keep track of overlaps <em>per ball</em>. (More precisely, per pair.)</p>

<p>Lastly, in the global sweep, a right edge means the end of contact with a ball. In a local swap, a left edge passing over a right edge means the same thing. The corresponding balls are unmarked as overlapping.</p>

<p>Essentially, instead of a global sweep line, small local “sweeps” happen around each ball. Swaps become mini-sweeps.</p>

<p>Thus we arrive at the one-dimensional sweep-and-prune’s final form:</p>

<pre><code><span>function</span> <span>init</span><span>(</span><span>)</span> <span>{</span>
  overlapping <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>sweepAndPrune</span><span>(</span><span>edges</span><span>)</span> <span>{</span>
  <span>// Insertion sort</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> edges<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span> j <span>&gt;=</span> <span>0</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>edges<span>[</span>j<span>]</span><span>.</span>x <span>&lt;</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>.</span>x<span>)</span> <span>break</span><span>;</span>

      <span>// Swap</span>
      <span>[</span>edges<span>[</span>j<span>]</span><span>,</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>]</span> <span>=</span> <span>[</span>edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> edges<span>[</span>j<span>]</span><span>]</span><span>;</span>

      <span>// --- Code up until this point is plain insertion sort ---</span>

      <span>// These two edges have just swapped places, process it...</span>
      <span>const</span> edge1 <span>=</span> edges<span>[</span>j<span>]</span><span>;</span>
      <span>const</span> edge2 <span>=</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>

      <span>if</span> <span>(</span>edge1<span>.</span>isLeft <span>&amp;&amp;</span> <span>!</span>edge2<span>.</span>isLeft<span>)</span> <span>{</span> <span>// case R-L → L-R</span>
        <span>// Mark as overlapping</span>
        overlapping<span>.</span><span>set</span><span>(</span>
          <span>key</span><span>(</span>edge1<span>,</span> edge2<span>)</span><span>,</span>
          <span>[</span>edge1<span>.</span>ball<span>,</span> edge2<span>.</span>ball<span>]</span>
        <span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>!</span>edge1<span>.</span>isLeft <span>&amp;&amp;</span> edge2<span>.</span>isLeft<span>)</span> <span>{</span> <span>// case L-R → R-L</span>
        <span>// Unmark as overlapping</span>
        overlapping<span>.</span><span>delete</span><span>(</span><span>key</span><span>(</span>edge1<span>,</span> edge2<span>)</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> overlapping<span>.</span><span>values</span><span>(</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>It’s essentially insertion sort hooked up to track overlaps.</p>

<p>Let’s see it in action:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap' strategy</pre>

<p>While it behaves the same and has the same time complexity as the preceding variants, I’m guessing it’s practically much more efficient in terms of processing speed. In video games where every frame has a processing budget, the actual speed matters, not just the scalability. As always, benchmarking will determine the real practical measurement of speed. (Disclaimer: I haven’t done any benchmarks!)</p>

<h2 id="quick-comparisons">Quick comparisons</h2>
<table>
                <thead>
                  <tr>
                    <th>Algorithm</th>
                    <th>Average time</th>
                    <th>Best time</th>
                    <th>Space</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Global pairwise</td>
                    <td>O(n<sup>2</sup>)</td>
                    <td>O(n<sup>2</sup>)</td>
                    <td>O(1)</td>
                  </tr>
                  <tr>
                    <td>Sorted pairwise (quicksort)</td>
                    <td>O(n log n + m)</td>
                    <td>O(n log n)</td>
                    <td>O(1)</td>
                  </tr>
                  <tr>
                    <td>Sorted pairwise (insertion)</td>
                    <td>O(n + m)</td>
                    <td>O(n)</td>
                    <td>O(1)</td>
                  </tr>
                  <tr>
                    <td>Sweep-and-prune (quicksort)</td>
                    <td>O(n log n + m)</td>
                    <td>O(n)</td>
                    <td>O(n)</td>
                  </tr>
                  <tr>
                    <td>Sweep-and-prune (insertion)</td>
                    <td>O(n + m)</td>
                    <td>O(n)</td>
                    <td>O(n)</td>
                  </tr>
                  <tr>
                    <td>Sweep-and-prune (final)</td>
                    <td>O(n + m)</td>
                    <td>O(n)</td>
                    <td>O(n&nbsp;+&nbsp;m)</td>
                  </tr>
                </tbody>
              </table>
<p>n = number of balls, m = number of collisions</p>

<p>(todo: Add benchmark here. I’m a little lazy right now. 😺)</p>

<p>The real measure of speed lies in real measurements on real hardware!</p>

<p><img src="https://preview.redd.it/hqs9fcbor3z61.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8aad431aefed7b4d80bc3667ac2472764b7322ac" alt="Stop doing algorithm analysis">
              <a target="_blank" href="https://www.reddit.com/r/ProgrammerHumor/comments/ncb11u/stop_doing_algorithm_analysis">from r/ProgrammerHumor</a>
            </p>

<h2 id="appendix">Appendix</h2>

<p>Things I’ve noted or realised while writing this post:</p>

<ul>
              <li>General algorithm design insights<ul>
                  <li>Pre-sorting a list can replace a bunch of inequality checks, and unlocks:<ul>
                      <li>Some power when linearly scanning over the list</li>
                      <li>Faster range / adjacency checks</li>
                      <li>(unrelated, but good to bring up) Binary search</li>
                    </ul>
                  </li>
                  <li>Different sorting algorithms have situational strengths.</li>
                </ul>
              </li>
              <li>Big O, while useful, can only go so far when analysing performance.</li>
              <li>I might need a frontend framework for my blog now, at least for the interactive demos.<ul>
                  <li>Vanilla JS is starting to get scary with bigger demos like these.</li>
                  <li><code>.mjs</code> is pretty good though.</li>
                </ul>
              </li>
            </ul>

<p>Bonus demo, 25 balls! It’s a ball party ⚽⚾🏀🏐</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap-2d' strategy</pre>
]]></description>
            <link>https://leanrada.com/notes/sweep-and-prune-2?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/sweep-and-prune-2?ref=rss</guid>
            <pubDate>Sun, 06 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Sort, sweep, and prune: Part 2]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">original post on leanrada.com</a>.</em></p>

<p>In the <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss">first part</a>, we figured that sorting lets us exploit the transitive property of inequality to optimise the number of pairwise tests.</p>

<p>We ended up with - let’s call it a <strong>“simplified version”</strong>, of the full sweep-and-prune algorithm.</p>

<p>This part explores the more sophisticated versions of sweep-and-prune.</p>

<img srcset="/notes/sweep-and-prune-2/sophisticated_250.generated.png 250w" sizes=" 250px" alt="Classy rageface" src="https://leanrada.com/notes/sweep-and-prune-2/sophisticated.png?ref=rss" spec="250" loading="lazy" width="100%" height="">
<span>Sophisticated sip and prune.</span>
<h2 id="proper-sweep-and-prune-🧐">Proper sweep-and-prune 🧐</h2>

<p>Let’s see how the original version tackled the problem (Not sure which one’s original, tbh).</p>

<p>First, sorting widthy objects.</p>

<p>To account for the width of objects while keeping the benefits of unambiguous sort order, we track the left and the right edges of each object as two separate points.</p>

<p>This is done by maintaining a separate <strong>array of edge points</strong> corresponding to the objects’ left &amp; right edges.</p>

<p>See how it works by playing with this <span>draggable</span> demo. The left and right edges of each ball are visualised. These edge points are stored in a sorted array shown below the box.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive diagram showing a specific mechanism</pre>

              Sorted array of edges:
              
<p>Of course, we need to initialise the edge data and continually keep them in sync with the objects. I’ll leave that out as an implementation detail.</p>

<pre><code><span>// todo: extract 2 edges from each object into the array</span>
<span>let</span> <span>edges</span><span>:</span> Array<span>&lt;</span><span>{</span>
  <span>object</span><span>:</span> Object<span>;</span>  <span>// parent object</span>
  <span>x</span><span>:</span> number<span>;</span>       <span>// x-coordinate</span>
  <span>isLeft</span><span>:</span> boolean<span>;</span> <span>// true if left edge. false if right</span>
<span>}</span><span>&gt;</span><span>;</span></code></pre>

<p>This sorted array of edges is all we need to facilitate the reduction of unnecessary pairwise tests.</p>

<h3 id="index-as-position-position-as-index">Index as position, position as index</h3>

<p>Remember the <code>intersects()</code> function? Let’s focus only on the x-axis checks:</p>

<pre><code><span>function</span> <span>intersects</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>return</span> object1<span>.</span>left <span>&lt;</span> object2<span>.</span>right
      <span>&amp;&amp;</span> object1<span>.</span>right <span>&gt;</span> object2<span>.</span>left
      <span>/* ... */</span><span>;</span>
<span>}</span></code></pre>

<p>We can replace these x-coordinate comparisons with a new approach based on array indices. Since we have a sorted array of every object’s left and right points, finding x-overlaps can be done via index-based searches rather than global pairwise testing.</p>

<p>Take one ball for example. Get the indices of its left and right points, and you can simply run in between those two points in the array to find all x-overlapping objects! This is a very fast linear operation.</p>

<p>Here’s a viz. Try <span>dragging</span> the <span>highlighted ball</span> below and observe the edges enclosed visually and in the sorted array:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive diagram showing a specific mechanism</pre>

              Sorted array of edges:
              
<p>The above is a simple 1-to-n overlap detection (which is flawed, btw). For n-to-n overlap detection, turns out there is a neat way to find all overlapping pairs in a single pass!</p>

<h2 id="chapter-2-sweeping">Chapter 2. Sweeping</h2>

<p>To generalise the above to an n-interval overlap scan, imagine a vertical line sweeping across the whole space from left to right. The sweep line keeps track of the objects it is currently touching.</p>

<p>Let’s see what that looks like without collision:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

                Objects touching the line are lit up in <span>pink</span>.
              
<p>As for the implementation, the line is merely a metaphor. It’s just a visualisation of an iteration through the sorted list of edges.</p>

<p>To keep track of objects touching the line, we maintain a set called <span><code>touching</code></span> in code.</p>

<p>Whenever the line runs into an object (a left edge), the object is added to the set. Likewise, whenever it exits an object (right edge), the object is removed from the set.</p>

<pre><code><span>sort</span><span>(</span>edges<span>)</span><span>;</span>

<span>const</span> touching <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>
<span>for</span> <span>(</span><span>const</span> edge <span>of</span> edges<span>)</span> <span>{</span>
  <span>if</span> <span>(</span>edge<span>.</span>isLeft<span>)</span> <span>{</span>
    <span>// entering an object</span>
    touching<span>.</span><span>add</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// exiting an object</span>
    touching<span>.</span><span>delete</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Once we have the sweep working, detecting overlaps is easy…</p>

<p>👉 Whenever the sweep line enters a new object (a left edge), in addition to inserting it to <code>touching</code>, we can mark it as overlapping with the rest of the objects in <code>touching</code>.</p>

<p>Watch closely whenever the line enters a ball while the line is <code>touching</code> other balls. Detected overlaps are highlighted:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

                X-overlapping pairs are highlighted <span aria-label="a connecting green line"></span> as the line sweeps.
              
<p>Here’s the updated code for detecting and reporting overlaps:</p>

<pre><code><span><span> </span> <span>sort</span><span>(</span>edges<span>)</span><span>;</span>
<span> </span> 
<span> </span> <span>const</span> touching <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>
<span> </span> <span>for</span> <span>(</span><span>const</span> edge <span>of</span> edges<span>)</span> <span>{</span>
<span> </span>   <span>if</span> <span>(</span>edge<span>.</span>isLeft<span>)</span> <span>{</span>
<span> </span>     <span>// entering an object</span>
</span><span><span>+</span>     
<span>+</span>     <span>// the new object is overlapping with the existing ones</span>
<span>+</span>     <span>for</span> <span>(</span><span>const</span> other <span>of</span> touching<span>)</span> <span>{</span>
<span>+</span>       <span>onOverlapX</span><span>(</span>other<span>,</span> edge<span>.</span>object<span>)</span><span>;</span>
<span>+</span>     <span>}</span>
<span>+</span>     
</span><span><span> </span>     touching<span>.</span><span>add</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
<span> </span>   <span>}</span> <span>else</span> <span>{</span>
<span> </span>     <span>// exiting an object</span>
<span> </span>     touching<span>.</span><span>delete</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
<span> </span>   <span>}</span>
<span> </span> <span>}</span></span></code></pre>

<h2 id="chapter-3-pruning">Chapter 3. Pruning</h2>

<p><code>onOverlapX()</code> is called whenever two balls are overlapping in the x dimension. What about the other dimension, <em>y</em>? What if we’re working with 3D, how about <em>z</em>?</p>

<p>Don’t worry; the sweep is just a broad-phase test, a way to <em>prune</em> candidate pairs in bulk. There will be a narrow-phase test to determine exactly the intersections in each of the remaining pairs.</p>

<p><code>onOverlapX()</code> can be hooked up to an exact intersection test like the full <code>intersects()</code> function earlier. Or, since we already know that the argument pair overlaps in <em>x</em>, we can just check for <em>y</em>.</p>

<pre><code><span>onOverlapX</span> <span>=</span> <span>function</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>// just check for y</span>
  <span>if</span> <span>(</span>object1<span>.</span>top <span>&lt;</span> object2<span>.</span>bottom
   <span>&amp;&amp;</span> object1<span>.</span>bottom <span>&gt;</span> object2<span>.</span>top<span>)</span> <span>{</span>
    <span>collide</span><span>(</span>object1<span>,</span> object2<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>

<p>While the above formula works for most games, a more precise and time-consuming check could be done at this level since most candidates have already been pruned. Our ball example would work better with the following circle intersection test using the <a target="_blank" href="https://en.wikipedia.org/wiki/Euclidean_distance">Euclidean distance formula</a>:</p>

<pre><code><span>onOverlapX</span> <span>=</span> <span>function</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>// compute circle-to-circle intersection</span>
  <span>const</span> distance <span>=</span> <span>sqrt</span><span>(</span>
      <span>(</span>object1<span>.</span>x <span>-</span> object2<span>.</span>x<span>)</span> <span>**</span> <span>2</span>
    <span>+</span> <span>(</span>object1<span>.</span>y <span>-</span> object2<span>.</span>y<span>)</span> <span>**</span> <span>2</span>
  <span>)</span><span>;</span>
  <span>if</span> <span>(</span>distance <span>&lt;</span> object1<span>.</span>radius <span>+</span> object2<span>.</span>radius<span>)</span> <span>{</span>
    <span>bounce</span><span>(</span>object1<span>,</span> object2<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Finally, the demo:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

                Ball sim using sweep-and-prune. <code>onOverlapX()</code> calls highlighted <span aria-label="a connecting green line"></span>.
              
<p>Notice that it behaves very similarly to the simplified version. It limits tests to x-overlapping pairs.</p>

<p><span>The sweep-and-prune algorithm is also known as sort-and-sweep.</span></p>

<h3 id="note-for-higher-dimensions">Note for higher dimensions</h3>

<p>There is a variant which performs the <strong>sweep for each axis</strong>, not just <em>x</em>. For example in 3D, it maintains three <em>separate</em> sorted lists of edges for x, y, and z. Indeed, this is how the full sweep-and-prune implementation works as described in the <a target="_blank" href="https://ecommons.cornell.edu/handle/1813/7115">original paper by D. Baraff</a>. Object pairs are flagged for overlaps separately per dimension. Pairs flagged in all dimensions would be considered intersecting.</p>

<p>This is the advantage the full sweep-and-prune has over the simplified “sorted pairwise” version. It can prune in multiple dimensions!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap-2d' strategy</pre>

                2D sweep-and-prune. Only pairs with overlapping <a target="_blank" href="https://en.wikipedia.org/wiki/Bounding_volume#:~:text=axis%2Daligned%20bounding%20box">AABBs</a> are tested <span aria-label="a connecting green line"></span>.
              
<h2 id="performance-of-sweep-and-prune">Performance of sweep-and-prune</h2>

<p><a id="comparisons"></a>Here’s a side-by-side comparison of the strategies we’ve covered so far! Observe the amount of intersection checks required per frame. 🔍</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>
Global pairwise
<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>
1D sweep and prune
<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap-2d' strategy</pre>
2D sweep and prune
<p>Let’s analyse the time complexity of 1D sweep-and-prune. 👓</p>

<p>The sort step, again, is <em>O(n log n)</em>.</p>

<p>The sweep, which is a linear pass with an inner loop for overlaps, should be <em>O(n&nbsp;+&nbsp;m)</em> in the average case. Again, <em>m</em> is the number of overlaps.</p>

<pre><code><span>function</span> <span>sweepAndPrune</span><span>(</span><span>edges</span><span>)</span> <span>{</span>
  <span>// O(n log n)</span>
  <span>sort</span><span>(</span>edges<span>)</span><span>;</span>

  <span>const</span> touching <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>

  <span>// O(n + m)</span>
  <span>for</span> <span>(</span><span>const</span> edge <span>of</span> edges<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>edge<span>.</span>isLeft<span>)</span> <span>{</span>
      <span>// O(1) at best; O(m/n) on average; O(n) at worst</span>
      <span>for</span> <span>(</span><span>const</span> other <span>of</span> touching<span>)</span> <span>{</span>
        <span>onOverlapX</span><span>(</span>other<span>,</span> edge<span>.</span>object<span>)</span><span>;</span>
      <span>}</span>
      touching<span>.</span><span>add</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span> 
    <span>}</span> <span>else</span> <span>{</span>
      touching<span>.</span><span>delete</span><span>(</span>edge<span>.</span>object<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>So this sweep-and-prune is <em><strong>O(n log n + m)</strong></em>.</p>

<p>That’s great, but it’s the same as simplified sweep-and-prune but with more code and more state to keep tabs on. <em>Can we improve it further?</em></p>

<h2 id="small-detail-big-improvement">Small detail, big improvement</h2>

<p>Again, let’s ask the question: Where is redundant work being done here?</p>

<p>Let’s look at the sort step, which is the bottleneck of the algorithm according to the analysis.</p>

<p>The following is a visualisation of the sorting of the edges array, using an optimised <a target="_blank" href="https://en.wikipedia.org/wiki/Quicksort">quicksort</a> (n&nbsp;log&nbsp;n):</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-quicksort' strategy</pre>

                Sort <span>comparisons</span> and <span>swaps</span> are highlighted. The fixed lines at the top are edge array positions, connected to actual ball edge x positions below. Line crossings signal incorrect order.
              
<p>You can see that most of the time, the sort does nothing at all! The list is almost always <strong>already sorted from the previous frame</strong>.</p>

<p>Even when it becomes unsorted, it usually just takes a couple of swaps to be sorted again. There won’t be more than a few object boundaries changing places in one time step.</p>

<p>Fortunately, the subject of sorting algorithms is well-researched. We’re dealing with the special quality of being <em>nearly-sorted</em>. And one great choice for sorting nearly-sorted lists is <a target="_blank" href="https://en.wikipedia.org/wiki/Insertion_sort"><strong>insertion sort</strong></a>!</p>

<pre><code><span>function</span> <span>insertionSort</span><span>(</span><span>edges</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> edges<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span> j <span>&gt;=</span> <span>0</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>edges<span>[</span>j<span>]</span><span>.</span>x <span>&lt;</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>.</span>x<span>)</span> <span>break</span><span>;</span>
      <span>[</span>edges<span>[</span>j<span>]</span><span>,</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>]</span> <span>=</span> <span>[</span>edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> edges<span>[</span>j<span>]</span><span>]</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Insertion sort has a running time of <em>O(n)</em> at best when the list is already sorted or nearly-sorted, and <em>O(n<sup>2</sup>)</em> at worst when the list is in reverse. We can argue that the average case is <em><strong>O(n)</strong></em>, since the list is almost always sorted due to the previous frame’s sort.</p>

<p>Here’s insertion sort in action:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-insertionsort' strategy</pre>

                Sort <span>comparisons</span> and <span>swaps</span> are highlighted.
              
<p>Look at it go!</p>

<p>By switching to insertion sort, we’ve reduced the overall average running time of sweep-and-prune to <em><strong>O(n&nbsp;+&nbsp;m)</strong></em>! Awesome!</p>
<span>
              <b>Caveat:</b> It’s important to consider the primary axis of sweep-and-prune due to the sweeps plus the nature of insertion sort. It should be the axis where objects are most widely distributed to minimize swaps and overlaps.
            </span>
<p>Of course, don’t forget about our simplified sweep-and-prune from the first part. Since it has a sort step as well, we can make it insertion sort too. So it can also be <em>O(n&nbsp;+&nbsp;m)</em>! Can we ever top that?</p>

<h2 id="sweeps-and-swaps">Sweeps and swaps</h2>

<p>Well, there is yet another way to optimise this algorithm! Hold on to your balloons, it’s about to get quite dense. 🪨</p>

<p>Look at the insertion sort example above. You can observe that <span>swaps</span> happen when and only <strong>when an edge point passes through another edge point</strong>.</p>

<p>The event where an edge point passes another can be classified into four cases:</p>
<table>
                <thead>
                  <tr>
                    <th>Case</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code>)↔(</code></td>
                    <td>R edge from the west swaps with L edge from the east.</td>
                  </tr>
                  <tr>
                    <td><code>(↔)</code></td>
                    <td>L edge from the west swaps with R edge from the east.</td>
                  </tr>
                  <tr>
                    <td><code>(↔(</code></td>
                    <td>L edges swap.</td>
                  </tr>
                  <tr>
                    <td><code>)↔)</code></td>
                    <td>R edges swap.</td>
                  </tr>
                </tbody>
              </table>
<p>Each swap scenario can mean something significant. Let’s look more closely into each case. </p>

<h3 id="case-↔-entering">case )↔(. “Entering”</h3>

<video muted="" autoplay="" loop="" aria-label="Animation of a R edge swapping with a L edge">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-rl.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-rl.mp4?ref=rss">Animation of a R edge swapping with a L edge</a>
              </video>

<p>When a right edge from the west swaps with a left edge from the east, we can infer that the corresponding balls are <strong>initiating an overlap</strong>.</p>

<h3 id="case-↔-exiting">case (↔). “Exiting”</h3>

<video muted="" autoplay="" loop="" aria-label="Animation of a L edge swapping with a R edge">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-lr.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-lr.mp4?ref=rss">Animation of a L edge swapping with a R edge</a>
              </video>

<p>Conversely, when a left edge from the west swaps with a right edge from the east, the corresponding balls <strong>cease to overlap</strong>.</p>

<h3 id="cases-↔-and-↔">cases (↔( and )↔)</h3>

<video muted="" autoplay="" loop="" aria-label="Animation of a L edge swapping with a L edge">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-ll.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-ll.mp4?ref=rss">Animation of a L edge swapping with a L edge</a>
              </video>

<p>Edges of the same polarity can swap without affecting the overlappedness of their corresponding balls. We can ignore these ones.</p>

<h2 id="swaps-and-sweeps">Swaps and sweeps</h2>

<p>Based on these swap events we can reframe the mechanics of sweep-and-prune in a new perspective, a bottom-up way centred around the swaps.</p>

<p>A fun way to think about it is to pretend that a right edge is equivalent to a <em>localised</em> sweep line. In that sense, the right edge <em>is</em> the line sweeping over these other left edges.</p>

<video muted="" autoplay="" loop="" aria-label="Animation a line sweep vs animation of an edge swap">
                <source src="https://leanrada.com/notes/sweep-and-prune-2/swap-as-sweep.mp4?ref=rss">
                <a href="https://leanrada.com/notes/sweep-and-prune-2/swap-as-sweep.mp4?ref=rss">Animation a line sweep vs animation of an edge swap</a>
              </video>
<span>An edge can be thought of as a local sweep line.</span>
<p>Just as in a global sweep, passing over left edges will mark the corresponding balls as “touching”; in right-edge-as-a-local-sweep version, <em>swapping</em> left edges will mark its ball as overlapping with the right edge’s ball.</p>

<p>In the global sweep, there is a global <code>touching</code> set keeping track of which balls are in contact with the sweep line. In local swaps, we keep track of overlaps <em>per ball</em>. (More precisely, per pair.)</p>

<p>Lastly, in the global sweep, a right edge means the end of contact with a ball. In a local swap, a left edge passing over a right edge means the same thing. The corresponding balls are unmarked as overlapping.</p>

<p>Essentially, instead of a global sweep line, small local “sweeps” happen around each ball. Swaps become mini-sweeps.</p>

<p>Thus we arrive at the one-dimensional sweep-and-prune’s final form:</p>

<pre><code><span>function</span> <span>init</span><span>(</span><span>)</span> <span>{</span>
  overlapping <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>sweepAndPrune</span><span>(</span><span>edges</span><span>)</span> <span>{</span>
  <span>// Insertion sort</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> edges<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span> j <span>&gt;=</span> <span>0</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>edges<span>[</span>j<span>]</span><span>.</span>x <span>&lt;</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>.</span>x<span>)</span> <span>break</span><span>;</span>

      <span>// Swap</span>
      <span>[</span>edges<span>[</span>j<span>]</span><span>,</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>]</span> <span>=</span> <span>[</span>edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> edges<span>[</span>j<span>]</span><span>]</span><span>;</span>

      <span>// --- Code up until this point is plain insertion sort ---</span>

      <span>// These two edges have just swapped places, process it...</span>
      <span>const</span> edge1 <span>=</span> edges<span>[</span>j<span>]</span><span>;</span>
      <span>const</span> edge2 <span>=</span> edges<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>

      <span>if</span> <span>(</span>edge1<span>.</span>isLeft <span>&amp;&amp;</span> <span>!</span>edge2<span>.</span>isLeft<span>)</span> <span>{</span> <span>// case R-L → L-R</span>
        <span>// Mark as overlapping</span>
        overlapping<span>.</span><span>set</span><span>(</span>
          <span>key</span><span>(</span>edge1<span>,</span> edge2<span>)</span><span>,</span>
          <span>[</span>edge1<span>.</span>ball<span>,</span> edge2<span>.</span>ball<span>]</span>
        <span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>!</span>edge1<span>.</span>isLeft <span>&amp;&amp;</span> edge2<span>.</span>isLeft<span>)</span> <span>{</span> <span>// case L-R → R-L</span>
        <span>// Unmark as overlapping</span>
        overlapping<span>.</span><span>delete</span><span>(</span><span>key</span><span>(</span>edge1<span>,</span> edge2<span>)</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> overlapping<span>.</span><span>values</span><span>(</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>It’s essentially insertion sort hooked up to track overlaps.</p>

<p>Let’s see it in action:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap' strategy</pre>

<p>While it behaves the same and has the same time complexity as the preceding variants, I’m guessing it’s practically much more efficient in terms of processing speed. In video games where every frame has a processing budget, the actual speed matters, not just the scalability. As always, benchmarking will determine the real practical measurement of speed. (Disclaimer: I haven’t done any benchmarks!)</p>

<h2 id="quick-comparisons">Quick comparisons</h2>
<table>
                <thead>
                  <tr>
                    <th>Algorithm</th>
                    <th>Average time</th>
                    <th>Best time</th>
                    <th>Space</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Global pairwise</td>
                    <td>O(n<sup>2</sup>)</td>
                    <td>O(n<sup>2</sup>)</td>
                    <td>O(1)</td>
                  </tr>
                  <tr>
                    <td>Sorted pairwise (quicksort)</td>
                    <td>O(n log n + m)</td>
                    <td>O(n log n)</td>
                    <td>O(1)</td>
                  </tr>
                  <tr>
                    <td>Sorted pairwise (insertion)</td>
                    <td>O(n + m)</td>
                    <td>O(n)</td>
                    <td>O(1)</td>
                  </tr>
                  <tr>
                    <td>Sweep-and-prune (quicksort)</td>
                    <td>O(n log n + m)</td>
                    <td>O(n)</td>
                    <td>O(n)</td>
                  </tr>
                  <tr>
                    <td>Sweep-and-prune (insertion)</td>
                    <td>O(n + m)</td>
                    <td>O(n)</td>
                    <td>O(n)</td>
                  </tr>
                  <tr>
                    <td>Sweep-and-prune (final)</td>
                    <td>O(n + m)</td>
                    <td>O(n)</td>
                    <td>O(n&nbsp;+&nbsp;m)</td>
                  </tr>
                </tbody>
              </table>
<p>n = number of balls, m = number of collisions</p>

<p>(todo: Add benchmark here. I’m a little lazy right now. 😺)</p>

<p>The real measure of speed lies in real measurements on real hardware!</p>

<p><img src="https://preview.redd.it/hqs9fcbor3z61.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8aad431aefed7b4d80bc3667ac2472764b7322ac" alt="Stop doing algorithm analysis">
              <a target="_blank" href="https://www.reddit.com/r/ProgrammerHumor/comments/ncb11u/stop_doing_algorithm_analysis">from r/ProgrammerHumor</a>
            </p>

<h2 id="appendix">Appendix</h2>

<p>Things I’ve noted or realised while writing this post:</p>

<ul>
              <li>General algorithm design insights<ul>
                  <li>Pre-sorting a list can replace a bunch of inequality checks, and unlocks:<ul>
                      <li>Some power when linearly scanning over the list</li>
                      <li>Faster range / adjacency checks</li>
                      <li>(unrelated, but good to bring up) Binary search</li>
                    </ul>
                  </li>
                  <li>Different sorting algorithms have situational strengths.</li>
                </ul>
              </li>
              <li>Big O, while useful, can only go so far when analysing performance.</li>
              <li>I might need a frontend framework for my blog now, at least for the interactive demos.<ul>
                  <li>Vanilla JS is starting to get scary with bigger demos like these.</li>
                  <li><code>.mjs</code> is pretty good though.</li>
                </ul>
              </li>
            </ul>

<p>Bonus demo, 25 balls! It’s a ball party ⚽⚾🏀🏐</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-swap-2d' strategy</pre>
]]></description>
            <link>https://leanrada.com/notes/sweep-and-prune-2?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/sweep-and-prune-2?ref=rss</guid>
            <pubDate>Sun, 06 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Sort, sweep, and prune: Collision detection algorithms]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Sweep-and-prune is my go-to algorithm when I want to quickly implement collision detection for a game. I think it’s an awesome and elegant algorithm, so I wrote a post about it.</p>

<p>This post is lengthy with many examples and explanations, thus split into two parts. You can jump to specific bits using this special springboard:</p>

<ul>
              <li><strong>Part 1:</strong> <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Simplified version</a>
                <ul>
                  <li>🔍 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune/#comparisons?ref=rss">Visual comparison</a></li>
                  <li>📝 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune/#code1?ref=rss">Code</a></li>
                </ul>
              </li>
              <li><strong>Part 2:</strong> <a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Sophisticated versions</a>
                <ul>
                  <li>🔍 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2/#comparisons?ref=rss">Visual comparison</a></li>
                  <li>📝 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2/#final-code?ref=rss">Final code</a></li>
                </ul>
              </li>
            </ul>

<p>As for the rest of the post, I try to paint a picture of what I think are first principles and show it with <strong>interactive demos</strong>! Let’s go!</p>
<hr>
<h2 id="collision-detection">Collision detection</h2>

<p>As you may know, the problem of collision detection is pretty common in video game programming. It’s a prerequisite to the implementation of certain game mechanics or simulations.</p>

<img alt="video of mario with goombas bumping into each other" src="https://leanrada.com/notes/sweep-and-prune/mario.gif?ref=rss" loading="lazy" width="100%" height="">
<span>Goombas colliding</span>
<p>Some of these mechanics include: preventing characters from passing through each other, <a target="_blank" href="https://youtu.be/Ky69PjyHCqg">goombas</a> turning around when bumping into another, big cells eating smaller cells in <a target="_blank" href="https://agar.io/">agar.io</a>, or just about any game physics. All of these need some kind of collision detection.</p>

<img alt="video of agar.io with cells eating smaller cells" src="https://leanrada.com/notes/sweep-and-prune/agario.gif?ref=rss" loading="lazy" width="100%" height="">
<span>Cells consuming smaller cells on contact</span>
<p>Here I’ll cover several related approaches, starting with the simplest and building up to the <a target="_blank" href="https://en.wikipedia.org/wiki/Sweep_and_prune"><strong>sweep-and-prune</strong></a> algorithm. I won’t cover other approaches, such as space partitioning or spatial tree subdivision.</p>

<p>Balls.</p>

<p>I’ll use this <strong>rigid-body ball simulation</strong> as a recurring example to demonstrate the algorithms throughout the post:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

<p>Alright, let’s dive in! How do we detect these collisions?</p>

<h2 id="naive-approach-🐥">Naive approach 🐥</h2>

<p>The straightforward solution is to test every potential pair of objects for collision. That is, <em>check every ball against every other ball</em>.</p>

<pre><code><span>// for each ball</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> balls<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>const</span> ball1 <span>=</span> balls<span>[</span>i<span>]</span><span>;</span>
  <span>// check each of the other balls</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> balls<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>const</span> ball2 <span>=</span> balls<span>[</span>j<span>]</span><span>;</span>
    <span>// check for collision</span>
    <span>if</span> <span>(</span><span>intersects</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>)</span> <span>{</span>
      <span>bounce</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Note in the above code that the inner loop starts at <code>i + 1</code> to prevent duplicate pairs from being counted (A-B vs B-A). Other than that, it’s a pretty simple solution.</p>

<p>These checks are done on every time step, ensuring that balls will bounce exactly when they collide.</p>

<p>Here’s a slowed-down, highlighted simulation, showing pairs being tested for intersection per time step:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>

                Pairs are highlighted <span aria-label="a connecting green line"></span> when being tested via <code>intersects()</code>.
              
<p>And it works. But if we had more than just a handful of balls we would start seeing performance issues.</p>

<h2 id="performance-or-lack-thereof">Performance, or lack thereof</h2>

<p>This naive algorithm runs in <em><strong>O(n<sup>2</sup>)</strong></em> time in <a target="_blank" href="https://en.wikipedia.org/wiki/Big_O_notation">Big O terms</a>. That is, for an input of <em>n</em> balls, the algorithm’s running time grows proportionally to the <em>square</em> of the input <em>n</em>. That’s a lot! 📈</p>

<p>This is because for <em>n</em> balls, there are around <em>(n&nbsp;*&nbsp;(n-1))/2</em> pairs to test, or <em>0.5n<sup>2</sup>&nbsp;-&nbsp;0.5n</em>. For example, if n = 5 there would be a total of 10 pairs. For n = 10, there would be 45 pairs. For n = 15, 105 pairs (!). And so on… Using Big O notation, we can simplify this information into a compact expression <em>“O(n<sup>2</sup>)”</em></p>

<p>To (painfully) demonstrate how the performance scales badly for bigger inputs, here’s a simulation with n&nbsp;=&nbsp;20:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>

                20 balls = 190 pairs to test
              
<p>That’s a lot of tests per frame! Clearly, the naive solution does not scale well for large numbers of objects.</p>

<p>How can we improve this solution?</p>
<span>
              <p>The worst case running time for <em>any</em> collision detection algorithm is always <em>O(n<sup>2</sup>)</em>. That’s when all objects intersect simultaneously and you have no choice but to process each of the n<sup>2</sup> collisions.</p>
              <p>Thus, it’s more practical to compare the average and best cases.</p>
              <p>Having said that, the naive algorithm is still <em>Θ(n<sup>2</sup>)</em> for <em>any</em> case, no matter the number of actual collisions. A lot of room for improvement!</p>
            </span>
<h2 id="prologue-improving-the-solution">Prologue: Improving the solution</h2>

<p>Usually when optimising algorithms, you wanna find <strong>redundant or unnecessary work</strong>. Then find a way to consolidate that redundancy. (That sounded corporate-ish.)</p>

<p>A good place to start would be the <code>intersects()</code> function since it is called for every candidate pair. If we take the <a target="_blank" href="https://gdbooks.gitbooks.io/3dcollisions/content/Chapter2/static_aabb_aabb.html">typical object intersection test</a> to be its implementation, we get a bunch of these <strong>inequality checks</strong>:</p>

<pre><code><span>function</span> <span>intersects</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>// compare objects' bounds to see if they overlap</span>
  <span>return</span> object1<span>.</span>left <span>&lt;</span> object2<span>.</span>right
      <span>&amp;&amp;</span> object1<span>.</span>right <span>&gt;</span> object2<span>.</span>left
      <span>&amp;&amp;</span> object1<span>.</span>top <span>&lt;</span> object2<span>.</span>bottom
      <span>&amp;&amp;</span> object1<span>.</span>bottom <span>&gt;</span> object2<span>.</span>top<span>;</span>
<span>}</span></code></pre>

<p>In the above code, the <code>intersects()</code> function checks if two objects intersect by comparing their opposing bounds for each direction. (Refer to <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection#aabb_vs._aabb">this MDN article</a> for a better explanation.)</p>

<p>We can break the test down to its constituent checks:</p>

<ol>
              <li><code>object1.left &lt; object2.right</code></li>
              <li><code>object1.right &gt; object2.left</code></li>
              <li><code>object1.top &lt; object2.bottom</code></li>
              <li><code>object1.bottom &gt; object2.top</code></li>
            </ol>

<p>Each check is solely concerned with one particular axis in a specific direction.</p>

<p>Here’s the key thing: Due to the <code>&amp;&amp;</code> operator’s <a target="_blank" href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">short-circuit evaluation</a>, if any one of these checks turns out to be false, then the overall test will immediately evaluate to false.</p>

<p>Our goal then is to generalise the case where at least <em>one</em> of these checks is false across many tests as possible.</p>

<p><span>It’s the same idea as the <a target="_blank" href="https://personal.math.vt.edu/mrlugo/sat.html">separating axis theorem</a>, which implies that two objects can’t be colliding if there’s at least one axis where their shadows don’t overlap.</span></p>

<p>Let’s say we focus only on the second check - <code>object1.right &gt; object2.left</code>. Don’t worry about the rest of the checks. As hinted above, optimising in just one axis can still make a big difference later, so we’ll focus on this single check for now.</p>

<img srcset="/notes/sweep-and-prune/surprise-tool_200.generated.jpg 200w" sizes=" 200px" alt="Still of a cartoon mouse saying, 'that’s a surprise tool that can help us later'" src="https://leanrada.com/notes/sweep-and-prune/surprise-tool.jpg?ref=rss" spec="200" loading="lazy" width="100%" height="">

<p>Let’s look at it in the context of multiple objects. Consider three objects - A, B, and C - in this horizontal configuration:</p>

<img srcset="/notes/sweep-and-prune/abc_527.generated.png 527w,/notes/sweep-and-prune/abc_664.generated.png 664w" sizes="not (min-width:664px) 527px, 664px" alt="Three objects, from left to right: A, B, and C" src="https://leanrada.com/notes/sweep-and-prune/abc.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>There are three potential pairs to be checked here: A-B, B-C, and A-C. Remember, we’re trying to find redundant work. Pretend we’re running all the pairs through the check, like so:</p>

<pre><code><span>A</span><span>.</span>right <span>&gt;</span> <span>B</span><span>.</span>left <span>// returns false</span>
<span>B</span><span>.</span>right <span>&gt;</span> <span>C</span><span>.</span>left <span>// returns false</span>
<span>A</span><span>.</span>right <span>&gt;</span> <span>C</span><span>.</span>left <span>// returns false</span></code></pre>

<p>See any redundant work? Maybe abstractify it a little…</p>

<pre><code><span>A</span> <span>&gt;</span> <span>B</span> <span>// returns false</span>
<span>B</span> <span>&gt;</span> <span>C</span> <span>// returns false</span>
<span>A</span> <span>&gt;</span> <span>C</span> <span>// returns false</span></code></pre>

<p>Voilà. Due to the <a target="_blank" href="https://www.mathwords.com/t/transitive_property_inequalities.htm"><strong>transitive property of inequality</strong></a>, realise that we don’t need to run the <strong>third test</strong>! <em>If we know that <code>A&nbsp;&gt;&nbsp;B</code> and <code>B&nbsp;&gt;&nbsp;C</code> are both <code>false</code>, then we would know that <code>A&nbsp;&gt;&nbsp;C</code> is <code>false</code> as well.</em></p>
<blockquote>
              <p>“If <i>a ≤ b</i> and <i>b ≤ c</i>, then <i>a ≤ c</i>.”
                <cite>the transitive property of inequality</cite>
              </p>
            </blockquote>
<p>So in this example, we don’t really need to run <code>intersects(A, C)</code>.</p>

<pre><code><span>// 1. Test A-B</span>
<span>intersects</span><span>(</span><span>A</span><span>,</span> <span>B</span><span>)</span> <span>// A.right &gt; B.left evals to false.</span>

<span>// 2. Test B-C</span>
<span>intersects</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>)</span> <span>// B.right &gt; C.left evals to false.</span>

<span>// 3. Infer that A.right &gt; C.left is false.</span>
<span>// ∴ Therefore I don’t need to call intersects(A, C)</span>
<span>// to know that it will return false.</span></code></pre>

<p>We’ve skipped one <code>intersects()</code> call for free! ✨</p>
<span>
              I’m handwaving the fact that <code>P.left ≤ P.right</code> is implied for any object P. Nevertheless, working those details out would just mean more transitivity.
            </span>
<p>You might be wondering how this contrived example could apply to general n-body collision detection. A smart reader such as you might also have realised that this skip only works if A, B, and C are in a <strong>particular order</strong>.</p>

<p>What particular order? Try <span>dragging</span> the balls below to see when the optimisation applies and when it does not:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive diagram showing a specific mechanism</pre>

<pre><code><span>// LIVE OUTPUT:</span>
<span>intersects</span><span>(</span><span>A</span><span>,</span> <span>B</span><span>)</span> <span>// A.right &gt; B.left evals to <span>false</span></span>
<span>intersects</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>)</span> <span>// B.right &gt; C.left evals to <span>false</span></span>
<span><span>intersects</span><span>(</span><span>A</span><span>,</span> <span>C</span><span>)</span> <span>// Can’t skip, returns <span>false</span></span></span><span>// Deduce that intersects(A, C) will be <span>false</span></span></code></pre>

<p><span><strong>Tip:</strong> Drag the balls so that they’re horizontally spaced out in this order: A‑B‑C</span></p>

<p>While it’s true that this skip only works when A, B, and C are ordered, remember that these labels are <em>arbitrary</em>! What if we simply decided to always call the leftmost ball A, the middle ball B, and the rightmost C? Then the optimisation would always be applicable! 🌌🧠</p>

<p>But wait… labeling objects according to some logical ordering is essentially ✨<strong>sorting</strong>✨! What if we sorted the list of objects every time? Would the number of skipped tests be worth the cost of sorting?</p>

<h2 id="chapter-1-sorting">Chapter 1. Sorting</h2>

<p>Sorting, inequalities, and optimisation go hand in hand in hand. <em>A sorted list allows us to exploit the transitive property of inequality en masse.</em></p>

<img srcset="/notes/sweep-and-prune/sorted_664.generated.png 664w" sizes=" 664px" alt="a[0] ≤ a[1] ≤ a[2] ≤ ... ≤ a[n-1]" src="https://leanrada.com/notes/sweep-and-prune/sorted.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The inequality relationships of elements in a sorted list.</span>
<p><span>Even if we had to sort the list of objects every frame, the quickest general sorting algorithm runs in <em>O(n log n)</em> time which is certainly lower than <em>O(n<sup>2</sup>)</em>.</span></p>

<p>As shown by the tri-object example above, to achieve the power to skip tests we need to sort the list of objects by x position.</p>

<p>However, objects aren’t zero-width points. They’re <em>widthy</em>, by which I mean having a size thus occupying an interval in the x-axis, also known as “width”. How can one unambiguously sort by x position if objects span intervals in the x-axis?</p>

<h2 id="sort-by-min-x">Sort by min x</h2>

<p>A solution to sorting widthy objects is to sort them by their <strong>minimum x</strong> (their left edge’s x-coordinate). This technique can be applied to improve the naive approach.</p>

<p>It involves minimal modifications to the O(n<sup>2</sup>) solution. But it will result in a good chunk of tests skipped. I’ll explain later.</p>

<p>First, the modified code:</p>

<pre><code><span><span>+</span> <span>// sort by min x</span>
<span>+</span> <span>sortByLeft</span><span>(</span>balls<span>)</span><span>;</span>
<span>+</span> 
</span><span><span> </span> <span>// for each ball</span>
<span> </span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> balls<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
<span> </span>   <span>const</span> ball1 <span>=</span> balls<span>[</span>i<span>]</span><span>;</span>
<span> </span>   <span>// check each of the other balls</span>
<span> </span>   <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> balls<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
<span> </span>     <span>const</span> ball2 <span>=</span> balls<span>[</span>j<span>]</span><span>;</span>
</span><span><span>+</span> 
<span>+</span>     <span>// stop when too far away</span>
<span>+</span>     <span>if</span> <span>(</span>ball2<span>.</span>left <span>&gt;</span> ball1<span>.</span>right<span>)</span> <span>break</span><span>;</span>
<span>+</span> 
</span><span><span> </span>     <span>// check for collision</span>
<span> </span>     <span>if</span> <span>(</span><span>intersects</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>)</span> <span>{</span>
<span> </span>       <span>bounce</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>;</span>
<span> </span>     <span>}</span>
<span> </span>   <span>}</span>
<span> </span> <span>}</span></span></code></pre>

<p>It’s mostly the same as the naive solution, differing only in two extra lines of code.</p>

<p>The first line <code>sortByLeft(balls)</code> simply sorts the list, with ranking based on the balls’ left edge x-coords.</p>

<pre><code><span>function</span> <span>sortByLeft</span><span>(</span><span>balls</span><span>)</span> <span>{</span>
  balls<span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span>b</span><span>)</span> <span>=&gt;</span> a<span>.</span>left <span>-</span> b<span>.</span>left<span>)</span><span>;</span>
<span>}</span></code></pre>

<p>And in the inner loop, there is now this break:</p>

<pre><code><span>if</span> <span>(</span>ball2<span>.</span>left <span>&gt;</span> ball1<span>.</span>right<span>)</span> <span>break</span><span>;</span></code></pre>

<p>Let’s break that down.</p>

<p>First, we know that the list is sorted, so the following statement
              holds true for any positive integer
              <code>c</code>:
            </p>

<p>
              <code>balls[<span>j</span> + <span>c</span>].left <span>&gt;=</span> balls[<span>j</span>].left</code>
            </p>

<p>The break condition, which is derived from the first operand of the intersection test, if true indicates early that the current pair being tested for intersection would fail:</p>

<p>
              <code>balls2.left <span>&gt;</span> ball1.right</code><br>
              or <code>balls[<span>j</span>].left <span>&gt;</span> ball1.right</code>
            </p>

<p>But there are more implications. If it was true, then by combining the above two inequations…</p>

<p>
              <code>balls[<span>j</span> + <span>c</span>].left <span>&gt;=</span> balls[<span>j</span>].left <span>&gt;</span> ball1.right</code>
            </p>

<p>And by transitive property, the following statement would also be true!</p>

<p>
              <code>balls[<span>j</span> + <span>c</span>].left <span>&gt;</span> ball1.right</code>
            </p>

<p>Which means the intersection tests of balls at
              <code>balls[<span>j</span> + <span>c</span>]</code>
              would also fail. We know this without needing to test those balls individually. A range of balls have been eliminated from testing!
            </p>

<p>In conclusion, when the current <em>ball2</em>
              <code>balls[<span>j</span>]</code>
              stops overlapping with the current <em>ball1</em>, then any further <em>ball2</em>s in the iteration
              <code>balls[<span>j</span> + <span>c</span>]</code>
              would be guaranteed to not overlap <em>ball1</em> as well. In other words, we stop the inner loop when it gets too far away.
            </p>

<p>Finally, here’s a demo:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'simple-sap' strategy</pre>

                Pairs highlighted <span aria-label="a connecting green line"></span> when tested by <code>intersects()</code>.
              
<p>Pretty cool, right! It’s much faster now.</p>

<p>Some observations:</p>

<ul>
              <li>Since the list is sorted, the tests are performed from left to right.</li>
              <li>More importantly, it visibly does fewer tests than the naive approach. 📉 This is due the above optimisation which effectively limits pairs to those that overlap in the x-axis!</li>
            </ul>

<p>Let’s analyse the time complexity. 👓</p>

<p>The sort - if we take the "fastest" sorting algorithm, like mergesort or quicksort - would add an <em>O(n log n)</em> term.</p>

<p>The two-level loop, now with an early break, would average out to <em>O(n&nbsp;+&nbsp;m)</em> where <em>m</em> is the total number of x-overlaps. This could degenerate into n<sup>2</sup> but as mentioned above, it’s more useful to look at the average and best cases. At best, the loop would be <em>O(n)</em>, wasting no excess processing when there are no overlaps. On average it’s <em>O(n&nbsp;+&nbsp;m)</em>.</p>

<p><span>The average case refers to a world where objects are mostly evenly distributed and only a couple intersections per object is happening. I think this is a reasonable assumption for a relatively simple video game like a platformer or side-scroller.</span></p>

<p>Here’s the code with running time annotations:</p>

<pre><code><span>// O(n log n)</span>
<span>sortByLeft</span><span>(</span>balls<span>)</span><span>;</span>

<span>// O(n + m)</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> balls<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>const</span> ball1 <span>=</span> balls<span>[</span>i<span>]</span><span>;</span>
  <span>// O(1) at best; O(m/n) on average; O(n) at worst</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> balls<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>const</span> ball2 <span>=</span> balls<span>[</span>j<span>]</span><span>;</span>
    <span>if</span> <span>(</span>ball2<span>.</span>left <span>&gt;</span> ball1<span>.</span>right<span>)</span> <span>break</span><span>;</span>
    <span>if</span> <span>(</span><span>intersects</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>)</span> <span>{</span>
      <span>bounce</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Adding those together we get <em><strong>O(n&nbsp;log&nbsp;n&nbsp;+&nbsp;m)</strong></em>.</p>

<p>This is a super good improvement over the naive approach’s <em>O(n<sup>2</sup>)</em>, because <strong>[1]</strong> <em>n&nbsp;log&nbsp;n</em> is <a target="_blank" href="https://bigocheatsheet.com/">much smaller</a> than <em>n<sup>2</sup></em> and <strong>[2]</strong> it is partially output-based - depending on the number of overlaps, it does not process more than necessary.</p>
<a target="_blank" href="https://www.bigocheatsheet.com">
              <div>
                <img alt="" src="https://www.bigocheatsheet.com/img/big-o-complexity-chart.png" loading="lazy"><span>bigocheatsheet.com</span>
              </div>
            </a>
<p>Furthermore, the choice of sorting algorithm could be improved. We’ll look into that in the next part (somehow better than <em>n&nbsp;log&nbsp;n</em>!).</p>
<span>
              If you got this far trying to find a decent collision detection algorithm, then you can stop reading and take the above design! It’s the perfect balance between programming effort and running time performance. If you are curious how this develops or just want to see more interactive demos, read on to the next part.
            </span>
<h2 id="visual-comparison">Visual comparison</h2>

<p><a id="comparisons"></a>Here’s a side-by-side comparison of the strategies we’ve covered so far! Observe the amount of intersection tests required per frame. 🔍 n = 10</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>
Global pairwise
<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>
Sorted pairwise
<p>(Not shown: the cost of sorting. Let’s just say the intersection test is sufficiently expensive.)</p>

<p>Aaand that concludes the first part. Those two lines of code definitely were the MVPs.</p>

<p>How will it compare to the more advanced versions?</p>

<p><a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Continued in part 2.</a>
            </p>
]]></description>
            <link>https://leanrada.com/notes/sweep-and-prune?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/sweep-and-prune?ref=rss</guid>
            <pubDate>Sat, 05 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Sort, sweep, and prune: Collision detection algorithms]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Sweep-and-prune is my go-to algorithm when I want to quickly implement collision detection for a game. I think it’s an awesome and elegant algorithm, so I wrote a post about it.</p>

<p>This post is lengthy with many examples and explanations, thus split into two parts. You can jump to specific bits using this special springboard:</p>

<ul>
              <li><strong>Part 1:</strong> <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Simplified version</a>
                <ul>
                  <li>🔍 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune/#comparisons?ref=rss">Visual comparison</a></li>
                  <li>📝 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune/#code1?ref=rss">Code</a></li>
                </ul>
              </li>
              <li><strong>Part 2:</strong> <a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Sophisticated versions</a>
                <ul>
                  <li>🔍 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2/#comparisons?ref=rss">Visual comparison</a></li>
                  <li>📝 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2/#final-code?ref=rss">Final code</a></li>
                </ul>
              </li>
            </ul>

<p>As for the rest of the post, I try to paint a picture of what I think are first principles and show it with <strong>interactive demos</strong>! Let’s go!</p>
<hr>
<h2 id="collision-detection">Collision detection</h2>

<p>As you may know, the problem of collision detection is pretty common in video game programming. It’s a prerequisite to the implementation of certain game mechanics or simulations.</p>

<img alt="video of mario with goombas bumping into each other" src="https://leanrada.com/notes/sweep-and-prune/mario.gif?ref=rss" loading="lazy" width="100%" height="">
<span>Goombas colliding</span>
<p>Some of these mechanics include: preventing characters from passing through each other, <a target="_blank" href="https://youtu.be/Ky69PjyHCqg">goombas</a> turning around when bumping into another, big cells eating smaller cells in <a target="_blank" href="https://agar.io/">agar.io</a>, or just about any game physics. All of these need some kind of collision detection.</p>

<img alt="video of agar.io with cells eating smaller cells" src="https://leanrada.com/notes/sweep-and-prune/agario.gif?ref=rss" loading="lazy" width="100%" height="">
<span>Cells consuming smaller cells on contact</span>
<p>Here I’ll cover several related approaches, starting with the simplest and building up to the <a target="_blank" href="https://en.wikipedia.org/wiki/Sweep_and_prune"><strong>sweep-and-prune</strong></a> algorithm. I won’t cover other approaches, such as space partitioning or spatial tree subdivision.</p>

<p>Balls.</p>

<p>I’ll use this <strong>rigid-body ball simulation</strong> as a recurring example to demonstrate the algorithms throughout the post:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>

<p>Alright, let’s dive in! How do we detect these collisions?</p>

<h2 id="naive-approach-🐥">Naive approach 🐥</h2>

<p>The straightforward solution is to test every potential pair of objects for collision. That is, <em>check every ball against every other ball</em>.</p>

<pre><code><span>// for each ball</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> balls<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>const</span> ball1 <span>=</span> balls<span>[</span>i<span>]</span><span>;</span>
  <span>// check each of the other balls</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> balls<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>const</span> ball2 <span>=</span> balls<span>[</span>j<span>]</span><span>;</span>
    <span>// check for collision</span>
    <span>if</span> <span>(</span><span>intersects</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>)</span> <span>{</span>
      <span>bounce</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Note in the above code that the inner loop starts at <code>i + 1</code> to prevent duplicate pairs from being counted (A-B vs B-A). Other than that, it’s a pretty simple solution.</p>

<p>These checks are done on every time step, ensuring that balls will bounce exactly when they collide.</p>

<p>Here’s a slowed-down, highlighted simulation, showing pairs being tested for intersection per time step:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>

                Pairs are highlighted <span aria-label="a connecting green line"></span> when being tested via <code>intersects()</code>.
              
<p>And it works. But if we had more than just a handful of balls we would start seeing performance issues.</p>

<h2 id="performance-or-lack-thereof">Performance, or lack thereof</h2>

<p>This naive algorithm runs in <em><strong>O(n<sup>2</sup>)</strong></em> time in <a target="_blank" href="https://en.wikipedia.org/wiki/Big_O_notation">Big O terms</a>. That is, for an input of <em>n</em> balls, the algorithm’s running time grows proportionally to the <em>square</em> of the input <em>n</em>. That’s a lot! 📈</p>

<p>This is because for <em>n</em> balls, there are around <em>(n&nbsp;*&nbsp;(n-1))/2</em> pairs to test, or <em>0.5n<sup>2</sup>&nbsp;-&nbsp;0.5n</em>. For example, if n = 5 there would be a total of 10 pairs. For n = 10, there would be 45 pairs. For n = 15, 105 pairs (!). And so on… Using Big O notation, we can simplify this information into a compact expression <em>“O(n<sup>2</sup>)”</em></p>

<p>To (painfully) demonstrate how the performance scales badly for bigger inputs, here’s a simulation with n&nbsp;=&nbsp;20:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>

                20 balls = 190 pairs to test
              
<p>That’s a lot of tests per frame! Clearly, the naive solution does not scale well for large numbers of objects.</p>

<p>How can we improve this solution?</p>
<span>
              <p>The worst case running time for <em>any</em> collision detection algorithm is always <em>O(n<sup>2</sup>)</em>. That’s when all objects intersect simultaneously and you have no choice but to process each of the n<sup>2</sup> collisions.</p>
              <p>Thus, it’s more practical to compare the average and best cases.</p>
              <p>Having said that, the naive algorithm is still <em>Θ(n<sup>2</sup>)</em> for <em>any</em> case, no matter the number of actual collisions. A lot of room for improvement!</p>
            </span>
<h2 id="prologue-improving-the-solution">Prologue: Improving the solution</h2>

<p>Usually when optimising algorithms, you wanna find <strong>redundant or unnecessary work</strong>. Then find a way to consolidate that redundancy. (That sounded corporate-ish.)</p>

<p>A good place to start would be the <code>intersects()</code> function since it is called for every candidate pair. If we take the <a target="_blank" href="https://gdbooks.gitbooks.io/3dcollisions/content/Chapter2/static_aabb_aabb.html">typical object intersection test</a> to be its implementation, we get a bunch of these <strong>inequality checks</strong>:</p>

<pre><code><span>function</span> <span>intersects</span><span>(</span><span>object1<span>,</span> object2</span><span>)</span> <span>{</span>
  <span>// compare objects' bounds to see if they overlap</span>
  <span>return</span> object1<span>.</span>left <span>&lt;</span> object2<span>.</span>right
      <span>&amp;&amp;</span> object1<span>.</span>right <span>&gt;</span> object2<span>.</span>left
      <span>&amp;&amp;</span> object1<span>.</span>top <span>&lt;</span> object2<span>.</span>bottom
      <span>&amp;&amp;</span> object1<span>.</span>bottom <span>&gt;</span> object2<span>.</span>top<span>;</span>
<span>}</span></code></pre>

<p>In the above code, the <code>intersects()</code> function checks if two objects intersect by comparing their opposing bounds for each direction. (Refer to <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection#aabb_vs._aabb">this MDN article</a> for a better explanation.)</p>

<p>We can break the test down to its constituent checks:</p>

<ol>
              <li><code>object1.left &lt; object2.right</code></li>
              <li><code>object1.right &gt; object2.left</code></li>
              <li><code>object1.top &lt; object2.bottom</code></li>
              <li><code>object1.bottom &gt; object2.top</code></li>
            </ol>

<p>Each check is solely concerned with one particular axis in a specific direction.</p>

<p>Here’s the key thing: Due to the <code>&amp;&amp;</code> operator’s <a target="_blank" href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">short-circuit evaluation</a>, if any one of these checks turns out to be false, then the overall test will immediately evaluate to false.</p>

<p>Our goal then is to generalise the case where at least <em>one</em> of these checks is false across many tests as possible.</p>

<p><span>It’s the same idea as the <a target="_blank" href="https://personal.math.vt.edu/mrlugo/sat.html">separating axis theorem</a>, which implies that two objects can’t be colliding if there’s at least one axis where their shadows don’t overlap.</span></p>

<p>Let’s say we focus only on the second check - <code>object1.right &gt; object2.left</code>. Don’t worry about the rest of the checks. As hinted above, optimising in just one axis can still make a big difference later, so we’ll focus on this single check for now.</p>

<img srcset="/notes/sweep-and-prune/surprise-tool_200.generated.jpg 200w" sizes=" 200px" alt="Still of a cartoon mouse saying, 'that’s a surprise tool that can help us later'" src="https://leanrada.com/notes/sweep-and-prune/surprise-tool.jpg?ref=rss" spec="200" loading="lazy" width="100%" height="">

<p>Let’s look at it in the context of multiple objects. Consider three objects - A, B, and C - in this horizontal configuration:</p>

<img srcset="/notes/sweep-and-prune/abc_527.generated.png 527w,/notes/sweep-and-prune/abc_664.generated.png 664w" sizes="not (min-width:664px) 527px, 664px" alt="Three objects, from left to right: A, B, and C" src="https://leanrada.com/notes/sweep-and-prune/abc.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>There are three potential pairs to be checked here: A-B, B-C, and A-C. Remember, we’re trying to find redundant work. Pretend we’re running all the pairs through the check, like so:</p>

<pre><code><span>A</span><span>.</span>right <span>&gt;</span> <span>B</span><span>.</span>left <span>// returns false</span>
<span>B</span><span>.</span>right <span>&gt;</span> <span>C</span><span>.</span>left <span>// returns false</span>
<span>A</span><span>.</span>right <span>&gt;</span> <span>C</span><span>.</span>left <span>// returns false</span></code></pre>

<p>See any redundant work? Maybe abstractify it a little…</p>

<pre><code><span>A</span> <span>&gt;</span> <span>B</span> <span>// returns false</span>
<span>B</span> <span>&gt;</span> <span>C</span> <span>// returns false</span>
<span>A</span> <span>&gt;</span> <span>C</span> <span>// returns false</span></code></pre>

<p>Voilà. Due to the <a target="_blank" href="https://www.mathwords.com/t/transitive_property_inequalities.htm"><strong>transitive property of inequality</strong></a>, realise that we don’t need to run the <strong>third test</strong>! <em>If we know that <code>A&nbsp;&gt;&nbsp;B</code> and <code>B&nbsp;&gt;&nbsp;C</code> are both <code>false</code>, then we would know that <code>A&nbsp;&gt;&nbsp;C</code> is <code>false</code> as well.</em></p>
<blockquote>
              <p>“If <i>a ≤ b</i> and <i>b ≤ c</i>, then <i>a ≤ c</i>.”
                <cite>the transitive property of inequality</cite>
              </p>
            </blockquote>
<p>So in this example, we don’t really need to run <code>intersects(A, C)</code>.</p>

<pre><code><span>// 1. Test A-B</span>
<span>intersects</span><span>(</span><span>A</span><span>,</span> <span>B</span><span>)</span> <span>// A.right &gt; B.left evals to false.</span>

<span>// 2. Test B-C</span>
<span>intersects</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>)</span> <span>// B.right &gt; C.left evals to false.</span>

<span>// 3. Infer that A.right &gt; C.left is false.</span>
<span>// ∴ Therefore I don’t need to call intersects(A, C)</span>
<span>// to know that it will return false.</span></code></pre>

<p>We’ve skipped one <code>intersects()</code> call for free! ✨</p>
<span>
              I’m handwaving the fact that <code>P.left ≤ P.right</code> is implied for any object P. Nevertheless, working those details out would just mean more transitivity.
            </span>
<p>You might be wondering how this contrived example could apply to general n-body collision detection. A smart reader such as you might also have realised that this skip only works if A, B, and C are in a <strong>particular order</strong>.</p>

<p>What particular order? Try <span>dragging</span> the balls below to see when the optimisation applies and when it does not:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive diagram showing a specific mechanism</pre>

<pre><code><span>// LIVE OUTPUT:</span>
<span>intersects</span><span>(</span><span>A</span><span>,</span> <span>B</span><span>)</span> <span>// A.right &gt; B.left evals to <span>false</span></span>
<span>intersects</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>)</span> <span>// B.right &gt; C.left evals to <span>false</span></span>
<span><span>intersects</span><span>(</span><span>A</span><span>,</span> <span>C</span><span>)</span> <span>// Can’t skip, returns <span>false</span></span></span><span>// Deduce that intersects(A, C) will be <span>false</span></span></code></pre>

<p><span><strong>Tip:</strong> Drag the balls so that they’re horizontally spaced out in this order: A‑B‑C</span></p>

<p>While it’s true that this skip only works when A, B, and C are ordered, remember that these labels are <em>arbitrary</em>! What if we simply decided to always call the leftmost ball A, the middle ball B, and the rightmost C? Then the optimisation would always be applicable! 🌌🧠</p>

<p>But wait… labeling objects according to some logical ordering is essentially ✨<strong>sorting</strong>✨! What if we sorted the list of objects every time? Would the number of skipped tests be worth the cost of sorting?</p>

<h2 id="chapter-1-sorting">Chapter 1. Sorting</h2>

<p>Sorting, inequalities, and optimisation go hand in hand in hand. <em>A sorted list allows us to exploit the transitive property of inequality en masse.</em></p>

<img srcset="/notes/sweep-and-prune/sorted_664.generated.png 664w" sizes=" 664px" alt="a[0] ≤ a[1] ≤ a[2] ≤ ... ≤ a[n-1]" src="https://leanrada.com/notes/sweep-and-prune/sorted.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The inequality relationships of elements in a sorted list.</span>
<p><span>Even if we had to sort the list of objects every frame, the quickest general sorting algorithm runs in <em>O(n log n)</em> time which is certainly lower than <em>O(n<sup>2</sup>)</em>.</span></p>

<p>As shown by the tri-object example above, to achieve the power to skip tests we need to sort the list of objects by x position.</p>

<p>However, objects aren’t zero-width points. They’re <em>widthy</em>, by which I mean having a size thus occupying an interval in the x-axis, also known as “width”. How can one unambiguously sort by x position if objects span intervals in the x-axis?</p>

<h2 id="sort-by-min-x">Sort by min x</h2>

<p>A solution to sorting widthy objects is to sort them by their <strong>minimum x</strong> (their left edge’s x-coordinate). This technique can be applied to improve the naive approach.</p>

<p>It involves minimal modifications to the O(n<sup>2</sup>) solution. But it will result in a good chunk of tests skipped. I’ll explain later.</p>

<p>First, the modified code:</p>

<pre><code><span><span>+</span> <span>// sort by min x</span>
<span>+</span> <span>sortByLeft</span><span>(</span>balls<span>)</span><span>;</span>
<span>+</span> 
</span><span><span> </span> <span>// for each ball</span>
<span> </span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> balls<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
<span> </span>   <span>const</span> ball1 <span>=</span> balls<span>[</span>i<span>]</span><span>;</span>
<span> </span>   <span>// check each of the other balls</span>
<span> </span>   <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> balls<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
<span> </span>     <span>const</span> ball2 <span>=</span> balls<span>[</span>j<span>]</span><span>;</span>
</span><span><span>+</span> 
<span>+</span>     <span>// stop when too far away</span>
<span>+</span>     <span>if</span> <span>(</span>ball2<span>.</span>left <span>&gt;</span> ball1<span>.</span>right<span>)</span> <span>break</span><span>;</span>
<span>+</span> 
</span><span><span> </span>     <span>// check for collision</span>
<span> </span>     <span>if</span> <span>(</span><span>intersects</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>)</span> <span>{</span>
<span> </span>       <span>bounce</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>;</span>
<span> </span>     <span>}</span>
<span> </span>   <span>}</span>
<span> </span> <span>}</span></span></code></pre>

<p>It’s mostly the same as the naive solution, differing only in two extra lines of code.</p>

<p>The first line <code>sortByLeft(balls)</code> simply sorts the list, with ranking based on the balls’ left edge x-coords.</p>

<pre><code><span>function</span> <span>sortByLeft</span><span>(</span><span>balls</span><span>)</span> <span>{</span>
  balls<span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span>b</span><span>)</span> <span>=&gt;</span> a<span>.</span>left <span>-</span> b<span>.</span>left<span>)</span><span>;</span>
<span>}</span></code></pre>

<p>And in the inner loop, there is now this break:</p>

<pre><code><span>if</span> <span>(</span>ball2<span>.</span>left <span>&gt;</span> ball1<span>.</span>right<span>)</span> <span>break</span><span>;</span></code></pre>

<p>Let’s break that down.</p>

<p>First, we know that the list is sorted, so the following statement
              holds true for any positive integer
              <code>c</code>:
            </p>

<p>
              <code>balls[<span>j</span> + <span>c</span>].left <span>&gt;=</span> balls[<span>j</span>].left</code>
            </p>

<p>The break condition, which is derived from the first operand of the intersection test, if true indicates early that the current pair being tested for intersection would fail:</p>

<p>
              <code>balls2.left <span>&gt;</span> ball1.right</code><br>
              or <code>balls[<span>j</span>].left <span>&gt;</span> ball1.right</code>
            </p>

<p>But there are more implications. If it was true, then by combining the above two inequations…</p>

<p>
              <code>balls[<span>j</span> + <span>c</span>].left <span>&gt;=</span> balls[<span>j</span>].left <span>&gt;</span> ball1.right</code>
            </p>

<p>And by transitive property, the following statement would also be true!</p>

<p>
              <code>balls[<span>j</span> + <span>c</span>].left <span>&gt;</span> ball1.right</code>
            </p>

<p>Which means the intersection tests of balls at
              <code>balls[<span>j</span> + <span>c</span>]</code>
              would also fail. We know this without needing to test those balls individually. A range of balls have been eliminated from testing!
            </p>

<p>In conclusion, when the current <em>ball2</em>
              <code>balls[<span>j</span>]</code>
              stops overlapping with the current <em>ball1</em>, then any further <em>ball2</em>s in the iteration
              <code>balls[<span>j</span> + <span>c</span>]</code>
              would be guaranteed to not overlap <em>ball1</em> as well. In other words, we stop the inner loop when it gets too far away.
            </p>

<p>Finally, here’s a demo:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'simple-sap' strategy</pre>

                Pairs highlighted <span aria-label="a connecting green line"></span> when tested by <code>intersects()</code>.
              
<p>Pretty cool, right! It’s much faster now.</p>

<p>Some observations:</p>

<ul>
              <li>Since the list is sorted, the tests are performed from left to right.</li>
              <li>More importantly, it visibly does fewer tests than the naive approach. 📉 This is due the above optimisation which effectively limits pairs to those that overlap in the x-axis!</li>
            </ul>

<p>Let’s analyse the time complexity. 👓</p>

<p>The sort - if we take the "fastest" sorting algorithm, like mergesort or quicksort - would add an <em>O(n log n)</em> term.</p>

<p>The two-level loop, now with an early break, would average out to <em>O(n&nbsp;+&nbsp;m)</em> where <em>m</em> is the total number of x-overlaps. This could degenerate into n<sup>2</sup> but as mentioned above, it’s more useful to look at the average and best cases. At best, the loop would be <em>O(n)</em>, wasting no excess processing when there are no overlaps. On average it’s <em>O(n&nbsp;+&nbsp;m)</em>.</p>

<p><span>The average case refers to a world where objects are mostly evenly distributed and only a couple intersections per object is happening. I think this is a reasonable assumption for a relatively simple video game like a platformer or side-scroller.</span></p>

<p>Here’s the code with running time annotations:</p>

<pre><code><span>// O(n log n)</span>
<span>sortByLeft</span><span>(</span>balls<span>)</span><span>;</span>

<span>// O(n + m)</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> balls<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>const</span> ball1 <span>=</span> balls<span>[</span>i<span>]</span><span>;</span>
  <span>// O(1) at best; O(m/n) on average; O(n) at worst</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> balls<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>const</span> ball2 <span>=</span> balls<span>[</span>j<span>]</span><span>;</span>
    <span>if</span> <span>(</span>ball2<span>.</span>left <span>&gt;</span> ball1<span>.</span>right<span>)</span> <span>break</span><span>;</span>
    <span>if</span> <span>(</span><span>intersects</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>)</span> <span>{</span>
      <span>bounce</span><span>(</span>ball1<span>,</span> ball2<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>Adding those together we get <em><strong>O(n&nbsp;log&nbsp;n&nbsp;+&nbsp;m)</strong></em>.</p>

<p>This is a super good improvement over the naive approach’s <em>O(n<sup>2</sup>)</em>, because <strong>[1]</strong> <em>n&nbsp;log&nbsp;n</em> is <a target="_blank" href="https://bigocheatsheet.com/">much smaller</a> than <em>n<sup>2</sup></em> and <strong>[2]</strong> it is partially output-based - depending on the number of overlaps, it does not process more than necessary.</p>
<a target="_blank" href="https://www.bigocheatsheet.com">
              <div>
                <img alt="" src="https://www.bigocheatsheet.com/img/big-o-complexity-chart.png" loading="lazy"><span>bigocheatsheet.com</span>
              </div>
            </a>
<p>Furthermore, the choice of sorting algorithm could be improved. We’ll look into that in the next part (somehow better than <em>n&nbsp;log&nbsp;n</em>!).</p>
<span>
              If you got this far trying to find a decent collision detection algorithm, then you can stop reading and take the above design! It’s the perfect balance between programming effort and running time performance. If you are curious how this develops or just want to see more interactive demos, read on to the next part.
            </span>
<h2 id="visual-comparison">Visual comparison</h2>

<p><a id="comparisons"></a>Here’s a side-by-side comparison of the strategies we’ve covered so far! Observe the amount of intersection tests required per frame. 🔍 n = 10</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'pairwise' strategy</pre>
Global pairwise
<pre>Interactive content: <a href="https://leanrada.com/notes/sweep-and-prune?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of the collision detection algorithm using 'sap-nativesort' strategy</pre>
Sorted pairwise
<p>(Not shown: the cost of sorting. Let’s just say the intersection test is sufficiently expensive.)</p>

<p>Aaand that concludes the first part. Those two lines of code definitely were the MVPs.</p>

<p>How will it compare to the more advanced versions?</p>

<p><a target="_self" href="https://leanrada.com/notes/sweep-and-prune-2?ref=rss">Continued in part 2.</a>
            </p>
]]></description>
            <link>https://leanrada.com/notes/sweep-and-prune?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/sweep-and-prune?ref=rss</guid>
            <pubDate>Sat, 05 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pure CSS volley ball game]]></title>
            <description><![CDATA[
<p>I don’t know why I did this, but it was fun / funny.</p>

<p>This is a volley ball / tennis game implemented purely using HTML and CSS. Features real-time action gameplay and score counting.</p>

<p>👉 See the Pen <a target="_blank" href="https://codepen.io/kalabasa/pen/MWzmPXb">Pure CSS Volley Game</a> on CodePen!</p>

<video muted="" autoplay="" loop="" aria-label="video of CSS volley ball video game">
                <source src="https://leanrada.com/notes/pure-css-volley-ball-game/video.web.mp4?ref=rss">
                <a href="https://leanrada.com/notes/pure-css-volley-ball-game/video.web.mp4?ref=rss">video of CSS volley ball video game</a>
              </video>
]]></description>
            <link>https://leanrada.com/notes/pure-css-volley-ball-game?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/pure-css-volley-ball-game?ref=rss</guid>
            <pubDate>Mon, 03 Jul 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pure CSS volley ball game]]></title>
            <description><![CDATA[
<p>I don’t know why I did this, but it was fun / funny.</p>

<p>This is a volley ball / tennis game implemented purely using HTML and CSS. Features real-time action gameplay and score counting.</p>

<p>👉 See the Pen <a target="_blank" href="https://codepen.io/kalabasa/pen/MWzmPXb">Pure CSS Volley Game</a> on CodePen!</p>

<video muted="" autoplay="" loop="" aria-label="video of CSS volley ball video game">
                <source src="https://leanrada.com/notes/pure-css-volley-ball-game/video.web.mp4?ref=rss">
                <a href="https://leanrada.com/notes/pure-css-volley-ball-game/video.web.mp4?ref=rss">video of CSS volley ball video game</a>
              </video>
]]></description>
            <link>https://leanrada.com/notes/pure-css-volley-ball-game?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/pure-css-volley-ball-game?ref=rss</guid>
            <pubDate>Mon, 03 Jul 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Dynamic patrol behaviour in stealth games with Markov chains]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Hi, this post is about a game AI algorithm for stealth games.</p>

<p>But first, here’s a preview demo! Full demo at the end of this post. In between, I’ll explain the background, the process, and the results!</p>

<p><pre>Interactive content: <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of the dynamic patrol algorithm</pre></p>

<h2 id="background">Background</h2>

<p>I enjoy stealth games. However, I felt like the genre has become formulaic. Nowadays, we have standardised light, shadow, and noise mechanics. We almost always get discrete levels of alertness where on one end NPCs have wallhacks while on the other, NPCs have amnesia.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/sc_664.generated.jpg 664w" sizes=" 664px" alt="Screenshot of Splinter Cell" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/sc.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Screenshot of Splinter Cell: Chaos Theory from mobygames.com. This game is good.</span>
<p>The most immersion-breaking moment for me was when you get spotted, the subsequent investigation consists solely of staring at the ground where you were last seen. Like when you get spotted at an entrance to a room, guards will just stare at the doorway. <em>Why not check inside the room?</em></p>

<p><span>Yeah, I know, game designers don’t deem smart game AI “fun”. But an easy predictable game is no fun! Whatever, I just wanted to share this prototype.</span></p>

<p>What was lacking in stealth game AI is inference - the ability to infer that when a target enters a room, then they subsequently must be inside the room.</p>

<h2 id="a-room-and-a-hallway">A room and a hallway</h2>

<p>As an example, here are a room and a hallway with a doorway in between, modelled as a <a target="_blank" href="https://en.wikipedia.org/wiki/Graph">graph</a>:</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph_300.generated.png 300w" sizes=" 300px" alt="Node graph representing a room node, a doorway node, and hallway nodes" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph.png?ref=rss" spec="300" loading="lazy" width="100%" height="">

<p>If we assign a number to each node representing the probability that the target (the player) is there, we can start making inferences of where the target could be at later times.</p>

<p>Let’s say the target was just seen in room <em>R</em>. At that exact moment, there is complete certainty that the target is there, so node <em>R</em> will be assigned a probability of <strong>1.0</strong>.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r1_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 1.0, the doorway node with 0.0, and hallway nodes with 0.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r1.png?ref=rss" spec="300" loading="lazy" width="100%" height="">

<p>After that moment however, the certainty fades. Because the target could have exited the room next, or maybe they stayed.</p>

<p>The graph is recalculated to reflect this uncertainty by distributing the probability value of <strong>1.0</strong> from node <em>R</em> to each possible choice of node - <em>D</em> (exit) and <em>R</em> (stay). We don’t know the likeliness of either happening so we can just assume equal chances, giving them <strong>0.5</strong> each.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r1d1_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 0.5, the doorway node with 0.5, and hallway nodes with 0.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r1d1.png?ref=rss" spec="300" loading="lazy" width="100%" height="">

<p>Now there is 50% probability that the target is in the room, and 50% in the doorway. This process is repeated for each node over time to calculate the target’s potential location at any given moment.</p>

<p>Let’s do another iteration. The next one is a bit tricky, but it’s all calculated the same. We just need to calculate the distribution from each node <em>in parallel</em>, like so:</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r1d1t_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the distribution from previous state" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r1d1t.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>Split the probabilities per node to each possible choice (including staying).</span>
<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r5d5h2_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 0.42, the doorway node with 0.42, and the hallway node H1 directly next to the doorway with 0.16" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r5d5h2.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>Then sum up the values that arrived in each node.</span>
<p><strong>Explanation of above:</strong> The <strong>0.5</strong> at <em>R</em> is split into two, giving <strong>0.5 / 2 = 0.25</strong> each to <em>R</em> and <em>D</em>. Meanwhile, the <strong>0.5</strong> at <em>D</em> is split into three, giving <strong>0.5 / 3 ≈ 0.16</strong> each to <em>R</em>, <em>D</em>, and <em>H1</em>. Then node values are added together in a separate step after the split.</p>

<p>After some time, we will get a picture of where the target is likely to be and a smarter game AI can utilise this to send guards on a more realistic investigation route.</p>

<p>Another iteration and we get this:</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-final_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 0.35, the doorway node with 0.39, hallway nodes H0 and H2 with 0.04, and H1 with 0.18" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-final.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>The state after some time</span>
<p>What I’ve just described is some generalisation of a <strong><a target="_blank" href="https://en.wikipedia.org/wiki/Markov_chain">Markov chain</a></strong>. Well, it’s not exactly accurate to call it that since the Markov chain is just one part of the algorithm. You’ll see why in the next section.</p>

<p><span><strong>Disclaimer:</strong> I wasn’t thinking about Markov chains while developing this algorithm. The first version back in 2013 was based on crude counting and was more like a potential field. (Btw, it was in <a target="_blank" href="https://en.wikipedia.org/wiki/Adobe_Flash">Flash</a>.) The Markov chain concept that I learned (2023) helped me make the calculations more accurate and the numbers more realistic.</span></p>

<h2 id="observer-effect">Observer effect</h2>

<p>Suppose a guard did come to investigate the nearest highest probability node (the doorway <em>D</em>). Coming from the south, the guard just saw the doorway and the immediate hallway in their field of vision - There are two possibilities: Either <strong>(1)</strong> they saw nothing, or <strong>(2)</strong> they saw <em>the target</em>.</p>

<p>In case <strong>(1)</strong> where the guard saw nothing, we need to update the seen nodes according to the guard’s a posteriori observation.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/observe-none_300.generated.png 300w" sizes=" 300px" alt="Node graph with observed nodes having 0.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/observe-none.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>After observation</span>
<p>The nodes that were seen having no target at their locations are forced to a probability of <strong>0.0</strong>, because if you think about it, that makes sense. The remaining nodes are then scaled so that they still add up to a total of <strong>1.0</strong> (This is an invariant in any case).</p>

<p>To illustrate, here’s a table that details each intermediate step:</p>
<table>
                  <thead>
                    <tr>
                      <th>Node</th>
                      <th>Prior<br>probabilities</th>
                      <th>Values after<br>observation</th>
                      <th>Final values<br>after rescaling</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>R</td>
                      <td>0.35</td>
                      <td>0.35</td>
                      <td><strong>0.9</strong></td>
                    </tr>
                    <tr>
                      <td>D</td>
                      <td>0.39</td>
                      <td><strong>0</strong></td>
                      <td>0</td>
                    </tr>
                    <tr>
                      <td>H0</td>
                      <td>0.04</td>
                      <td>0.04</td>
                      <td><strong>0.1</strong></td>
                    </tr>
                    <tr>
                      <td>H1</td>
                      <td>0.18</td>
                      <td><strong>0</strong></td>
                      <td>0</td>
                    </tr>
                    <tr>
                      <td>H2</td>
                      <td>0.04</td>
                      <td><strong>0</strong></td>
                      <td>0</td>
                    </tr>
                  </tbody>
                </table>
<p>After updating the probabilities, the state of the graph tells us that the target is around 90% likely to be in the room <em>R</em> and 10% in the far hallway <em>H0</em>.</p>

<p>The game AI can simply send the guard to the highest node based on the updated probabilities (this case, the room <em>R</em>). It can do this again and again, which will result in a seemingly organic and responsive searching behaviour from the AI guard. No predefined patrol routes needed.</p>

<p><span>Another way to go about this is to keep track of probabilities in the form of rational numbers - separately tracking the numerators and the denominators. You only need to store the numerator per node, while there is one global denominator, which is the sum of all the numerators. This is what I did for my demo implementation.</span></p>
<hr>
<p>In case <strong>(2)</strong> where the guard saw the target, a similar but more drastic approach applies. The node containing the target is assigned <strong>1.0</strong> while <em>the rest of the nodes in the whole graph</em> are cleared back to <strong>0.0</strong>. The target can only be in one place at at a time!</p>

<img srcset="/notes/dynamic-patrol-stealth-games/observe-target_300.generated.png 300w" sizes=" 300px" alt="Node graph with observed target in node having 1.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/observe-target.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>After observation of target</span>
<p>It stays that way as long as the guard can see the target. When the guard loses sight of the target again, we just continue the Markov inference and the probability values will spread again like a wave. The cycle of chasing, investigation, and hiding continues.</p>
<span>
              Similar to quantum mechanics, an act of observation collapses the superposition. There seems to be an underlying mathematical truth that spans across Markov chains, quantum mechanics, Bayesian networks, and video game mechanics. :P
            </span>
<p>It’s best to just see it in action. Play with the demo in the following section.</p>

<h2 id="demo">Demo</h2>

<p>I implemented this algorithm in JavaScript so you can play with it right here. In this implementation, the world is a 2D grid where each tile is a node in the Markov graph.</p>

<p>Click a tile to command the target (the green character <img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/target.png?ref=rss" alt="">) to move. A blue fog will indicate the probabilities of each tile.</p>

<p>Have fun playing hide and seek!</p>

<p><pre>Interactive content: <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of the dynamic patrol algorithm</pre></p>

<p><span><strong>Tip:</strong> Press <code>P</code> to toggle visibility of the probability field. Press <code>N</code> to toggle numbers between none, percentage, and log-scale. (Keyboard only)</span></p>

<h2 id="conclusions">Conclusions</h2>

<ul>
              <li>Emergent behaviours can be described:<ul>
                  <li>Chasing: Upon losing vision, the guard starts chasing in the direction where you ran away (without the guard actually seeing where you are).</li>
                  <li>Searching: As the chase continues, the path begins branching, and the probability dilutes. The guard gradually transitions from chasing behaviour to a searching behaviour.</li>
                  <li>Patrolling: As the probability distribution approaches equilibrium, the guard devolves into a plain patrol.</li>
                  <li>There is a spectrum from chasing to patrolling.</li>
                </ul>
              </li>
              <li>The probability spreading process can be drastically sped-up by implementing Markov chain transitions using matrix multiplication with a transition matrix.<ul>
                  <li>Matrix multiplication is <a target="_blank" href="https://en.wikipedia.org/wiki/Embarrassingly_parallel">embarrasingly parallel</a>.</li>
                </ul>
              </li>
              <li>The search route quality can be improved significantly. Currently it just sets the tile with the highest potential as the destination with an A* pathfinder, resetting the process whenever the tile becomes invalid.<ul>
                  <li>One improvement might involve incorporating the potential field as weights in the pathfinding algorithm itself to generate a more efficient and sweeping route.</li>
                </ul>
              </li>
            </ul>

<p>Sadly, the name <a target="_blank" href="https://github.com/mxgmn/WaveFunctionCollapse">“Wave Function Collapse”</a> has already been claimed by a different video game algorithm, so I can’t give this one a cool quantum name anymore.</p>
<hr>
<p><strong>Bonus demo! 2 guards.</strong></p>

<p><pre>Interactive content: <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of the dynamic patrol algorithm</pre></p>

<p>Special thanks:</p>

<ul>
              <li><img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/target.png?ref=rss" alt=""> Ally Gator as “The Target”</li>
              <li><img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt=""> Metal Head as “Guard 1”</li>
              <li><img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt=""> Rust Bucket as “Guard 2”</li>
              <li><a target="_blank" href="https://bitbucket.org/umbraprojekt/mrpas">bitbucket/umbraprojekt/mrpas</a> for guards’ vision <img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt="">🪧<img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt=""></li>
              <li><a target="_blank" href="https://github.com/qiao/PathFinding.js">github/qiao/PathFinding.js</a> for giving directions 🧭</li>
            </ul>

<p><strong>Update:</strong> Related stuff I found:</p>

<ul>
              <li><a target="_blank" href="https://youtu.be/eFP0_rkjwlY?t=842">Predicting Pac-Man ghosts with Markov chains [YouTube]</a>
                <ul>
                  <li>As mentioned above, I had a crude counting-based solution before, but the concept of Markov chains made it more accurate. This video is where I got the idea of applying Markov chains to a grid.</li>
                </ul>
              </li>
              <li><a target="_blank" href="https://ojs.aaai.org/index.php/AIIDE/article/download/7425/7308/10903">Dynamic Guard Patrol in Stealth Games [academic, PDF]</a>
                <ul>
                  <li>Accompanying video: <a target="_blank" href="https://youtu.be/9FyaMM7l2EU">YouTube</a></li>
                  <li>I found this after writing this post. The paper uses a similar potential field idea, but only tracks <em>staleness</em>. It behaves similarly to the Markov chain’s equilibrium state, but it cannot produce chasing behaviours.</li>
                </ul>
              </li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Dynamic patrol behaviour in stealth games with Markov chains]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Hi, this post is about a game AI algorithm for stealth games.</p>

<p>But first, here’s a preview demo! Full demo at the end of this post. In between, I’ll explain the background, the process, and the results!</p>

<p><pre>Interactive content: <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of the dynamic patrol algorithm</pre></p>

<h2 id="background">Background</h2>

<p>I enjoy stealth games. However, I felt like the genre has become formulaic. Nowadays, we have standardised light, shadow, and noise mechanics. We almost always get discrete levels of alertness where on one end NPCs have wallhacks while on the other, NPCs have amnesia.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/sc_664.generated.jpg 664w" sizes=" 664px" alt="Screenshot of Splinter Cell" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/sc.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Screenshot of Splinter Cell: Chaos Theory from mobygames.com. This game is good.</span>
<p>The most immersion-breaking moment for me was when you get spotted, the subsequent investigation consists solely of staring at the ground where you were last seen. Like when you get spotted at an entrance to a room, guards will just stare at the doorway. <em>Why not check inside the room?</em></p>

<p><span>Yeah, I know, game designers don’t deem smart game AI “fun”. But an easy predictable game is no fun! Whatever, I just wanted to share this prototype.</span></p>

<p>What was lacking in stealth game AI is inference - the ability to infer that when a target enters a room, then they subsequently must be inside the room.</p>

<h2 id="a-room-and-a-hallway">A room and a hallway</h2>

<p>As an example, here are a room and a hallway with a doorway in between, modelled as a <a target="_blank" href="https://en.wikipedia.org/wiki/Graph">graph</a>:</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph_300.generated.png 300w" sizes=" 300px" alt="Node graph representing a room node, a doorway node, and hallway nodes" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph.png?ref=rss" spec="300" loading="lazy" width="100%" height="">

<p>If we assign a number to each node representing the probability that the target (the player) is there, we can start making inferences of where the target could be at later times.</p>

<p>Let’s say the target was just seen in room <em>R</em>. At that exact moment, there is complete certainty that the target is there, so node <em>R</em> will be assigned a probability of <strong>1.0</strong>.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r1_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 1.0, the doorway node with 0.0, and hallway nodes with 0.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r1.png?ref=rss" spec="300" loading="lazy" width="100%" height="">

<p>After that moment however, the certainty fades. Because the target could have exited the room next, or maybe they stayed.</p>

<p>The graph is recalculated to reflect this uncertainty by distributing the probability value of <strong>1.0</strong> from node <em>R</em> to each possible choice of node - <em>D</em> (exit) and <em>R</em> (stay). We don’t know the likeliness of either happening so we can just assume equal chances, giving them <strong>0.5</strong> each.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r1d1_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 0.5, the doorway node with 0.5, and hallway nodes with 0.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r1d1.png?ref=rss" spec="300" loading="lazy" width="100%" height="">

<p>Now there is 50% probability that the target is in the room, and 50% in the doorway. This process is repeated for each node over time to calculate the target’s potential location at any given moment.</p>

<p>Let’s do another iteration. The next one is a bit tricky, but it’s all calculated the same. We just need to calculate the distribution from each node <em>in parallel</em>, like so:</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r1d1t_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the distribution from previous state" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r1d1t.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>Split the probabilities per node to each possible choice (including staying).</span>
<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-r5d5h2_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 0.42, the doorway node with 0.42, and the hallway node H1 directly next to the doorway with 0.16" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-r5d5h2.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>Then sum up the values that arrived in each node.</span>
<p><strong>Explanation of above:</strong> The <strong>0.5</strong> at <em>R</em> is split into two, giving <strong>0.5 / 2 = 0.25</strong> each to <em>R</em> and <em>D</em>. Meanwhile, the <strong>0.5</strong> at <em>D</em> is split into three, giving <strong>0.5 / 3 ≈ 0.16</strong> each to <em>R</em>, <em>D</em>, and <em>H1</em>. Then node values are added together in a separate step after the split.</p>

<p>After some time, we will get a picture of where the target is likely to be and a smarter game AI can utilise this to send guards on a more realistic investigation route.</p>

<p>Another iteration and we get this:</p>

<img srcset="/notes/dynamic-patrol-stealth-games/room-graph-final_300.generated.png 300w" sizes=" 300px" alt="Node graph representing the room node with 0.35, the doorway node with 0.39, hallway nodes H0 and H2 with 0.04, and H1 with 0.18" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/room-graph-final.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>The state after some time</span>
<p>What I’ve just described is some generalisation of a <strong><a target="_blank" href="https://en.wikipedia.org/wiki/Markov_chain">Markov chain</a></strong>. Well, it’s not exactly accurate to call it that since the Markov chain is just one part of the algorithm. You’ll see why in the next section.</p>

<p><span><strong>Disclaimer:</strong> I wasn’t thinking about Markov chains while developing this algorithm. The first version back in 2013 was based on crude counting and was more like a potential field. (Btw, it was in <a target="_blank" href="https://en.wikipedia.org/wiki/Adobe_Flash">Flash</a>.) The Markov chain concept that I learned (2023) helped me make the calculations more accurate and the numbers more realistic.</span></p>

<h2 id="observer-effect">Observer effect</h2>

<p>Suppose a guard did come to investigate the nearest highest probability node (the doorway <em>D</em>). Coming from the south, the guard just saw the doorway and the immediate hallway in their field of vision - There are two possibilities: Either <strong>(1)</strong> they saw nothing, or <strong>(2)</strong> they saw <em>the target</em>.</p>

<p>In case <strong>(1)</strong> where the guard saw nothing, we need to update the seen nodes according to the guard’s a posteriori observation.</p>

<img srcset="/notes/dynamic-patrol-stealth-games/observe-none_300.generated.png 300w" sizes=" 300px" alt="Node graph with observed nodes having 0.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/observe-none.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>After observation</span>
<p>The nodes that were seen having no target at their locations are forced to a probability of <strong>0.0</strong>, because if you think about it, that makes sense. The remaining nodes are then scaled so that they still add up to a total of <strong>1.0</strong> (This is an invariant in any case).</p>

<p>To illustrate, here’s a table that details each intermediate step:</p>
<table>
                  <thead>
                    <tr>
                      <th>Node</th>
                      <th>Prior<br>probabilities</th>
                      <th>Values after<br>observation</th>
                      <th>Final values<br>after rescaling</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>R</td>
                      <td>0.35</td>
                      <td>0.35</td>
                      <td><strong>0.9</strong></td>
                    </tr>
                    <tr>
                      <td>D</td>
                      <td>0.39</td>
                      <td><strong>0</strong></td>
                      <td>0</td>
                    </tr>
                    <tr>
                      <td>H0</td>
                      <td>0.04</td>
                      <td>0.04</td>
                      <td><strong>0.1</strong></td>
                    </tr>
                    <tr>
                      <td>H1</td>
                      <td>0.18</td>
                      <td><strong>0</strong></td>
                      <td>0</td>
                    </tr>
                    <tr>
                      <td>H2</td>
                      <td>0.04</td>
                      <td><strong>0</strong></td>
                      <td>0</td>
                    </tr>
                  </tbody>
                </table>
<p>After updating the probabilities, the state of the graph tells us that the target is around 90% likely to be in the room <em>R</em> and 10% in the far hallway <em>H0</em>.</p>

<p>The game AI can simply send the guard to the highest node based on the updated probabilities (this case, the room <em>R</em>). It can do this again and again, which will result in a seemingly organic and responsive searching behaviour from the AI guard. No predefined patrol routes needed.</p>

<p><span>Another way to go about this is to keep track of probabilities in the form of rational numbers - separately tracking the numerators and the denominators. You only need to store the numerator per node, while there is one global denominator, which is the sum of all the numerators. This is what I did for my demo implementation.</span></p>
<hr>
<p>In case <strong>(2)</strong> where the guard saw the target, a similar but more drastic approach applies. The node containing the target is assigned <strong>1.0</strong> while <em>the rest of the nodes in the whole graph</em> are cleared back to <strong>0.0</strong>. The target can only be in one place at at a time!</p>

<img srcset="/notes/dynamic-patrol-stealth-games/observe-target_300.generated.png 300w" sizes=" 300px" alt="Node graph with observed target in node having 1.0" src="https://leanrada.com/notes/dynamic-patrol-stealth-games/observe-target.png?ref=rss" spec="300" loading="lazy" width="100%" height="">
<span>After observation of target</span>
<p>It stays that way as long as the guard can see the target. When the guard loses sight of the target again, we just continue the Markov inference and the probability values will spread again like a wave. The cycle of chasing, investigation, and hiding continues.</p>
<span>
              Similar to quantum mechanics, an act of observation collapses the superposition. There seems to be an underlying mathematical truth that spans across Markov chains, quantum mechanics, Bayesian networks, and video game mechanics. :P
            </span>
<p>It’s best to just see it in action. Play with the demo in the following section.</p>

<h2 id="demo">Demo</h2>

<p>I implemented this algorithm in JavaScript so you can play with it right here. In this implementation, the world is a 2D grid where each tile is a node in the Markov graph.</p>

<p>Click a tile to command the target (the green character <img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/target.png?ref=rss" alt="">) to move. A blue fog will indicate the probabilities of each tile.</p>

<p>Have fun playing hide and seek!</p>

<p><pre>Interactive content: <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of the dynamic patrol algorithm</pre></p>

<p><span><strong>Tip:</strong> Press <code>P</code> to toggle visibility of the probability field. Press <code>N</code> to toggle numbers between none, percentage, and log-scale. (Keyboard only)</span></p>

<h2 id="conclusions">Conclusions</h2>

<ul>
              <li>Emergent behaviours can be described:<ul>
                  <li>Chasing: Upon losing vision, the guard starts chasing in the direction where you ran away (without the guard actually seeing where you are).</li>
                  <li>Searching: As the chase continues, the path begins branching, and the probability dilutes. The guard gradually transitions from chasing behaviour to a searching behaviour.</li>
                  <li>Patrolling: As the probability distribution approaches equilibrium, the guard devolves into a plain patrol.</li>
                  <li>There is a spectrum from chasing to patrolling.</li>
                </ul>
              </li>
              <li>The probability spreading process can be drastically sped-up by implementing Markov chain transitions using matrix multiplication with a transition matrix.<ul>
                  <li>Matrix multiplication is <a target="_blank" href="https://en.wikipedia.org/wiki/Embarrassingly_parallel">embarrasingly parallel</a>.</li>
                </ul>
              </li>
              <li>The search route quality can be improved significantly. Currently it just sets the tile with the highest potential as the destination with an A* pathfinder, resetting the process whenever the tile becomes invalid.<ul>
                  <li>One improvement might involve incorporating the potential field as weights in the pathfinding algorithm itself to generate a more efficient and sweeping route.</li>
                </ul>
              </li>
            </ul>

<p>Sadly, the name <a target="_blank" href="https://github.com/mxgmn/WaveFunctionCollapse">“Wave Function Collapse”</a> has already been claimed by a different video game algorithm, so I can’t give this one a cool quantum name anymore.</p>
<hr>
<p><strong>Bonus demo! 2 guards.</strong></p>

<p><pre>Interactive content: <a href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of the dynamic patrol algorithm</pre></p>

<p>Special thanks:</p>

<ul>
              <li><img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/target.png?ref=rss" alt=""> Ally Gator as “The Target”</li>
              <li><img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt=""> Metal Head as “Guard 1”</li>
              <li><img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt=""> Rust Bucket as “Guard 2”</li>
              <li><a target="_blank" href="https://bitbucket.org/umbraprojekt/mrpas">bitbucket/umbraprojekt/mrpas</a> for guards’ vision <img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt="">🪧<img src="https://leanrada.com/notes/dynamic-patrol-stealth-games/demo/guard.png?ref=rss" alt=""></li>
              <li><a target="_blank" href="https://github.com/qiao/PathFinding.js">github/qiao/PathFinding.js</a> for giving directions 🧭</li>
            </ul>

<p><strong>Update:</strong> Related stuff I found:</p>

<ul>
              <li><a target="_blank" href="https://youtu.be/eFP0_rkjwlY?t=842">Predicting Pac-Man ghosts with Markov chains [YouTube]</a>
                <ul>
                  <li>As mentioned above, I had a crude counting-based solution before, but the concept of Markov chains made it more accurate. This video is where I got the idea of applying Markov chains to a grid.</li>
                </ul>
              </li>
              <li><a target="_blank" href="https://ojs.aaai.org/index.php/AIIDE/article/download/7425/7308/10903">Dynamic Guard Patrol in Stealth Games [academic, PDF]</a>
                <ul>
                  <li>Accompanying video: <a target="_blank" href="https://youtu.be/9FyaMM7l2EU">YouTube</a></li>
                  <li>I found this after writing this post. The paper uses a similar potential field idea, but only tracks <em>staleness</em>. It behaves similarly to the Markov chain’s equilibrium state, but it cannot produce chasing behaviours.</li>
                </ul>
              </li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A review of all IDEs I’ve ever used]]></title>
            <description><![CDATA[
<h2>Notepad.exe</h2>
<span>
          🟠 Hey! Sometimes the review is embedded <em>inside</em> the editor UI,
          like this one. Watch out for the insides!
        </span>
            ._____________.<br>
            | notepad.exe |<br>
            |________[7/10]<br>
<p>
              Ah, Notepad, the default text editor in Microsoft Windows XP, my OS
              not-by-choice back when I didn’t know what “programming” was and
              only cared about making mods for a game called Clonk. The game used
              a C-like language, but I didn’t know that nor anything about syntax
              and syntax coloring and other good editor stuff.
            </p>

<p>
              However, it got the job done. You open a file, you save it. It’s
              compatible with any programming language, any build tool. In fact
              it’s not incompatible with anything! Except Unix line endings.
            </p>

<p>
              Due to its simplicity and speed (tho it’s not really fast when large
              files), I give it a 7/10. Note that Windowses 7/10 being the only
              good versions of Windows is purely coincidental.
            </p>

<h2>Macromedia Flash 8</h2>

<img srcset="/misc/ide-reviews/macromedia-flash-8_800.generated.png 800w" sizes=" 800px" alt="screenshot of Macromedia Flash 8" src="https://leanrada.com/misc/ide-reviews/macromedia-flash-8.png?ref=rss" spec="100% [800) 800" loading="lazy">

<details>
          <summary>What is Macromedia Flash?</summary>
          <strong>
            <a target="_blank" href="https://en.wikipedia.org/wiki/Adobe_Flash">
              Macromedia Flash</a></strong>, or just Flash, was a Web browser plugin that everyone had back in
          the day before JS was powerful enough. It was used for animations,
          interactive experiences, Web games, Web ads, YouTube, you name it. It
          was the platform of all webapps before the term webapp became a thing.
          It was also the name of the authoring software, or IDE.
        </details>

<p>
          This IDE, as you can see, was very much focused on the
          <strong>graphics and animation</strong> part of the authoring
          experience, not so much on the programming side of rich Web
          applications. Scripts existed merely as augmentation of objects in the
          scene.
        </p>

<p>
          I didn’t care for the graphical, scene-graph-oriented development and
          preferred pure programming with text and text files. Same reason why I
          don’t like the Unity Editor. So it’s a <strong>6/10</strong> for me.
        </p>

<h2>FlashDevelop</h2>

            .______________.<br>
            | FlashDevelop |<br>
            |_________[9/10]<br>
<p>
              FlashDevelop was a code-first Flash IDE. My first experience
              <span>with</span> a
              <span>“real”</span> programming IDE
              <span>with</span> refactoring, build
              configurations, logging, libraries, and more.
            </p>

<p>
              I like how it renders code <span>in</span> bitmap
              fonts. Very crisp <span>in</span> the old CRT
              monitors <span>with</span> 800x600 screen
              resolution. I customized it
              <span>with</span> some downloaded programming
              fonts too.
            </p>

<p>
              Extremely lightweight compared to the alternative Adobe Flash.
              It<span>’s simple and fast. Plus code completion, snippets, and
                REFACTORING IN ActionScript!? It’</span>s a high 9/10.
            </p>

<p>
              My only problem was when some clients wanted the .fla file
              (Adobe<span>’s file format for Flash projects). But that’</span>s not a real problem.
            </p>

<h2>Code::Blocks</h2>

            // .______________.<br>
            // | Code::Blocks |<br>
            // |_________[6/10]<br>
<p>
              /* The only reason why I used Code::Blocks in the first place was
              that it was the IDE recommended for my first programming course when
              I was taking up CS. It was also preinstalled on the university
              compsci lab computers.
            </p>

<p>
              It’s fine. UI was not so great...? I found the build configuration
              setup confusing and so just ran gcc using cli. Then again it was my
              first time writing C, and (as I find out later in my career) build
              configs are always confusing.
            </p>

<p>I rate it a good 6/10. */</p>
<span>
          💡 Did you know that I manually did syntax highlighting for these
          in-editor reviews? At this point it became too tedious so I just made
          the text a code comment.
        </span>
<h2>vi</h2>

<p>
          I use
          <a target="_blank" href="https://en.wikipedia.org/wiki/Vi">vi</a> to
          write commit messages. It was git that trapped me in vi in the first
          place. I never really learned to use the advanced commands in vi, as I
          only use it to write in English - as in commit messages.
        </p>

<p>
          My rating would be <code>export EDITOR=nano</code>.
        </p>

<h2>Eclipse</h2>

<img srcset="/misc/ide-reviews/eclipse_800.generated.png 800w" sizes=" 800px" alt="screenshot of Eclipse" src="https://leanrada.com/misc/ide-reviews/eclipse.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>
          image stolen from
          <a target="_blank" href="https://draculatheme.com/">draculatheme.com</a>
        </em>
<p>
          Eclipse was <em>the</em> Java IDE a few years back. It was even the
          official IDE for developing Android apps for a while. How the mighty
          have
          <a target="_blank" href="https://movingfulcrum.com/the-fall-of-eclipse/">fallen</a>.
        </p>

<p>
          I used Eclipse throughout college for Java courses, and in my first job
          working on Java backends and Android apps. It was a very big app, in
          terms of features and memory usage.
        </p>

<p>
          Unfortunately, it was really slow. It’s like waiting for an eclipse. At
          work, I used to come in at like 9:30AM, boot up the computer, start up
          Eclipse, then immediately go get some snacks. After 5 minutes the toast
          is ready. 10 minutes later, Eclipse becomes usable and I could finally
          work.
        </p>

<p>
          It’s a <strong>4/10</strong> for me, due to slow performance. I’d rather
          use a text editor, if I only knew how the JARs and the APKs got built.
        </p>

<h2>Android Studio</h2>

<img srcset="/misc/ide-reviews/android-studio_800.generated.png 800w" sizes=" 800px" alt="screenshot of Android Studio" src="https://leanrada.com/misc/ide-reviews/android-studio.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>image from Wikimedia Commons</em>
<p>
          Android Studio saved my productivity as an Android dev. Sadly, that
          meant no more snacks while starting up the IDE. And no more naps while
          compiling. I guess JetBrains saved the Android development experience as
          a whole, from Android Studio to Kotlin and Compose.
        </p>

<p>
          It was still kinda slow at startup (?), ‘cause of all the indexing going
          on. JetBrains really redefined IDEs with their Indexing Development
          Environments.
        </p>

<p>
          Still pretty good and still getting better. Search anywhere is awesome.
          The refactoring shortcuts are great. Android tools unmatched. Good
          <strong>9/10</strong>. (Only problem is memory usage 👎)
        </p>

<h2>Sublime Text</h2>

            .______________.<br>
            | Sublime Text |<br>
            |________[10/10]<br>
<p>
              Best text editor. Not an IDE per se, but it could be. Very snappy.
              Simple and easy-to-use with some advanced tricks.
            </p>

<p>
              I believe they also invented the minimap. Both the minimap and the
              command palette are super useful features. It’s also quite
              customizable and could be turned into a semi-IDE with build
              commands.
            </p>

<p>
              Due to Sublime Text I’ve grown to love the simpler, more
              minimalistic tools. It’s life-changing. 10/10
            </p>

<h2>Visual Studio Code</h2>

            ._________.<br>
            | VS Code |<br>
            |___[<span>10/10</span>]<br>
<p>
              VS Code is the new Sublime Text. This has been my main tool in many
              projects for a long time now.
            </p>

<p>
              Sublime Text is still faster, I think, but I haven’t really compared
              them in a long time. I still use Sublime Text keybindings though.
              Muscle memory.
            </p>

<p>
              As a web dev, I like the built-in web browser so I could just open
              the page I’m working on and its source code side-by-side. And
              TypeScript / JavaScript support is strong.
            </p>

<p>
              Even outside of web development, the plugin marketplace is very
              extensive, and almost every language / workflow is supported.
            </p>

<h2>Cider V</h2>

<p>
          Cider V is an internal cloud-based editor used at Google. It’s like this
          <a target="_blank" href="https://github.dev/Kalabasa/kalabasa.github.io/blob/src/src/site/misc/ide-reviews/index.html">cloud-based code editor</a>, but for Google’s internal monorepo. It’s based on VS Code and pretty
          much behaves just like VS Code but with internal extensions.
        </p>

<p>
          The best thing about it is its
          <a target="_blank" href="https://ai.googleblog.com/2022/07/ml-enhanced-code-completion-improves.html">AI-powered autocomplete</a>, trained on Google’s own huge repository of code. Most (not all) of
          the time it just suggests what’s in my mind before it even exists in my
          mind.
        </p>

<img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj4vLV_OWhGUw9u2badD0ZlCFdl1mwBlYzQCQ_XRTtCyu2DKy-yGZhKgnRvruSrAdqQOpThDNi0lbpHjSn5b18aqJ-pJnvCZTEOgrpyVO75CWGTugrrN4e_RY65v_bUdLkOvmDBI9v2j3qA7pWaUAeorGXUzAYHShoNff52lK1lSd2u1seEOSn9JW7hvg/s1043/image5.gif" alt="demo of autcompletion" loading="lazy">

<p>
          However, the normal dumb autcompletion sometimes doesn’t work (or is
          slow?) which gets frustrating. tbf, I get that in VS Code too when
          working on very large projects.
        </p>

<p>
          I haven’t used GitHub Copilot + VS Code so I don’t have a reference for
          comparison. I rate this <strong>9/10</strong>.
        </p>

<h2>IntelliJ IDEA Community Edition</h2>

<img srcset="/misc/ide-reviews/idea_800.generated.png 800w" sizes=" 800px" alt="screenshot of IntelliJ IDEA" src="https://leanrada.com/misc/ide-reviews/idea.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>image from IntelliJ</em>
<p>
          Great Java and Kotlin IDE. I love the refactoring tools. Also, the data
          flow analysis tool is great for debugging.
        </p>

<p>
          But it’s slow and heavy sometimes. Must be the indexing. For me, a slow
          tool really ruins the flow of work and decreases productivity. IDEA
          makes up for it due to its features, so it’s tolerable.
        </p>

<p>
          As a Java IDE (without the Android goodness of Android Studio), it only
          gets
          <strong>8.5/10</strong>.
        </p>

<h2>IntelliJ IDEA Ultimate Edition</h2>

<img srcset="/misc/ide-reviews/idea_800.generated.png 800w" sizes=" 800px" alt="screenshot of IntelliJ IDEA" src="https://leanrada.com/misc/ide-reviews/idea.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>image from IntelliJ</em>
<p>
          This is the paid version of the above. Uh, I really didn’t notice any
          difference from the Community edition besides the splash screen. It’s
          rated <strong>8.5/$</strong>.
        </p>
<span>
          That’s all for now. I will update this page as I use more IDEs. 🏄
        </span>]]></description>
            <link>https://leanrada.com/misc/ide-reviews?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/misc/ide-reviews?ref=rss</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A review of all IDEs I’ve ever used]]></title>
            <description><![CDATA[
<h2>Notepad.exe</h2>
<span>
          🟠 Hey! Sometimes the review is embedded <em>inside</em> the editor UI,
          like this one. Watch out for the insides!
        </span>
            ._____________.<br>
            | notepad.exe |<br>
            |________[7/10]<br>
<p>
              Ah, Notepad, the default text editor in Microsoft Windows XP, my OS
              not-by-choice back when I didn’t know what “programming” was and
              only cared about making mods for a game called Clonk. The game used
              a C-like language, but I didn’t know that nor anything about syntax
              and syntax coloring and other good editor stuff.
            </p>

<p>
              However, it got the job done. You open a file, you save it. It’s
              compatible with any programming language, any build tool. In fact
              it’s not incompatible with anything! Except Unix line endings.
            </p>

<p>
              Due to its simplicity and speed (tho it’s not really fast when large
              files), I give it a 7/10. Note that Windowses 7/10 being the only
              good versions of Windows is purely coincidental.
            </p>

<h2>Macromedia Flash 8</h2>

<img srcset="/misc/ide-reviews/macromedia-flash-8_800.generated.png 800w" sizes=" 800px" alt="screenshot of Macromedia Flash 8" src="https://leanrada.com/misc/ide-reviews/macromedia-flash-8.png?ref=rss" spec="100% [800) 800" loading="lazy">

<details>
          <summary>What is Macromedia Flash?</summary>
          <strong>
            <a target="_blank" href="https://en.wikipedia.org/wiki/Adobe_Flash">
              Macromedia Flash</a></strong>, or just Flash, was a Web browser plugin that everyone had back in
          the day before JS was powerful enough. It was used for animations,
          interactive experiences, Web games, Web ads, YouTube, you name it. It
          was the platform of all webapps before the term webapp became a thing.
          It was also the name of the authoring software, or IDE.
        </details>

<p>
          This IDE, as you can see, was very much focused on the
          <strong>graphics and animation</strong> part of the authoring
          experience, not so much on the programming side of rich Web
          applications. Scripts existed merely as augmentation of objects in the
          scene.
        </p>

<p>
          I didn’t care for the graphical, scene-graph-oriented development and
          preferred pure programming with text and text files. Same reason why I
          don’t like the Unity Editor. So it’s a <strong>6/10</strong> for me.
        </p>

<h2>FlashDevelop</h2>

            .______________.<br>
            | FlashDevelop |<br>
            |_________[9/10]<br>
<p>
              FlashDevelop was a code-first Flash IDE. My first experience
              <span>with</span> a
              <span>“real”</span> programming IDE
              <span>with</span> refactoring, build
              configurations, logging, libraries, and more.
            </p>

<p>
              I like how it renders code <span>in</span> bitmap
              fonts. Very crisp <span>in</span> the old CRT
              monitors <span>with</span> 800x600 screen
              resolution. I customized it
              <span>with</span> some downloaded programming
              fonts too.
            </p>

<p>
              Extremely lightweight compared to the alternative Adobe Flash.
              It<span>’s simple and fast. Plus code completion, snippets, and
                REFACTORING IN ActionScript!? It’</span>s a high 9/10.
            </p>

<p>
              My only problem was when some clients wanted the .fla file
              (Adobe<span>’s file format for Flash projects). But that’</span>s not a real problem.
            </p>

<h2>Code::Blocks</h2>

            // .______________.<br>
            // | Code::Blocks |<br>
            // |_________[6/10]<br>
<p>
              /* The only reason why I used Code::Blocks in the first place was
              that it was the IDE recommended for my first programming course when
              I was taking up CS. It was also preinstalled on the university
              compsci lab computers.
            </p>

<p>
              It’s fine. UI was not so great...? I found the build configuration
              setup confusing and so just ran gcc using cli. Then again it was my
              first time writing C, and (as I find out later in my career) build
              configs are always confusing.
            </p>

<p>I rate it a good 6/10. */</p>
<span>
          💡 Did you know that I manually did syntax highlighting for these
          in-editor reviews? At this point it became too tedious so I just made
          the text a code comment.
        </span>
<h2>vi</h2>

<p>
          I use
          <a target="_blank" href="https://en.wikipedia.org/wiki/Vi">vi</a> to
          write commit messages. It was git that trapped me in vi in the first
          place. I never really learned to use the advanced commands in vi, as I
          only use it to write in English - as in commit messages.
        </p>

<p>
          My rating would be <code>export EDITOR=nano</code>.
        </p>

<h2>Eclipse</h2>

<img srcset="/misc/ide-reviews/eclipse_800.generated.png 800w" sizes=" 800px" alt="screenshot of Eclipse" src="https://leanrada.com/misc/ide-reviews/eclipse.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>
          image stolen from
          <a target="_blank" href="https://draculatheme.com/">draculatheme.com</a>
        </em>
<p>
          Eclipse was <em>the</em> Java IDE a few years back. It was even the
          official IDE for developing Android apps for a while. How the mighty
          have
          <a target="_blank" href="https://movingfulcrum.com/the-fall-of-eclipse/">fallen</a>.
        </p>

<p>
          I used Eclipse throughout college for Java courses, and in my first job
          working on Java backends and Android apps. It was a very big app, in
          terms of features and memory usage.
        </p>

<p>
          Unfortunately, it was really slow. It’s like waiting for an eclipse. At
          work, I used to come in at like 9:30AM, boot up the computer, start up
          Eclipse, then immediately go get some snacks. After 5 minutes the toast
          is ready. 10 minutes later, Eclipse becomes usable and I could finally
          work.
        </p>

<p>
          It’s a <strong>4/10</strong> for me, due to slow performance. I’d rather
          use a text editor, if I only knew how the JARs and the APKs got built.
        </p>

<h2>Android Studio</h2>

<img srcset="/misc/ide-reviews/android-studio_800.generated.png 800w" sizes=" 800px" alt="screenshot of Android Studio" src="https://leanrada.com/misc/ide-reviews/android-studio.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>image from Wikimedia Commons</em>
<p>
          Android Studio saved my productivity as an Android dev. Sadly, that
          meant no more snacks while starting up the IDE. And no more naps while
          compiling. I guess JetBrains saved the Android development experience as
          a whole, from Android Studio to Kotlin and Compose.
        </p>

<p>
          It was still kinda slow at startup (?), ‘cause of all the indexing going
          on. JetBrains really redefined IDEs with their Indexing Development
          Environments.
        </p>

<p>
          Still pretty good and still getting better. Search anywhere is awesome.
          The refactoring shortcuts are great. Android tools unmatched. Good
          <strong>9/10</strong>. (Only problem is memory usage 👎)
        </p>

<h2>Sublime Text</h2>

            .______________.<br>
            | Sublime Text |<br>
            |________[10/10]<br>
<p>
              Best text editor. Not an IDE per se, but it could be. Very snappy.
              Simple and easy-to-use with some advanced tricks.
            </p>

<p>
              I believe they also invented the minimap. Both the minimap and the
              command palette are super useful features. It’s also quite
              customizable and could be turned into a semi-IDE with build
              commands.
            </p>

<p>
              Due to Sublime Text I’ve grown to love the simpler, more
              minimalistic tools. It’s life-changing. 10/10
            </p>

<h2>Visual Studio Code</h2>

            ._________.<br>
            | VS Code |<br>
            |___[<span>10/10</span>]<br>
<p>
              VS Code is the new Sublime Text. This has been my main tool in many
              projects for a long time now.
            </p>

<p>
              Sublime Text is still faster, I think, but I haven’t really compared
              them in a long time. I still use Sublime Text keybindings though.
              Muscle memory.
            </p>

<p>
              As a web dev, I like the built-in web browser so I could just open
              the page I’m working on and its source code side-by-side. And
              TypeScript / JavaScript support is strong.
            </p>

<p>
              Even outside of web development, the plugin marketplace is very
              extensive, and almost every language / workflow is supported.
            </p>

<h2>Cider V</h2>

<p>
          Cider V is an internal cloud-based editor used at Google. It’s like this
          <a target="_blank" href="https://github.dev/Kalabasa/kalabasa.github.io/blob/src/src/site/misc/ide-reviews/index.html">cloud-based code editor</a>, but for Google’s internal monorepo. It’s based on VS Code and pretty
          much behaves just like VS Code but with internal extensions.
        </p>

<p>
          The best thing about it is its
          <a target="_blank" href="https://ai.googleblog.com/2022/07/ml-enhanced-code-completion-improves.html">AI-powered autocomplete</a>, trained on Google’s own huge repository of code. Most (not all) of
          the time it just suggests what’s in my mind before it even exists in my
          mind.
        </p>

<img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj4vLV_OWhGUw9u2badD0ZlCFdl1mwBlYzQCQ_XRTtCyu2DKy-yGZhKgnRvruSrAdqQOpThDNi0lbpHjSn5b18aqJ-pJnvCZTEOgrpyVO75CWGTugrrN4e_RY65v_bUdLkOvmDBI9v2j3qA7pWaUAeorGXUzAYHShoNff52lK1lSd2u1seEOSn9JW7hvg/s1043/image5.gif" alt="demo of autcompletion" loading="lazy">

<p>
          However, the normal dumb autcompletion sometimes doesn’t work (or is
          slow?) which gets frustrating. tbf, I get that in VS Code too when
          working on very large projects.
        </p>

<p>
          I haven’t used GitHub Copilot + VS Code so I don’t have a reference for
          comparison. I rate this <strong>9/10</strong>.
        </p>

<h2>IntelliJ IDEA Community Edition</h2>

<img srcset="/misc/ide-reviews/idea_800.generated.png 800w" sizes=" 800px" alt="screenshot of IntelliJ IDEA" src="https://leanrada.com/misc/ide-reviews/idea.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>image from IntelliJ</em>
<p>
          Great Java and Kotlin IDE. I love the refactoring tools. Also, the data
          flow analysis tool is great for debugging.
        </p>

<p>
          But it’s slow and heavy sometimes. Must be the indexing. For me, a slow
          tool really ruins the flow of work and decreases productivity. IDEA
          makes up for it due to its features, so it’s tolerable.
        </p>

<p>
          As a Java IDE (without the Android goodness of Android Studio), it only
          gets
          <strong>8.5/10</strong>.
        </p>

<h2>IntelliJ IDEA Ultimate Edition</h2>

<img srcset="/misc/ide-reviews/idea_800.generated.png 800w" sizes=" 800px" alt="screenshot of IntelliJ IDEA" src="https://leanrada.com/misc/ide-reviews/idea.png?ref=rss" spec="100% [800) 800" loading="lazy">
<em>image from IntelliJ</em>
<p>
          This is the paid version of the above. Uh, I really didn’t notice any
          difference from the Community edition besides the splash screen. It’s
          rated <strong>8.5/$</strong>.
        </p>
<span>
          That’s all for now. I will update this page as I use more IDEs. 🏄
        </span>]]></description>
            <link>https://leanrada.com/misc/ide-reviews?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/misc/ide-reviews?ref=rss</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pure CSS tic-tac-toe with game AI]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">original post on leanrada.com</a>.</em></p>

<p>As a software developer, I’m always looking for new and fun ways to challenge myself. Some time ago, I decided to implement tic-tac-toe with AI using only <strong>HTML</strong> and <strong>CSS</strong>. That is, no JavaScript! I already knew about the possibility of advanced CSS interactions (e.g. fancy checkboxes), but I wanted to see how far I could take it.</p>

<p>Here’s a CodePen of it! Can you beat a style sheet in a game of tic-tac-toe?</p>

<p data-height="700" data-theme-id="dark" data-default-tab="result" data-slug-hash="oVMOZK" data-user="kalabasa">
              <span>See the Pen <a href="https://codepen.io/kalabasa/pen/oVMOZK">
                  Pure CSS Tic Tac Toe AI</a> by Kalabasa (<a href="https://codepen.io/kalabasa">@kalabasa</a>)
                on <a href="https://codepen.io">CodePen</a>.</span>
            </p>

<p>In this post, I’ll write about the steps I took to make it, starting with the fundamentals.</p>
<span>
              Disclaimer: This was an experiment only. Never do this in production code!
            </span>
<h2 id="building-blocks">Building blocks</h2>

<p>Before starting to build anything complex, it’s important to start small and think about the basic elements. Unlike JavaScript, HTML and CSS are declarative languages. We can’t have procedures or functions, control flow, if-statements, and the like. Instead what we have are markup and rules. We’ll build upon these rules to create complex game logic.</p>

<p>For starters, let’s do something that’s fairly common on the web: <strong>custom checkbox styles</strong>.</p>
<label><input type="checkbox"><span></span> Check this out</label><small>(Hey, these demos are interactive!)</small>
<p>To do this, we need an extra element for the checkbox visuals, like an empty span element.</p>

<pre><code><span><span><span>&lt;</span>label</span><span>&gt;</span></span>
  <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>"</span>checkbox<span>"</span></span> <span>/&gt;</span></span> <span><span><span>&lt;</span>span</span><span>&gt;</span></span><span><span><span>&lt;/</span>span</span><span>&gt;</span></span> Check this out
<span><span><span>&lt;/</span>label</span><span>&gt;</span></span></code></pre>

<p>On the CSS side, the real checkbox input is hidden, while the span is styled as a checkbox in its stead.</p>

<p>Now here’s the important part, we’ll use the <code>:checked</code> pseudo-class and the <strong>sibling combinator</strong> <code>~</code> to make it all work. The checked pseudo-class selector reacts to the checkbox input’s state, while the sibling combinator makes it possible to apply the styles on the separate fake checkbox element.</p>

<pre><code><span>input:checked ~ span</span> <span>{</span>
  <span>background-color</span><span>:</span> red<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>45deg<span>)</span><span>;</span>
<span>}</span></code></pre>

<p>Custom checkboxes! Easy.</p>

<h3 id="action-at-a-distance">Action at a distance</h3>

<p>The sibling combinator has uses beyond styling boxes next to inputs. We can perform some “action at a distance”. For example, if you can tick the following “Is it raining” checkbox, the distant “Advice” box reacts:</p>
<input type="checkbox" id="demo2_input"><label for="demo2_input">Is it raining?</label>
<p>As you know, when it rains, water falls down from the sky. This may cause undesired wetness. An umbrella is a device which shields the user from falling particles such as the aforementioned rainwater.</p>
<fieldset>
                <legend>Advice</legend>
                <span>Take an umbrella today!</span>
                <span>No need for an umbrella!</span>
              </fieldset>
<pre><code><span>input:checked ~ .advice .take-umbrella</span> <span>{</span>
    <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span>
<span>input:checked ~ .advice .no-umbrella</span> <span>{</span>
    <span>visibility</span><span>:</span> hidden<span>;</span>
<span>}</span></code></pre>

<p>As you’ll see later, the sibling combinator <code>~</code> can be very useful for these types of interactions.</p>

<h3 id="the-next-level">The next level</h3>

<p>Let’s make this system a lot more flexible.</p>

<p>Using the <code>&lt;label&gt;</code>’s <code>for</code> attribute, we can get even more action at a distance. We can make just about any kind of UI we want!</p>

<p>To demonstrate, I present… the weather-advice-o-matic! 🌈 Go ahead, press the button!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of CSS-only machine</pre>

<p>The way this generalises is that all the <code>&lt;input&gt;</code>s are placed at the very top of the document. These inputs represent the global state. We can use <code>&lt;label for=…</code> to control those inputs from anywhere, and sibling selectors to react to those inputs anywhere.</p>

<h3 id="or">OR</h3>

<p>A single button is not very exciting, is it? Let’s add another input and implement an <strong>OR</strong> construct to determine the output. That is, implement "if A or B then C".</p>

<p>In CSS this can be easily achieved by using a <strong>selector list</strong> (comma-separated selectors).</p>

<pre><code><span>input#raining:checked ~ .advice .take-umbrella,
input#sunny:checked ~ .advice .take-umbrella</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<p>Now, weather-advice-o-matic can make decisions based on two parameters!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of CSS-only machine</pre>

<p>(If RAINY or SUNNY then UMBRELLA)</p>

<h3 id="and">AND</h3>

<p>How about <strong>AND</strong>? We can implement an AND construct too. This involves chaining the inputs together in a single selector using sibling combinators.</p>

<pre><code><span>input#raining:checked ~ input#windy:checked ~ .advise .take-raincoat</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<p>What’s this? Weather-advice-o-matic can now make nuanced decisions! Wow! Careful, it might be sentient!!!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of CSS-only machine</pre>

<p>(If RAINY and WINDY then RAINCOAT)</p>

<p>Here’s a summary of what we have so far:</p>

<pre><code><span>/* if A or B then C */</span>
<span>A ~ C,
B ~ C</span> <span>{</span>
  C
<span>}</span>

<span>/* if A and B then C */</span>
<span>A ~ B ~ C</span> <span>{</span>
  C
<span>}</span></code></pre>

<p>Another basic computing operator aside from AND and OR is the <strong>NOT</strong> operator. We don’t really need that here, but for the record, there’s the <code>:not()</code> pseudo-class in CSS. You can figure that out.</p>

<h2 id="prototype-three-in-a-row">Prototype: Three-in-a-row</h2>

<p>As a proof of concept and precursor to tic-tac-toe, let’s look at this three-in-a-row game.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of three-in-a-row</pre>

<p>This is a 3x3 array of checkbox inputs. Internally, each box is numbered 1 to 9 starting from the top-left box going left-to-right row-wise.</p>

<p>Here are the rules for implementing the win condition in CSS:</p>

<pre><code><span>#1:checked ~ #2:checked ~ #3:checked ~ .win,
#4:checked ~ #5:checked ~ #6:checked ~ .win,
#7:checked ~ #8:checked ~ #9:checked ~ .win,
#1:checked ~ #4:checked ~ #7:checked ~ .win,
#2:checked ~ #5:checked ~ #8:checked ~ .win,
#3:checked ~ #6:checked ~ #9:checked ~ .win,
#1:checked ~ #5:checked ~ #9:checked ~ .win,
#3:checked ~ #5:checked ~ #7:checked ~ .win</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<p>Yes, it’s kinda hacky, but that is expected when you force logic into CSS. For comparison, the CSS for tic-tac-toe goes over 9000 lines! I never said it would be clean.</p>

<p>Anyway, these 8 lines correspond to the 8 possible ways to win the game. The 3-input AND rule (remember AND rules?) in each line covers <em>every possible winning combination</em>. The pseudocode in the comment helps illustrate this:</p>

<pre><code><span>/*
 * if
 *      ([#1 marked] and [#2 marked] and [#3 marked]) // top row
 *   or ([#4 marked] and [#5 marked] and [#6 marked]) // middle row
 *   or ([#7 marked] and [#8 marked] and [#9 marked]) // bottom row
 *   .
 *   :
 *   or ([#3 marked] and [#5 marked] and [#7 marked]) // upward diagonal
 * then
 *   [win]
 */</span>
<span>#1:checked ~ #2:checked ~ #3:checked ~ .win,
#4:checked ~ #5:checked ~ #6:checked ~ .win,
#7:checked ~ #8:checked ~ #9:checked ~ .win,
#1:checked ~ #4:checked ~ #7:checked ~ .win,
#2:checked ~ #5:checked ~ #8:checked ~ .win,
#3:checked ~ #6:checked ~ #9:checked ~ .win,
#1:checked ~ #5:checked ~ #9:checked ~ .win,
#3:checked ~ #5:checked ~ #7:checked ~ .win</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<h2 id="taking-turns">Taking turns</h2>

<p>So far, the order of your inputs doesn’t matter. You can even undo your inputs by unchecking the boxes (Try it above). That won’t fly in a game of tic-tac-toe, where we take turns incrementally marking the board. No backsies!</p>

<p>We need a way to <strong>“consume”</strong> inputs. We can do this by hiding the inputs or otherwise making them unclickable. This is just a trick, of course, as we can’t really disable inputs using CSS. But it works fine for the typical mouse and touch users.</p>

<p>So for tic-tac-toe, what I did was define multiple sets of the 3x3 input board, that is, one set of inputs for each turn.</p>

<video muted="" autoplay="" loop="" aria-label="input sets illustration">
                <source src="https://leanrada.com/notes/pure-css-tictactoe-ai/input_sets.mp4?ref=rss">
                <a href="https://leanrada.com/notes/pure-css-tictactoe-ai/input_sets.mp4?ref=rss">input sets illustration</a>
              </video>

<p>Stacked on top of each other, each set is only interactable on its turn.</p>

<pre><code><span>/* Disable turn 1 inputs when turn 1 is played */</span>
<span>input[name="turn_1"]:checked ~ input[name="turn_1"]</span> <span>{</span>
    <span>pointer-events</span><span>:</span> none<span>;</span>
<span>}</span>
<span>/* Enable next turn's inputs */</span>
<span>input[name="turn_1"]:checked ~ input[name="turn_2"]</span> <span>{</span>
    <span>pointer-events</span><span>:</span> all<span>;</span>
<span>}</span>
<span>/* And so on... */</span></code></pre>

<p>Here’s little a demo of sequential inputs:</p>

<p><span>I was only able to implement up to three turns here. The exponential growth of rules has gotten really tedious to write!</span></p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of three-in-a-row</pre>

<p>With the power of sequencing, we’re starting to recreate the power of state machines and procedural programming!</p>

<img srcset="/notes/pure-css-tictactoe-ai/meme_500.generated.jpg 500w,/notes/pure-css-tictactoe-ai/meme_664.generated.jpg 664w" sizes="not (min-width:664px) 500px, 664px" alt="Look What They Need To Mimic A Fraction Of Our Power meme" src="https://leanrada.com/notes/pure-css-tictactoe-ai/meme.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<h2 id="game-ai">Game AI</h2>
<span>
              I’m referring to the more specific term “game AI” here, because the term “AI” has come to mean some learning machine nowadays. Game AI simply means NPCs or computer-controlled agents.
            </span>
<p>Tic-tac-toe is a <a target="_blank" href="https://en.wikipedia.org/wiki/Solved_game">solved game</a>, which means there exists a perfect strategy. For every move, there is a known optimal counter move.</p>

<p>This is perfect for CSS as it’s just a bunch of static declarations. We can list all of the optimal moves and directly translate them into CSS declarations!</p>

<p>As a side-effect, the AI would never lose. But that’s not a bad thing at all. Here, the CSS will style on you.</p>

<p>The rules are essentially a bunch of if-then statements for every scenario. Here are a couple of them:</p>

<h3 id="blocking">Blocking</h3>

<p>Example rule: <em>If <strong>X(1)</strong> and <strong>X(2)</strong> then <strong>O(3)</strong>.</em></p>

<p>In English, if an X was played at box #1 (top-left) and another X is at #2 (top-center), then block the top row by playing O at box #3 (top-right).</p>

<p>(In these examples, X is the player and O is the AI.)</p>

<p>In CSS, that translates to:</p>

<pre><code><span>input[value="1"]:checked
~ input[value="2"]:checked
~ .o3</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>,</span>
<span>}</span></code></pre>

<video muted="" autoplay="" loop="" aria-label="blocking rule animation">
                <source src="https://leanrada.com/notes/pure-css-tictactoe-ai/blocking.mp4?ref=rss">
                <a href="https://leanrada.com/notes/pure-css-tictactoe-ai/blocking.mp4?ref=rss">blocking rule animation</a>
              </video>

<h3 id="winning-moves">Winning moves</h3>

<p>Another example: <em>If <strong>O(3)</strong> and <strong>O(7)</strong> then <strong>O(5)</strong>.</em></p>

<p>If O is at box #3 (top-right) and another O is at #7 (bottom-left), then win diagonally by playing O at box #5 (center).</p>

<p>Now, this rule needs knowledge of the AI’s previous moves, but the AI’s moves aren’t inputs! The AI’s state is not encoded in the checkboxes.</p>

<p>But since the AI is deterministic, we already know how those previous <em>O</em>s came about. They’re just responses to previous inputs as defined in previous rules! So, for example, we can substitute <strong>O(3)</strong> with the inputs that produced it, such as <strong>X(1)</strong> &amp; <strong>X(2)</strong>.</p>

<pre><code><span>/* We know X(1) and X(2) produces O(3), */</span>
<span>/*     and X(1) and X(4) produces O(7). */</span>
<span>/* Therefore, X(1) &amp; X(2) &amp; X(4) is equivalent to O(3) &amp; O(7). */</span>

<span>/* 'if X(1) &amp; X(2) &amp; X(4) then O(5)' is a winning move! */</span>
<span>input[value="1"]:checked
~ input[value="2"]:checked
~ input[value="4"]:checked
.o5</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>,</span>
<span>}</span></code></pre>

<p>
              <span>
                ⚠️ Warning: I’m skipping major details in these code examples, like the existence of turn order, but it doesn’t really change the essence of these illustrations.
              </span>
            </p>

<p>Alright, so the game AI is really just a bunch of if-statements of the form <em>“if [inputs leading up to a scenario], then [show optimal response]”</em>, <strong>for every scenario</strong>. How do we find all the possible scenarios and corresponding optimal moves? Is there a list of all the optimal moves somewhere, like a cheatsheet?</p>

<p>Actually, there is one, but it’s for humans.</p>
<a target="_blank" href="https://xkcd.com/832/">
              <div>
                <img alt="" src="https://imgs.xkcd.com/comics/tic_tac_toe.png" loading="lazy"><span>xkcd/832</span>
              </div>
            </a>
<p>It’s not really feasible to write rules based on this by hand, unless you have more than 60,480 hours to spare.</p>

<p>What I did was write some kind of <a target="_blank" href="https://en.wikipedia.org/wiki/Minimax">minimax algorithm</a> to generate all the rules. The algorithm semi-exhaustively searched the game state space, while recording the moves that lead to a win or a draw, and saved those moves as rules.</p>

<p>I lost the original code (trashed it after finishing the project), but here’s an untested recreation of the algorithm:</p>

<pre><code><span>/**
 * Evaluates a game state having these parameters: last plays of player X,
 * the player who has the current turn, and the current board state.
 *
 * Along the way, prints CSS rules for O's plays.
 *
 * Returns the endgame for O: WIN, LOSS, or a DRAW. Assuming optimal play.
 */</span>
<span>function</span> <span>evaluate</span><span>(</span>xPlays<span>:</span> number<span>[</span><span>]</span><span>,</span> <span>currentTurn</span><span>:</span> <span>'X'</span> <span>|</span> <span>'O'</span><span>,</span> <span>board</span><span>:</span> <span>(</span><span>'X'</span> <span>|</span> <span>'O'</span> <span>|</span> <span>null</span><span>)</span><span>[</span><span>]</span><span>)</span> <span>{</span>

  <span>// checkWinner checks for a 3-in-a-row and returns the winner.</span>
  <span>let</span> winner <span>=</span> <span>checkWinner</span><span>(</span>board<span>)</span>
  <span>if</span> <span>(</span>winner <span>==</span> <span>'X'</span><span>)</span> <span>return</span> <span>LOSS</span>
  <span>else</span> <span>if</span> <span>(</span>winner <span>==</span> <span>'O'</span><span>)</span> <span>return</span> <span>WIN</span>
  <span>else</span> <span>if</span> <span>(</span>xPlays<span>.</span>length <span>==</span> <span>5</span><span>)</span> <span>return</span> <span>DRAW</span> <span>// Board full (5 Xs implies 4 Os)</span>


  <span>if</span> <span>(</span>currentTurn <span>==</span> <span>'O'</span><span>)</span> <span>{</span>
    <span>// Brute-force find the optimal play for O</span>
    <span>let</span> optimal <span>=</span> <span>null</span>
    <span>let</span> winnable <span>=</span> <span>false</span>
    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>9</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>board<span>[</span>i<span>]</span><span>)</span> <span>continue</span>

      board<span>[</span>i<span>]</span> <span>=</span> <span>'O'</span>
      <span>const</span> result <span>=</span> <span>evaluate</span><span>(</span>xPlays<span>,</span> <span>'X'</span><span>,</span> board<span>)</span>
      board<span>[</span>i<span>]</span> <span>=</span> <span>null</span>

      <span>if</span> <span>(</span>result <span>==</span> <span>DRAW</span><span>)</span> <span>{</span>
        <span>// This play will lead to a draw. Save it for now.</span>
        optimal <span>=</span> i
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>result <span>==</span> <span>WIN</span><span>)</span> <span>{</span>
        <span>// This play will lead to a win. This is it.</span>
        optimal <span>=</span> i
        winnable <span>=</span> <span>true</span>
        <span>break</span>
      <span>}</span> <span>// No else. Discard play that would lead to LOSS.</span>
    <span>}</span>

    <span>if</span> <span>(</span>optimal <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>// No winning play nor draws found. All paths lead to loss.</span>
      <span>return</span> <span>LOSS</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>// Optimal play found. Print rule.</span>
      <span>printCSS</span><span>(</span>xPlays<span>,</span> optimal<span>)</span>
      <span>return</span> winnable <span>?</span> <span>WIN</span> <span>:</span> <span>DRAW</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span> <span>// currentTurn == 'X'</span>
    <span>// We don't know what the player would play</span>
    <span>// So evaluate every possibe play</span>
    <span>let</span> loseable <span>=</span> <span>false</span>
    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>9</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>board<span>[</span>i<span>]</span><span>)</span> <span>continue</span>

      board<span>[</span>i<span>]</span> <span>=</span> <span>'X'</span>
      <span>const</span> result <span>=</span> <span>evaluate</span><span>(</span><span>[</span><span>...</span>xPlays<span>,</span> i<span>]</span><span>,</span> <span>'O'</span><span>,</span> board<span>)</span>
      board<span>[</span>i<span>]</span> <span>=</span> <span>null</span>

      <span>if</span> <span>(</span>result <span>==</span> <span>LOSS</span><span>)</span> loseable <span>=</span> <span>true</span>
    <span>}</span>

    <span>// Assume player plays optimally. If they can win from current state,</span>
    <span>// then immediately presume LOSS. This will factor into O's turn evaluation</span>
    <span>// above, where any play that leads to LOSS is discarded.</span>
    <span>if</span> <span>(</span>loseable<span>)</span> <span>return</span> <span>LOSS</span>

    <span>// Not loseable, either winnable or drawable.</span>
    <span>// Returning DRAW allows both paths to be evaluated.</span>
    <span>return</span> <span>DRAW</span>
  <span>}</span>
<span>}</span></code></pre>

<p>And here’s the function that outputs CSS for a given rule:</p>

<pre><code><span>/**
 * Print CSS rule for the given game state and O's next play.
 */</span>
<span>function</span> <span>printCSS</span><span>(</span><span><span>xPlays</span><span>:</span> number<span>[</span><span>]</span><span>,</span> <span>oPlay</span><span>:</span> number</span><span>)</span> <span>{</span>
  css <span>+=</span> xPlays
    <span>.</span><span>map</span><span>(</span><span>(</span><span>pos<span>,</span> turn</span><span>)</span> <span>=&gt;</span>
        <span><span>`</span><span>input[name='turn_</span><span><span>${</span>turn<span>}</span></span><span>'][value='</span><span><span>${</span>pos<span>}</span></span><span>']:checked</span><span>`</span></span><span>)</span>
    <span>.</span><span>join</span><span>(</span><span>' ~ '</span><span>)</span>
    <span>+</span> <span><span>`</span><span> ~ .o</span><span><span>${</span>oPlay<span>}</span></span><span>`</span></span>
    <span>+</span> <span>' { visibility: visible; }'</span>
<span>}</span></code></pre>

<p>The CSS output is directly used in the game. Debugging this was a pain, but luckily I only got a couple of miscalculations (if I recall correctly).</p>

<h2 id="conclusion">Conclusion</h2>

<p>It was a very interesting project. I’m curious how far CSS machines like this could go. A JS to CSS transpiler, perhaps?</p>
<span>
              <strong>See also:</strong> <a target="_blank" href="https://silon.slaks.net/">silon.slaks.net - Adders and logic gates in pure CSS</a> (I found this after writing this article)
            </span>
<p>This project serves as a reminder that there are always new and exciting ways to waste our time doing impractical things, and that sometimes fun solutions come from thinking outside of the (check)box.</p>

<p><a target="_blank" href="https://codepen.io/kalabasa/pen/oVMOZK">Here’s the link to the CodePen!</a>
            </p>
]]></description>
            <link>https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss</guid>
            <pubDate>Fri, 05 May 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pure CSS tic-tac-toe with game AI]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">original post on leanrada.com</a>.</em></p>

<p>As a software developer, I’m always looking for new and fun ways to challenge myself. Some time ago, I decided to implement tic-tac-toe with AI using only <strong>HTML</strong> and <strong>CSS</strong>. That is, no JavaScript! I already knew about the possibility of advanced CSS interactions (e.g. fancy checkboxes), but I wanted to see how far I could take it.</p>

<p>Here’s a CodePen of it! Can you beat a style sheet in a game of tic-tac-toe?</p>

<p data-height="700" data-theme-id="dark" data-default-tab="result" data-slug-hash="oVMOZK" data-user="kalabasa">
              <span>See the Pen <a href="https://codepen.io/kalabasa/pen/oVMOZK">
                  Pure CSS Tic Tac Toe AI</a> by Kalabasa (<a href="https://codepen.io/kalabasa">@kalabasa</a>)
                on <a href="https://codepen.io">CodePen</a>.</span>
            </p>

<p>In this post, I’ll write about the steps I took to make it, starting with the fundamentals.</p>
<span>
              Disclaimer: This was an experiment only. Never do this in production code!
            </span>
<h2 id="building-blocks">Building blocks</h2>

<p>Before starting to build anything complex, it’s important to start small and think about the basic elements. Unlike JavaScript, HTML and CSS are declarative languages. We can’t have procedures or functions, control flow, if-statements, and the like. Instead what we have are markup and rules. We’ll build upon these rules to create complex game logic.</p>

<p>For starters, let’s do something that’s fairly common on the web: <strong>custom checkbox styles</strong>.</p>
<label><input type="checkbox"><span></span> Check this out</label><small>(Hey, these demos are interactive!)</small>
<p>To do this, we need an extra element for the checkbox visuals, like an empty span element.</p>

<pre><code><span><span><span>&lt;</span>label</span><span>&gt;</span></span>
  <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>"</span>checkbox<span>"</span></span> <span>/&gt;</span></span> <span><span><span>&lt;</span>span</span><span>&gt;</span></span><span><span><span>&lt;/</span>span</span><span>&gt;</span></span> Check this out
<span><span><span>&lt;/</span>label</span><span>&gt;</span></span></code></pre>

<p>On the CSS side, the real checkbox input is hidden, while the span is styled as a checkbox in its stead.</p>

<p>Now here’s the important part, we’ll use the <code>:checked</code> pseudo-class and the <strong>sibling combinator</strong> <code>~</code> to make it all work. The checked pseudo-class selector reacts to the checkbox input’s state, while the sibling combinator makes it possible to apply the styles on the separate fake checkbox element.</p>

<pre><code><span>input:checked ~ span</span> <span>{</span>
  <span>background-color</span><span>:</span> red<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>45deg<span>)</span><span>;</span>
<span>}</span></code></pre>

<p>Custom checkboxes! Easy.</p>

<h3 id="action-at-a-distance">Action at a distance</h3>

<p>The sibling combinator has uses beyond styling boxes next to inputs. We can perform some “action at a distance”. For example, if you can tick the following “Is it raining” checkbox, the distant “Advice” box reacts:</p>
<input type="checkbox" id="demo2_input"><label for="demo2_input">Is it raining?</label>
<p>As you know, when it rains, water falls down from the sky. This may cause undesired wetness. An umbrella is a device which shields the user from falling particles such as the aforementioned rainwater.</p>
<fieldset>
                <legend>Advice</legend>
                <span>Take an umbrella today!</span>
                <span>No need for an umbrella!</span>
              </fieldset>
<pre><code><span>input:checked ~ .advice .take-umbrella</span> <span>{</span>
    <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span>
<span>input:checked ~ .advice .no-umbrella</span> <span>{</span>
    <span>visibility</span><span>:</span> hidden<span>;</span>
<span>}</span></code></pre>

<p>As you’ll see later, the sibling combinator <code>~</code> can be very useful for these types of interactions.</p>

<h3 id="the-next-level">The next level</h3>

<p>Let’s make this system a lot more flexible.</p>

<p>Using the <code>&lt;label&gt;</code>’s <code>for</code> attribute, we can get even more action at a distance. We can make just about any kind of UI we want!</p>

<p>To demonstrate, I present… the weather-advice-o-matic! 🌈 Go ahead, press the button!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of CSS-only machine</pre>

<p>The way this generalises is that all the <code>&lt;input&gt;</code>s are placed at the very top of the document. These inputs represent the global state. We can use <code>&lt;label for=…</code> to control those inputs from anywhere, and sibling selectors to react to those inputs anywhere.</p>

<h3 id="or">OR</h3>

<p>A single button is not very exciting, is it? Let’s add another input and implement an <strong>OR</strong> construct to determine the output. That is, implement "if A or B then C".</p>

<p>In CSS this can be easily achieved by using a <strong>selector list</strong> (comma-separated selectors).</p>

<pre><code><span>input#raining:checked ~ .advice .take-umbrella,
input#sunny:checked ~ .advice .take-umbrella</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<p>Now, weather-advice-o-matic can make decisions based on two parameters!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of CSS-only machine</pre>

<p>(If RAINY or SUNNY then UMBRELLA)</p>

<h3 id="and">AND</h3>

<p>How about <strong>AND</strong>? We can implement an AND construct too. This involves chaining the inputs together in a single selector using sibling combinators.</p>

<pre><code><span>input#raining:checked ~ input#windy:checked ~ .advise .take-raincoat</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<p>What’s this? Weather-advice-o-matic can now make nuanced decisions! Wow! Careful, it might be sentient!!!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: demo of CSS-only machine</pre>

<p>(If RAINY and WINDY then RAINCOAT)</p>

<p>Here’s a summary of what we have so far:</p>

<pre><code><span>/* if A or B then C */</span>
<span>A ~ C,
B ~ C</span> <span>{</span>
  C
<span>}</span>

<span>/* if A and B then C */</span>
<span>A ~ B ~ C</span> <span>{</span>
  C
<span>}</span></code></pre>

<p>Another basic computing operator aside from AND and OR is the <strong>NOT</strong> operator. We don’t really need that here, but for the record, there’s the <code>:not()</code> pseudo-class in CSS. You can figure that out.</p>

<h2 id="prototype-three-in-a-row">Prototype: Three-in-a-row</h2>

<p>As a proof of concept and precursor to tic-tac-toe, let’s look at this three-in-a-row game.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of three-in-a-row</pre>

<p>This is a 3x3 array of checkbox inputs. Internally, each box is numbered 1 to 9 starting from the top-left box going left-to-right row-wise.</p>

<p>Here are the rules for implementing the win condition in CSS:</p>

<pre><code><span>#1:checked ~ #2:checked ~ #3:checked ~ .win,
#4:checked ~ #5:checked ~ #6:checked ~ .win,
#7:checked ~ #8:checked ~ #9:checked ~ .win,
#1:checked ~ #4:checked ~ #7:checked ~ .win,
#2:checked ~ #5:checked ~ #8:checked ~ .win,
#3:checked ~ #6:checked ~ #9:checked ~ .win,
#1:checked ~ #5:checked ~ #9:checked ~ .win,
#3:checked ~ #5:checked ~ #7:checked ~ .win</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<p>Yes, it’s kinda hacky, but that is expected when you force logic into CSS. For comparison, the CSS for tic-tac-toe goes over 9000 lines! I never said it would be clean.</p>

<p>Anyway, these 8 lines correspond to the 8 possible ways to win the game. The 3-input AND rule (remember AND rules?) in each line covers <em>every possible winning combination</em>. The pseudocode in the comment helps illustrate this:</p>

<pre><code><span>/*
 * if
 *      ([#1 marked] and [#2 marked] and [#3 marked]) // top row
 *   or ([#4 marked] and [#5 marked] and [#6 marked]) // middle row
 *   or ([#7 marked] and [#8 marked] and [#9 marked]) // bottom row
 *   .
 *   :
 *   or ([#3 marked] and [#5 marked] and [#7 marked]) // upward diagonal
 * then
 *   [win]
 */</span>
<span>#1:checked ~ #2:checked ~ #3:checked ~ .win,
#4:checked ~ #5:checked ~ #6:checked ~ .win,
#7:checked ~ #8:checked ~ #9:checked ~ .win,
#1:checked ~ #4:checked ~ #7:checked ~ .win,
#2:checked ~ #5:checked ~ #8:checked ~ .win,
#3:checked ~ #6:checked ~ #9:checked ~ .win,
#1:checked ~ #5:checked ~ #9:checked ~ .win,
#3:checked ~ #5:checked ~ #7:checked ~ .win</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>;</span>
<span>}</span></code></pre>

<h2 id="taking-turns">Taking turns</h2>

<p>So far, the order of your inputs doesn’t matter. You can even undo your inputs by unchecking the boxes (Try it above). That won’t fly in a game of tic-tac-toe, where we take turns incrementally marking the board. No backsies!</p>

<p>We need a way to <strong>“consume”</strong> inputs. We can do this by hiding the inputs or otherwise making them unclickable. This is just a trick, of course, as we can’t really disable inputs using CSS. But it works fine for the typical mouse and touch users.</p>

<p>So for tic-tac-toe, what I did was define multiple sets of the 3x3 input board, that is, one set of inputs for each turn.</p>

<video muted="" autoplay="" loop="" aria-label="input sets illustration">
                <source src="https://leanrada.com/notes/pure-css-tictactoe-ai/input_sets.mp4?ref=rss">
                <a href="https://leanrada.com/notes/pure-css-tictactoe-ai/input_sets.mp4?ref=rss">input sets illustration</a>
              </video>

<p>Stacked on top of each other, each set is only interactable on its turn.</p>

<pre><code><span>/* Disable turn 1 inputs when turn 1 is played */</span>
<span>input[name="turn_1"]:checked ~ input[name="turn_1"]</span> <span>{</span>
    <span>pointer-events</span><span>:</span> none<span>;</span>
<span>}</span>
<span>/* Enable next turn's inputs */</span>
<span>input[name="turn_1"]:checked ~ input[name="turn_2"]</span> <span>{</span>
    <span>pointer-events</span><span>:</span> all<span>;</span>
<span>}</span>
<span>/* And so on... */</span></code></pre>

<p>Here’s little a demo of sequential inputs:</p>

<p><span>I was only able to implement up to three turns here. The exponential growth of rules has gotten really tedious to write!</span></p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive demo of three-in-a-row</pre>

<p>With the power of sequencing, we’re starting to recreate the power of state machines and procedural programming!</p>

<img srcset="/notes/pure-css-tictactoe-ai/meme_500.generated.jpg 500w,/notes/pure-css-tictactoe-ai/meme_664.generated.jpg 664w" sizes="not (min-width:664px) 500px, 664px" alt="Look What They Need To Mimic A Fraction Of Our Power meme" src="https://leanrada.com/notes/pure-css-tictactoe-ai/meme.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<h2 id="game-ai">Game AI</h2>
<span>
              I’m referring to the more specific term “game AI” here, because the term “AI” has come to mean some learning machine nowadays. Game AI simply means NPCs or computer-controlled agents.
            </span>
<p>Tic-tac-toe is a <a target="_blank" href="https://en.wikipedia.org/wiki/Solved_game">solved game</a>, which means there exists a perfect strategy. For every move, there is a known optimal counter move.</p>

<p>This is perfect for CSS as it’s just a bunch of static declarations. We can list all of the optimal moves and directly translate them into CSS declarations!</p>

<p>As a side-effect, the AI would never lose. But that’s not a bad thing at all. Here, the CSS will style on you.</p>

<p>The rules are essentially a bunch of if-then statements for every scenario. Here are a couple of them:</p>

<h3 id="blocking">Blocking</h3>

<p>Example rule: <em>If <strong>X(1)</strong> and <strong>X(2)</strong> then <strong>O(3)</strong>.</em></p>

<p>In English, if an X was played at box #1 (top-left) and another X is at #2 (top-center), then block the top row by playing O at box #3 (top-right).</p>

<p>(In these examples, X is the player and O is the AI.)</p>

<p>In CSS, that translates to:</p>

<pre><code><span>input[value="1"]:checked
~ input[value="2"]:checked
~ .o3</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>,</span>
<span>}</span></code></pre>

<video muted="" autoplay="" loop="" aria-label="blocking rule animation">
                <source src="https://leanrada.com/notes/pure-css-tictactoe-ai/blocking.mp4?ref=rss">
                <a href="https://leanrada.com/notes/pure-css-tictactoe-ai/blocking.mp4?ref=rss">blocking rule animation</a>
              </video>

<h3 id="winning-moves">Winning moves</h3>

<p>Another example: <em>If <strong>O(3)</strong> and <strong>O(7)</strong> then <strong>O(5)</strong>.</em></p>

<p>If O is at box #3 (top-right) and another O is at #7 (bottom-left), then win diagonally by playing O at box #5 (center).</p>

<p>Now, this rule needs knowledge of the AI’s previous moves, but the AI’s moves aren’t inputs! The AI’s state is not encoded in the checkboxes.</p>

<p>But since the AI is deterministic, we already know how those previous <em>O</em>s came about. They’re just responses to previous inputs as defined in previous rules! So, for example, we can substitute <strong>O(3)</strong> with the inputs that produced it, such as <strong>X(1)</strong> &amp; <strong>X(2)</strong>.</p>

<pre><code><span>/* We know X(1) and X(2) produces O(3), */</span>
<span>/*     and X(1) and X(4) produces O(7). */</span>
<span>/* Therefore, X(1) &amp; X(2) &amp; X(4) is equivalent to O(3) &amp; O(7). */</span>

<span>/* 'if X(1) &amp; X(2) &amp; X(4) then O(5)' is a winning move! */</span>
<span>input[value="1"]:checked
~ input[value="2"]:checked
~ input[value="4"]:checked
.o5</span> <span>{</span>
  <span>visibility</span><span>:</span> visible<span>,</span>
<span>}</span></code></pre>

<p>
              <span>
                ⚠️ Warning: I’m skipping major details in these code examples, like the existence of turn order, but it doesn’t really change the essence of these illustrations.
              </span>
            </p>

<p>Alright, so the game AI is really just a bunch of if-statements of the form <em>“if [inputs leading up to a scenario], then [show optimal response]”</em>, <strong>for every scenario</strong>. How do we find all the possible scenarios and corresponding optimal moves? Is there a list of all the optimal moves somewhere, like a cheatsheet?</p>

<p>Actually, there is one, but it’s for humans.</p>
<a target="_blank" href="https://xkcd.com/832/">
              <div>
                <img alt="" src="https://imgs.xkcd.com/comics/tic_tac_toe.png" loading="lazy"><span>xkcd/832</span>
              </div>
            </a>
<p>It’s not really feasible to write rules based on this by hand, unless you have more than 60,480 hours to spare.</p>

<p>What I did was write some kind of <a target="_blank" href="https://en.wikipedia.org/wiki/Minimax">minimax algorithm</a> to generate all the rules. The algorithm semi-exhaustively searched the game state space, while recording the moves that lead to a win or a draw, and saved those moves as rules.</p>

<p>I lost the original code (trashed it after finishing the project), but here’s an untested recreation of the algorithm:</p>

<pre><code><span>/**
 * Evaluates a game state having these parameters: last plays of player X,
 * the player who has the current turn, and the current board state.
 *
 * Along the way, prints CSS rules for O's plays.
 *
 * Returns the endgame for O: WIN, LOSS, or a DRAW. Assuming optimal play.
 */</span>
<span>function</span> <span>evaluate</span><span>(</span>xPlays<span>:</span> number<span>[</span><span>]</span><span>,</span> <span>currentTurn</span><span>:</span> <span>'X'</span> <span>|</span> <span>'O'</span><span>,</span> <span>board</span><span>:</span> <span>(</span><span>'X'</span> <span>|</span> <span>'O'</span> <span>|</span> <span>null</span><span>)</span><span>[</span><span>]</span><span>)</span> <span>{</span>

  <span>// checkWinner checks for a 3-in-a-row and returns the winner.</span>
  <span>let</span> winner <span>=</span> <span>checkWinner</span><span>(</span>board<span>)</span>
  <span>if</span> <span>(</span>winner <span>==</span> <span>'X'</span><span>)</span> <span>return</span> <span>LOSS</span>
  <span>else</span> <span>if</span> <span>(</span>winner <span>==</span> <span>'O'</span><span>)</span> <span>return</span> <span>WIN</span>
  <span>else</span> <span>if</span> <span>(</span>xPlays<span>.</span>length <span>==</span> <span>5</span><span>)</span> <span>return</span> <span>DRAW</span> <span>// Board full (5 Xs implies 4 Os)</span>


  <span>if</span> <span>(</span>currentTurn <span>==</span> <span>'O'</span><span>)</span> <span>{</span>
    <span>// Brute-force find the optimal play for O</span>
    <span>let</span> optimal <span>=</span> <span>null</span>
    <span>let</span> winnable <span>=</span> <span>false</span>
    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>9</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>board<span>[</span>i<span>]</span><span>)</span> <span>continue</span>

      board<span>[</span>i<span>]</span> <span>=</span> <span>'O'</span>
      <span>const</span> result <span>=</span> <span>evaluate</span><span>(</span>xPlays<span>,</span> <span>'X'</span><span>,</span> board<span>)</span>
      board<span>[</span>i<span>]</span> <span>=</span> <span>null</span>

      <span>if</span> <span>(</span>result <span>==</span> <span>DRAW</span><span>)</span> <span>{</span>
        <span>// This play will lead to a draw. Save it for now.</span>
        optimal <span>=</span> i
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>result <span>==</span> <span>WIN</span><span>)</span> <span>{</span>
        <span>// This play will lead to a win. This is it.</span>
        optimal <span>=</span> i
        winnable <span>=</span> <span>true</span>
        <span>break</span>
      <span>}</span> <span>// No else. Discard play that would lead to LOSS.</span>
    <span>}</span>

    <span>if</span> <span>(</span>optimal <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>// No winning play nor draws found. All paths lead to loss.</span>
      <span>return</span> <span>LOSS</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>// Optimal play found. Print rule.</span>
      <span>printCSS</span><span>(</span>xPlays<span>,</span> optimal<span>)</span>
      <span>return</span> winnable <span>?</span> <span>WIN</span> <span>:</span> <span>DRAW</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span> <span>// currentTurn == 'X'</span>
    <span>// We don't know what the player would play</span>
    <span>// So evaluate every possibe play</span>
    <span>let</span> loseable <span>=</span> <span>false</span>
    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>9</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>board<span>[</span>i<span>]</span><span>)</span> <span>continue</span>

      board<span>[</span>i<span>]</span> <span>=</span> <span>'X'</span>
      <span>const</span> result <span>=</span> <span>evaluate</span><span>(</span><span>[</span><span>...</span>xPlays<span>,</span> i<span>]</span><span>,</span> <span>'O'</span><span>,</span> board<span>)</span>
      board<span>[</span>i<span>]</span> <span>=</span> <span>null</span>

      <span>if</span> <span>(</span>result <span>==</span> <span>LOSS</span><span>)</span> loseable <span>=</span> <span>true</span>
    <span>}</span>

    <span>// Assume player plays optimally. If they can win from current state,</span>
    <span>// then immediately presume LOSS. This will factor into O's turn evaluation</span>
    <span>// above, where any play that leads to LOSS is discarded.</span>
    <span>if</span> <span>(</span>loseable<span>)</span> <span>return</span> <span>LOSS</span>

    <span>// Not loseable, either winnable or drawable.</span>
    <span>// Returning DRAW allows both paths to be evaluated.</span>
    <span>return</span> <span>DRAW</span>
  <span>}</span>
<span>}</span></code></pre>

<p>And here’s the function that outputs CSS for a given rule:</p>

<pre><code><span>/**
 * Print CSS rule for the given game state and O's next play.
 */</span>
<span>function</span> <span>printCSS</span><span>(</span><span><span>xPlays</span><span>:</span> number<span>[</span><span>]</span><span>,</span> <span>oPlay</span><span>:</span> number</span><span>)</span> <span>{</span>
  css <span>+=</span> xPlays
    <span>.</span><span>map</span><span>(</span><span>(</span><span>pos<span>,</span> turn</span><span>)</span> <span>=&gt;</span>
        <span><span>`</span><span>input[name='turn_</span><span><span>${</span>turn<span>}</span></span><span>'][value='</span><span><span>${</span>pos<span>}</span></span><span>']:checked</span><span>`</span></span><span>)</span>
    <span>.</span><span>join</span><span>(</span><span>' ~ '</span><span>)</span>
    <span>+</span> <span><span>`</span><span> ~ .o</span><span><span>${</span>oPlay<span>}</span></span><span>`</span></span>
    <span>+</span> <span>' { visibility: visible; }'</span>
<span>}</span></code></pre>

<p>The CSS output is directly used in the game. Debugging this was a pain, but luckily I only got a couple of miscalculations (if I recall correctly).</p>

<h2 id="conclusion">Conclusion</h2>

<p>It was a very interesting project. I’m curious how far CSS machines like this could go. A JS to CSS transpiler, perhaps?</p>
<span>
              <strong>See also:</strong> <a target="_blank" href="https://silon.slaks.net/">silon.slaks.net - Adders and logic gates in pure CSS</a> (I found this after writing this article)
            </span>
<p>This project serves as a reminder that there are always new and exciting ways to waste our time doing impractical things, and that sometimes fun solutions come from thinking outside of the (check)box.</p>

<p><a target="_blank" href="https://codepen.io/kalabasa/pen/oVMOZK">Here’s the link to the CodePen!</a>
            </p>
]]></description>
            <link>https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/pure-css-tictactoe-ai?ref=rss</guid>
            <pubDate>Fri, 05 May 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bitwise keyboard input method]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">original post on leanrada.com</a>.</em></p>

<p>This post is about how I achieved the power of 15 keys using just 4 keys on the keyboard. I go over the motivation, the design, and the implementation. At the end, I wrap the solution into a small library. Maybe you’ll find it useful!</p>

<h2 id="rationale">Rationale</h2>

<p>I use a compact keyboard called the <strong>Lily58</strong> as my main keyboard. It’s a column-staggered split keyboard.</p>

<img srcset="/notes/developing-bitwise-input-method/lily58_664.generated.jpg 664w" sizes=" 664px" alt="Photo of a Lily58 keyboard" src="https://leanrada.com/notes/developing-bitwise-input-method/lily58.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The Lily58 keyboard. Photo from github.com/kata0510/Lily58</span>
<p>As the name implies, it has only 58 buttons instead of the normal 80+ buttons. Space was limited and it was hard to fit all the letters, numbers, symbols, and other unique keys that I need.</p>

<p>The function keys (F1, F2, F3, etc) were particularly cumbersome. I don’t use them very often, yet they take a lot of space. You can see with my previous function key layout that they’re not very space-efficient:</p>

<img srcset="/notes/developing-bitwise-input-method/prevlayout_656.generated.png 656w,/notes/developing-bitwise-input-method/prevlayout_664.generated.png 664w" sizes="not (min-width:664px) 656px, 664px" alt="" src="https://leanrada.com/notes/developing-bitwise-input-method/prevlayout.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>My previous layout with function keys on the right half of the keyboard. It’s on a layer that I call the “function layer”.</span>
<p>Luckily, the Lily58 is <strong>programmable</strong>! Using the framework slash firmware called <a target="_blank" href="https://qmk.fm/">QMK</a>, I can program the keyboard to add whatever functionality I wanted. And that’s exactly how I optimized the function keys’ space usage.</p>

<h2 id="the-scheme">The scheme</h2>

<p>To make space for other keys, I devised a different way to input function keys, a <strong>bitwise input scheme</strong>. In this scheme, you input in terms of bits; there is one key for each bit. For example, take four keys; if we assign them to bits 1, 2, 4, and 8, we can represent any number from 0 to 15 by pressing a combination of those keys.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Interactive diagram! Click the buttons to toggle the corresponding bits.
<p>With 15 different combinations, we have more than enough inputs to cover the function keys! Each decimal number is directly mapped to a function key in a 1-to-1 correspondence. For example, pressing the bit combination for decimal 1 will input F1, pressing the combination for decimal 2 will input F2, and so on.</p>
<span>
              <p>Did you know that there are 24 function keys in total?</p>
              <p>These are the F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F18, F19, F20, F21, F22, F23, and F24 keys.</p>
              <p>Bit wise, we’d need just 5 bits - 5 keys to cover all 24 function keys.</p>
            </span>
<h2 id="implementation">Implementation</h2>

<p>So how does it work? Let’s dive into the practical details.</p>

<p>First of all, the implementation doesn’t care about timing, so you can press the buttons as sloppily as you want. The key thing is that the algorithm waits for you to release all the buttons before committing the resulting combination.</p>

<p>To do any of this, we need a way to keep track of the state of the bits. Let’s use an unsigned integer variable to store it.</p>

<p>When a button is pressed, its corresponding bit is set to 1. But when released, we do not necessarily clear the bit back to 0. There will be a separate mechanism for flushing the accumulated bits.</p>

<p>Let’s call the variable <code>accumulator</code>.</p>

<pre><code><span><span> </span> static uint8_t accumulator <span>=</span> <span>0</span><span>;</span>
</span>
<span><span> </span> void <span>on_press</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span> </span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span> </span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
</span>
<span><span> </span>   accumulator <span>|</span><span>=</span> <span>(</span><span>1</span> <span>&lt;</span><span>&lt;</span> index<span>)</span><span>;</span>
<span> </span> <span>}</span></span></code></pre>

<p>Now, the accumulated bits will only be evaluated when all of the buttons have been released. A quick way of knowing when that happens is to watch for the last button to be released. To do this, another integer variable tracks how many buttons are currently being pressed.</p>

<pre><code><span><span>+</span> <span>// Keep count of keys being pressed</span>
<span>+</span> static int8_t pressed_keys <span>=</span> <span>0</span><span>;</span>
</span><span><span> </span> static uint8_t accumulator <span>=</span> <span>0</span><span>;</span>
</span>
<span><span> </span> void <span>on_press</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span> </span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span> </span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
</span>
<span><span>+</span>   <span>// Count key being pressed</span>
<span>+</span>   pressed_keys<span>++</span><span>;</span>
<span>+</span>
</span><span><span> </span>   accumulator <span>|</span><span>=</span> <span>(</span><span>1</span> <span>&lt;</span><span>&lt;</span> index<span>)</span><span>;</span>
<span> </span> <span>}</span>
</span>
<span><span>+</span> void <span>on_release</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span>+</span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span>+</span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
<span>+</span>
<span>+</span>   <span>// Count key being released</span>
<span>+</span>   pressed_keys<span>--</span><span>;</span>
<span>+</span> <span>}</span></span></code></pre>

<p>Once the last button is released, it is time to flush the input. The resulting decimal number is mapped to a function key that will finally be sent to the computer.</p>

<pre><code><span><span> </span> void <span>on_release</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span> </span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span> </span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
</span>
<span><span> </span>   pressed_keys<span>--</span><span>;</span>
</span>
<span><span>+</span>   <span>// When all keys have been released, flush the input</span>
<span>+</span>   <span>if</span> <span>(</span>pressed_keys <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span>
<span>+</span>     <span>// Map accumulated value to the corresponding F-key code</span>
<span>+</span>     <span>send_to_computer</span><span>(</span>FUNCTION_KEYS<span>[</span>accumulator<span>]</span><span>)</span><span>;</span>
<span>+</span>
<span>+</span>     <span>// Reset state for next round</span>
<span>+</span>     pressed_keys <span>=</span> <span>0</span><span>;</span>
<span>+</span>     accumulator <span>=</span> <span>0</span><span>;</span>
<span>+</span>   <span>}</span>
</span><span><span> </span> <span>}</span></span></code></pre>

<p>And that’s about it! This is how I got more space on my keyboard. As a bonus, it forces me to practice converting decimal to binary! 😂</p>

<p>Of course, the code shown here skips some details and totally lacks integration with the QMK framework, but you get the gist.</p>

<p>There’s one limitation to this approach though: you cannot hold down a function key. It will only send the function key at the end when the last button has been released. I haven’t found a need to hold down function keys so it’s not a problem for me right now.</p>

<p>I recreated the algorithm in JavaScript/Web as a live demo here! Try it out!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Demo! You need to use a keyboard for this. Put your input focus on this box and start pressing combinations!
<p><span><strong>Update, 8 months later:</strong> Coming back to this post, I realise that not many people have finger independence and would not find the above combinatorial input very useful. Um, I guess it helps to play the piano. But I believe experienced typists would be able to use it too!</span></p>

<h2 id="how-to-get-it">How to get it</h2>

<p>If you use QMK you can easily integrate this with your own keymap. Here’s a step-by-step on how you may use this utility:</p>

<h3 id="step-1-define-the-bit-keys">Step 1: Define the bit keys.</h3>

<p>First, define the keys you want to use as bit input in an array called <code>bitwise_f_keys</code>.</p>

<p>For example, if you wanted to repurpose F1, F2, F3, and F4 to represent the four bits, write the following in your <code>keymap.c</code>:</p>

<pre><code>const uint16_t bitwise_f_keys<span>[</span><span>]</span> <span>=</span> <span>{</span> KC_F1<span>,</span> KC_F2<span>,</span> KC_F3<span>,</span> KC_F4 <span>}</span><span>;</span>
uint8_t NUM_BITWISE_F_KEYS <span>=</span>
    <span>sizeof</span><span>(</span>bitwise_f_keys<span>)</span> <span>/</span> <span>sizeof</span><span>(</span>uint16_t<span>)</span><span>;</span></code></pre>

<p>Note: <code>NUM_BITWISE_F_KEYS</code> is also required.</p>

<h3 id="step-2-hook-up-the-library">Step 2: Hook up the library.</h3>

<p>Hook it up by calling <code>process_bitwise_f()</code> at the top of your <code>process_record_user()</code>.</p>

<pre><code>bool <span>process_record_user</span><span>(</span>uint16_t keycode<span>,</span> keyrecord_t <span>*</span>record<span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>process_bitwise_f</span><span>(</span>keycode<span>,</span> record<span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>

  <span>/* ... */</span>

  <span>return</span> <span>true</span><span>;</span>
<span>}</span></code></pre>

<h3 id="step-3-include-the-library-in-your-project">Step 3: Include the library in your project.</h3>

<p>Finally, copy <a target="_blank" href="https://raw.githubusercontent.com/Kalabasa/qmk_firmware/2d1608287bb8b52669255266472975875f7c2423/keyboards/lily58/keymaps/Kalabasa/features/bitwise_f.h"><code>bitwise_f.h</code></a> and <a target="_blank" href="https://raw.githubusercontent.com/Kalabasa/qmk_firmware/2d1608287bb8b52669255266472975875f7c2423/keyboards/lily58/keymaps/Kalabasa/features/bitwise_f.c"><code>bitwise_f.c</code></a> into your keymap directory, and include <code>bitwise_f.c</code> in your <code>rules.mk</code> build file.</p>

<p>Don’t forget to <code>#include "dir/where/you/copied/bitwise_f.h"</code> in your <code>keymap.c</code>!</p>

<p><span>Props to reddit user u/hakbraley for helping improve the code!</span>
            </p>
]]></description>
            <link>https://leanrada.com/notes/developing-bitwise-input-method?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/developing-bitwise-input-method?ref=rss</guid>
            <pubDate>Thu, 16 Mar 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bitwise keyboard input method]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">original post on leanrada.com</a>.</em></p>

<p>This post is about how I achieved the power of 15 keys using just 4 keys on the keyboard. I go over the motivation, the design, and the implementation. At the end, I wrap the solution into a small library. Maybe you’ll find it useful!</p>

<h2 id="rationale">Rationale</h2>

<p>I use a compact keyboard called the <strong>Lily58</strong> as my main keyboard. It’s a column-staggered split keyboard.</p>

<img srcset="/notes/developing-bitwise-input-method/lily58_664.generated.jpg 664w" sizes=" 664px" alt="Photo of a Lily58 keyboard" src="https://leanrada.com/notes/developing-bitwise-input-method/lily58.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The Lily58 keyboard. Photo from github.com/kata0510/Lily58</span>
<p>As the name implies, it has only 58 buttons instead of the normal 80+ buttons. Space was limited and it was hard to fit all the letters, numbers, symbols, and other unique keys that I need.</p>

<p>The function keys (F1, F2, F3, etc) were particularly cumbersome. I don’t use them very often, yet they take a lot of space. You can see with my previous function key layout that they’re not very space-efficient:</p>

<img srcset="/notes/developing-bitwise-input-method/prevlayout_656.generated.png 656w,/notes/developing-bitwise-input-method/prevlayout_664.generated.png 664w" sizes="not (min-width:664px) 656px, 664px" alt="" src="https://leanrada.com/notes/developing-bitwise-input-method/prevlayout.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>My previous layout with function keys on the right half of the keyboard. It’s on a layer that I call the “function layer”.</span>
<p>Luckily, the Lily58 is <strong>programmable</strong>! Using the framework slash firmware called <a target="_blank" href="https://qmk.fm/">QMK</a>, I can program the keyboard to add whatever functionality I wanted. And that’s exactly how I optimized the function keys’ space usage.</p>

<h2 id="the-scheme">The scheme</h2>

<p>To make space for other keys, I devised a different way to input function keys, a <strong>bitwise input scheme</strong>. In this scheme, you input in terms of bits; there is one key for each bit. For example, take four keys; if we assign them to bits 1, 2, 4, and 8, we can represent any number from 0 to 15 by pressing a combination of those keys.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Interactive diagram! Click the buttons to toggle the corresponding bits.
<p>With 15 different combinations, we have more than enough inputs to cover the function keys! Each decimal number is directly mapped to a function key in a 1-to-1 correspondence. For example, pressing the bit combination for decimal 1 will input F1, pressing the combination for decimal 2 will input F2, and so on.</p>
<span>
              <p>Did you know that there are 24 function keys in total?</p>
              <p>These are the F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F18, F19, F20, F21, F22, F23, and F24 keys.</p>
              <p>Bit wise, we’d need just 5 bits - 5 keys to cover all 24 function keys.</p>
            </span>
<h2 id="implementation">Implementation</h2>

<p>So how does it work? Let’s dive into the practical details.</p>

<p>First of all, the implementation doesn’t care about timing, so you can press the buttons as sloppily as you want. The key thing is that the algorithm waits for you to release all the buttons before committing the resulting combination.</p>

<p>To do any of this, we need a way to keep track of the state of the bits. Let’s use an unsigned integer variable to store it.</p>

<p>When a button is pressed, its corresponding bit is set to 1. But when released, we do not necessarily clear the bit back to 0. There will be a separate mechanism for flushing the accumulated bits.</p>

<p>Let’s call the variable <code>accumulator</code>.</p>

<pre><code><span><span> </span> static uint8_t accumulator <span>=</span> <span>0</span><span>;</span>
</span>
<span><span> </span> void <span>on_press</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span> </span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span> </span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
</span>
<span><span> </span>   accumulator <span>|</span><span>=</span> <span>(</span><span>1</span> <span>&lt;</span><span>&lt;</span> index<span>)</span><span>;</span>
<span> </span> <span>}</span></span></code></pre>

<p>Now, the accumulated bits will only be evaluated when all of the buttons have been released. A quick way of knowing when that happens is to watch for the last button to be released. To do this, another integer variable tracks how many buttons are currently being pressed.</p>

<pre><code><span><span>+</span> <span>// Keep count of keys being pressed</span>
<span>+</span> static int8_t pressed_keys <span>=</span> <span>0</span><span>;</span>
</span><span><span> </span> static uint8_t accumulator <span>=</span> <span>0</span><span>;</span>
</span>
<span><span> </span> void <span>on_press</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span> </span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span> </span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
</span>
<span><span>+</span>   <span>// Count key being pressed</span>
<span>+</span>   pressed_keys<span>++</span><span>;</span>
<span>+</span>
</span><span><span> </span>   accumulator <span>|</span><span>=</span> <span>(</span><span>1</span> <span>&lt;</span><span>&lt;</span> index<span>)</span><span>;</span>
<span> </span> <span>}</span>
</span>
<span><span>+</span> void <span>on_release</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span>+</span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span>+</span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
<span>+</span>
<span>+</span>   <span>// Count key being released</span>
<span>+</span>   pressed_keys<span>--</span><span>;</span>
<span>+</span> <span>}</span></span></code></pre>

<p>Once the last button is released, it is time to flush the input. The resulting decimal number is mapped to a function key that will finally be sent to the computer.</p>

<pre><code><span><span> </span> void <span>on_release</span><span>(</span>uint16_t keycode<span>)</span> <span>{</span>
<span> </span>   int index <span>=</span> <span>get_bit_index</span><span>(</span>keycode<span>)</span><span>;</span>
<span> </span>   <span>if</span> <span>(</span>index <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span><span>;</span>
</span>
<span><span> </span>   pressed_keys<span>--</span><span>;</span>
</span>
<span><span>+</span>   <span>// When all keys have been released, flush the input</span>
<span>+</span>   <span>if</span> <span>(</span>pressed_keys <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span>
<span>+</span>     <span>// Map accumulated value to the corresponding F-key code</span>
<span>+</span>     <span>send_to_computer</span><span>(</span>FUNCTION_KEYS<span>[</span>accumulator<span>]</span><span>)</span><span>;</span>
<span>+</span>
<span>+</span>     <span>// Reset state for next round</span>
<span>+</span>     pressed_keys <span>=</span> <span>0</span><span>;</span>
<span>+</span>     accumulator <span>=</span> <span>0</span><span>;</span>
<span>+</span>   <span>}</span>
</span><span><span> </span> <span>}</span></span></code></pre>

<p>And that’s about it! This is how I got more space on my keyboard. As a bonus, it forces me to practice converting decimal to binary! 😂</p>

<p>Of course, the code shown here skips some details and totally lacks integration with the QMK framework, but you get the gist.</p>

<p>There’s one limitation to this approach though: you cannot hold down a function key. It will only send the function key at the end when the last button has been released. I haven’t found a need to hold down function keys so it’s not a problem for me right now.</p>

<p>I recreated the algorithm in JavaScript/Web as a live demo here! Try it out!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Demo! You need to use a keyboard for this. Put your input focus on this box and start pressing combinations!
<p><span><strong>Update, 8 months later:</strong> Coming back to this post, I realise that not many people have finger independence and would not find the above combinatorial input very useful. Um, I guess it helps to play the piano. But I believe experienced typists would be able to use it too!</span></p>

<h2 id="how-to-get-it">How to get it</h2>

<p>If you use QMK you can easily integrate this with your own keymap. Here’s a step-by-step on how you may use this utility:</p>

<h3 id="step-1-define-the-bit-keys">Step 1: Define the bit keys.</h3>

<p>First, define the keys you want to use as bit input in an array called <code>bitwise_f_keys</code>.</p>

<p>For example, if you wanted to repurpose F1, F2, F3, and F4 to represent the four bits, write the following in your <code>keymap.c</code>:</p>

<pre><code>const uint16_t bitwise_f_keys<span>[</span><span>]</span> <span>=</span> <span>{</span> KC_F1<span>,</span> KC_F2<span>,</span> KC_F3<span>,</span> KC_F4 <span>}</span><span>;</span>
uint8_t NUM_BITWISE_F_KEYS <span>=</span>
    <span>sizeof</span><span>(</span>bitwise_f_keys<span>)</span> <span>/</span> <span>sizeof</span><span>(</span>uint16_t<span>)</span><span>;</span></code></pre>

<p>Note: <code>NUM_BITWISE_F_KEYS</code> is also required.</p>

<h3 id="step-2-hook-up-the-library">Step 2: Hook up the library.</h3>

<p>Hook it up by calling <code>process_bitwise_f()</code> at the top of your <code>process_record_user()</code>.</p>

<pre><code>bool <span>process_record_user</span><span>(</span>uint16_t keycode<span>,</span> keyrecord_t <span>*</span>record<span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>process_bitwise_f</span><span>(</span>keycode<span>,</span> record<span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>

  <span>/* ... */</span>

  <span>return</span> <span>true</span><span>;</span>
<span>}</span></code></pre>

<h3 id="step-3-include-the-library-in-your-project">Step 3: Include the library in your project.</h3>

<p>Finally, copy <a target="_blank" href="https://raw.githubusercontent.com/Kalabasa/qmk_firmware/2d1608287bb8b52669255266472975875f7c2423/keyboards/lily58/keymaps/Kalabasa/features/bitwise_f.h"><code>bitwise_f.h</code></a> and <a target="_blank" href="https://raw.githubusercontent.com/Kalabasa/qmk_firmware/2d1608287bb8b52669255266472975875f7c2423/keyboards/lily58/keymaps/Kalabasa/features/bitwise_f.c"><code>bitwise_f.c</code></a> into your keymap directory, and include <code>bitwise_f.c</code> in your <code>rules.mk</code> build file.</p>

<p>Don’t forget to <code>#include "dir/where/you/copied/bitwise_f.h"</code> in your <code>keymap.c</code>!</p>

<p><span>Props to reddit user u/hakbraley for helping improve the code!</span>
            </p>
]]></description>
            <link>https://leanrada.com/notes/developing-bitwise-input-method?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/developing-bitwise-input-method?ref=rss</guid>
            <pubDate>Thu, 16 Mar 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Simple image recognition with vanilla JavaScript]]></title>
            <description><![CDATA[
<p>Hi there! I want to share my experience with an <a target="_blank" href="https://en.wikipedia.org/wiki/Computer_vision#Recognition"><strong>image recognition</strong></a> problem I faced in an art project (It was an <a target="_self" href="https://leanrada.com/wares/dimensions?ref=rss">augmented reality art project</a>).</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/image-recognition_664.generated.png 664w" sizes=" 664px" alt="Image recognition illustration" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/image-recognition.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Image recognition problems come in different forms.</span>
<p>As part of the project, I needed a mobile app to be able to recognize a particular art piece. Then it can overlay virtual effects onto the real-world image. The goal was to have a unique and engaging experience!</p>

<video muted="" autoplay="" loop="" aria-label="Demo video">
                <source src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/demo.mp4?ref=rss">
                <a href="https://leanrada.com/notes/simple-image-recognition-vanilla-js/demo.mp4?ref=rss">Demo video</a>
              </video>
<span>The app should recognize when the target art piece has been aligned.</span>
<p>There are various solutions available for tackling this problem, ranging from basic histogram matching to advanced convolutional neural networks. There are even libraries that can provide a solution right out of the box! But I decided to take on the challenge of developing my own solution instead of relying on existing tools. Not only did this allow me to learn something new, but it also let me have some fun approaching the problem!</p>

<p><span><strong>TL;DR</strong> - It converts the camera image into a feature vector and then compares that against a predefined target reference.</span></p>

<h2 id="color-and-illumination-theory">Color and illumination theory</h2>

<p>To begin solving the problem, we first need to understand the mechanics. It all starts by capturing an image from the camera.</p>

<p>Now, it’s important to keep in mind that the camera’s perception of color can be influenced by various factors. Factors include the lighting conditions in the room or the quality of the camera itself. We need to account for these variables in our solution.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/tc-vs-pc_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/tc-vs-pc.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>True color (TC) vs perceived color (PC)</span>
<p>Simply comparing raw pixel data against the target image would likely fail due to the unknown environmental factors. One way of addressing this is to massage the input to isolate the true color from the environmental factors.</p>

<p>For this, I created a graphical model for the perceived color. It’s roughly based on CGI illumination models. This was the key to making the image recognition algorithm more robust.</p>

<p>Here’s the equation:</p>

<pre><code>PC = TC * a + b
</code></pre>

<ul>
              <li><code>PC</code> is the color perceived from the camera sensor.</li>
              <li><code>TC</code> (unknown variable) is the true color of the material.</li>
              <li><code>a</code> and <code>b</code> (unknown variables) are parameters that together describe the vague real-world lighting variables like white balance, environmental illumination, camera sensor quality, and other factors.</li>
            </ul>

<p>The algorithm begins by calculating the average colors of three predetermined regions within the image. While these regions are specific to my art piece, you can adapt the algorithm to work with any configuration of (at least) three regions.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo2_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo2.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The regions were specifically chosen to capture key features.</span>
<p>Let’s call the three colors <code>PC1</code>, <code>PC2</code>, and <code>PC3</code>.</p>

<p>To get the average, you can either (1) read over the pixels in those regions and average them, or (2) downsample the image and directly use pixel colors (typically faster). For this case, I used the former, which is reading over the pixels within each region to calculate the average color.</p>

<pre><code><span>// &lt;video&gt; element streams the camera, not shown here how</span>
video <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'video'</span><span>)</span><span>;</span>
<span>// &lt;canvas&gt; to hold a video frame for reading pixels</span>
canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> 

<span>// Capture a video frame into the canvas</span>
<span>const</span> canvasContext <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span><span>;</span>
canvasContext<span>.</span><span>drawImage</span><span>(</span>video<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> width<span>,</span> height<span>)</span><span>;</span>
<span>const</span> imageData <span>=</span> canvasContext
    <span>.</span><span>getImageData</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> width<span>,</span> height<span>)</span>
    <span>.</span>data<span>;</span>

<span>// Get the colors</span>
<span>const</span> pc1 <span>=</span> <span>getRegionAverageColor</span><span>(</span>imageData<span>,</span> regionRect1<span>)</span><span>;</span>
<span>const</span> pc2 <span>=</span> <span>getRegionAverageColor</span><span>(</span>imageData<span>,</span> regionRect2<span>)</span><span>;</span>
<span>const</span> pc3 <span>=</span> <span>getRegionAverageColor</span><span>(</span>imageData<span>,</span> regionRect3<span>)</span><span>;</span>

<span>function</span> <span>getRegionAverageColor</span><span>(</span><span>imageData<span>,</span> rect</span><span>)</span> <span>{</span>
  <span>const</span> lineStride <span>=</span> <span>4</span> <span>*</span> width<span>;</span>
  <span>let</span> r <span>=</span> <span>0</span><span>;</span>
  <span>let</span> g <span>=</span> <span>0</span><span>;</span>
  <span>let</span> b <span>=</span> <span>0</span><span>;</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> rect<span>.</span>y<span>;</span> j <span>&lt;</span> rect<span>.</span>y <span>+</span> rect<span>.</span>height<span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> rect<span>.</span>x<span>;</span> i <span>&lt;</span> rect<span>.</span>x <span>+</span> rect<span>.</span>width<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      r <span>+=</span> imageData<span>[</span>j <span>*</span> lineStride <span>+</span> i <span>*</span> <span>4</span><span>]</span> <span>/</span> <span>0xff</span><span>;</span>
      g <span>+=</span> imageData<span>[</span>j <span>*</span> lineStride <span>+</span> i <span>*</span> <span>4</span> <span>+</span> <span>1</span><span>]</span> <span>/</span> <span>0xff</span><span>;</span>
      b <span>+=</span> imageData<span>[</span>j <span>*</span> lineStride <span>+</span> i <span>*</span> <span>4</span> <span>+</span> <span>2</span><span>]</span> <span>/</span> <span>0xff</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>const</span> count <span>=</span> rect<span>.</span>width <span>*</span> rect<span>.</span>height<span>;</span>
  <span>return</span> <span>{</span>
    <span>r</span><span>:</span> r <span>/</span> count<span>,</span>
    <span>g</span><span>:</span> g <span>/</span> count<span>,</span>
    <span>b</span><span>:</span> b <span>/</span> count
  <span>}</span><span>;</span>
<span>}</span></code></pre>

<p>Refer to these MDN articles <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas">Manipulating_video_using_canvas</a> and <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData">ImageData</a> for details about the Web APIs.</p>

<p>After getting the colors, we can start processing them. First, subtract the top <code>PC1</code> and middle <code>PC2</code> colors, as well as the middle <code>PC2</code> and bottom <code>PC3</code> - like a 1-dimensional convolution. The order of subtraction doesn’t really matter. This produces two difference colors.</p>

<p>Let’s call the resulting colors <code>D1</code> and <code>D2</code>:</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo3_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo3.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<pre><code><span>// To subtract two colors, we subtract each RGB component</span>
<span>const</span> d1 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> pc1<span>.</span>r <span>-</span> pc2<span>.</span>r<span>,</span>
  <span>g</span><span>:</span> pc1<span>.</span>g <span>-</span> pc2<span>.</span>g<span>,</span>
  <span>b</span><span>:</span> pc1<span>.</span>b <span>-</span> pc2<span>.</span>b
<span>}</span><span>;</span>
<span>const</span> d2 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> pc2<span>.</span>r <span>-</span> pc3<span>.</span>r<span>,</span>
  <span>g</span><span>:</span> pc2<span>.</span>g <span>-</span> pc3<span>.</span>g<span>,</span>
  <span>b</span><span>:</span> pc2<span>.</span>b <span>-</span> pc3<span>.</span>b
<span>}</span><span>;</span></code></pre>

<p>Subtracting two perceived colors eliminates the unknown lighting variable <code>b</code>, as demonstrated in the following derivation:</p>

<pre><code>D1 = PC2 - PC1
  = (TC2 * a + b) - (TC1 * a + b)
  = TC2 * a - TC1 * a
  = (TC2 - TC1) * a
</code></pre>

<p>The resulting <code>D1</code> and <code>D2</code> are actually proportional to the true colors. But, they’re still both influenced by the lighting factor <code>a</code>:</p>

<pre><code>D1 = (TC2 - TC1) * a
D2 = (TC3 - TC2) * a
</code></pre>

<p>To remove the remaining lighting variable <code>a</code>, we can "normalize" the values. That is, divide each by the largest value among them.</p>

<pre><code>N1 = D1 / max(|D1|, |D2|)
N2 = D2 / max(|D1|, |D2|)
</code></pre>

<p>The resulting values <code>N1</code> and <code>N2</code> represent normalized <code>D1</code> and <code>D2</code> respectively.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo4_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo4.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>And here’s the code for that:</p>

<pre><code><span>// Get 'max(|D1|, |D2|)'</span>
<span>const</span> d1Magnitude <span>=</span> Math<span>.</span><span>hypot</span><span>(</span>d1<span>.</span>r<span>,</span> d1<span>.</span>g<span>,</span> d1<span>.</span>b<span>)</span><span>;</span>
<span>const</span> d2Magnitude <span>=</span> Math<span>.</span><span>hypot</span><span>(</span>d2<span>.</span>r<span>,</span> d2<span>.</span>g<span>,</span> d2<span>.</span>b<span>)</span><span>;</span>

<span>// Add 0.001 to avoid division by zero</span>
<span>const</span> max <span>=</span> Math<span>.</span><span>max</span><span>(</span>d1Magnitude<span>,</span> d2Magnitude<span>)</span> <span>+</span> <span>0.001</span><span>;</span>

<span>const</span> n1 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> d1<span>.</span>r <span>/</span> max<span>,</span>
  <span>g</span><span>:</span> d1<span>.</span>g <span>/</span> max<span>,</span>
  <span>b</span><span>:</span> d1<span>.</span>b <span>/</span> max<span>,</span>
<span>}</span><span>;</span>
<span>const</span> n2 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> d2<span>.</span>r <span>/</span> max<span>,</span>
  <span>g</span><span>:</span> d2<span>.</span>g <span>/</span> max<span>,</span>
  <span>b</span><span>:</span> d2<span>.</span>b <span>/</span> max<span>,</span>
<span>}</span><span>;</span></code></pre>

<p>I’m not showing the full derivation here, but normalizing will get rid of the common factor <code>a</code>. The handwavy explanation is, if you divide two values having a common factor, that factor gets canceled out.</p>

<p>Thus, if we expand all the terms:</p>

<pre><code>N1 = (TC2 - TC1) / max(TC2 - TC1, TC3 - TC2)
N2 = (TC3 - TC2) / max(TC2 - TC1, TC3 - TC2)
</code></pre>

<p>The result is that the final values <code>N1</code> and <code>N2</code> are derived purely from true color and are not affected by lighting parameters. <small>According to the model anyway.</small></p>

<p>This whole preprocessing ensures that the algorithm is robust across different lighting conditions and phone cameras, as it only uses true color data.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_tester_664.generated.jpg 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_tester.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Actual test piece used in development. Even this badly-printed image in poor lighting can be recognized by the algorithm.</span>
<h2 id="feature-vectors">Feature vectors</h2>

<p>At this point, we can start looking at individual RGB values instead of thinking about "colors". You see, colors are just numbers representing red, green, and blue values.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/rgb_664.generated.png 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/rgb.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>A color is composed of RGB values</span>
<p>From the normalized colors <code>N1</code> and <code>N2</code>, we can obtain six numerical values (three from each). These values can be rolled into one combined series of numbers, which we’ll call the <strong>feature vector</strong> of the image. The feature vector can be thought of as a numerical representation of certain characteristics of the image.</p>

<pre><code><span>const</span> featureVector <span>=</span> <span>[</span>
  n1<span>.</span>r<span>,</span>
  n1<span>.</span>g<span>,</span>
  n1<span>.</span>b<span>,</span>
  n2<span>.</span>r<span>,</span>
  n2<span>.</span>g<span>,</span>
  n2<span>.</span>b<span>,</span>
<span>]</span><span>;</span></code></pre>

<p>In short, the feature vector <em>summarizes</em> the image.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo5_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo5.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>By turning colors into plain numbers, we say goodbye to subjective perceptions of color and enter the objective and computable realm of mathematics.</p>

<p>This reduces the problem of comparing image similarity into a simple numerical comparison. If the numbers match, then the images match!</p>

<p>Now, we just need the feature vector of the <em>target image</em> to compare with. We can precompute the same normalization process on the target image and hardcode the resulting feature vector in the app.</p>

<p>I also got a couple more samples from real photos of the print for good measure.</p>

<pre><code><span>// (original + real sample 1 + real sample 2) / 3</span>
<span>const</span> targetFeatureVector <span>=</span> <span>[</span>
  <span>(</span>
    <span>-</span><span>0.3593924173784146</span> <span>+</span>
    <span>-</span><span>0.3030924568415693</span> <span>+</span>
    <span>-</span><span>0.27620639981601575</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>-</span><span>0.611915816235142</span> <span>+</span>
    <span>-</span><span>0.590167832630535</span> <span>+</span>
    <span>-</span><span>0.5946857824325745</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>-</span><span>0.498629075974555</span> <span>+</span>
    <span>-</span><span>0.4975375806689763</span> <span>+</span>
    <span>-</span><span>0.49879828486061084</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>0.35716016633879705</span> <span>+</span>
    <span>0.4556467533062926</span> <span>+</span>
    <span>0.47164734468790415</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>0.17718492626963767</span> <span>+</span>
    <span>0.1053991137797178</span> <span>+</span>
    <span>0.13449453064454686</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>0.2980055137889341</span> <span>+</span>
    <span>0.30589264583678</span> <span>+</span>
    <span>0.2811110391693084</span>
  <span>)</span> <span>/</span> <span>3</span>
<span>]</span><span>;</span></code></pre>

<p>Now that we’ve got the feature vectors for both the camera image and target image, we can compare them apples to apples.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo6_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo6.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>We can use Euclidean distance as a measure of vector similarity. Remember, vector similarity is our proxy for image similarity!</p>

<pre><code><span>const</span> vectorDistance <span>=</span> Math<span>.</span><span>hypot</span><span>(</span>
  <span>...</span>featureVector<span>.</span><span>map</span><span>(</span>
    <span>(</span><span>value<span>,</span> index</span><span>)</span> <span>=&gt;</span>
        targetFeatureVector<span>[</span>index<span>]</span> <span>-</span> value
  <span>)</span>
<span>)</span><span>;</span>

<span>if</span> <span>(</span>vectorDistance <span>&lt;</span> <span>THRESHOLD</span><span>)</span> <span>{</span>
  <span>// Image recognized!</span>
<span>}</span></code></pre>

<p>If the distance between the two vectors is below a certain threshold, then it’s a match!</p>

<p>Voilà! That’s the algorithm. You take the input image, turn it into a feature vector, and compare it to a precomputed target vector. The whole image detection code totals less than 200 lines and requires no external library! This algorithm was integrated into the AR app that came along with the art exhibition.</p>

<h2 id="conclusion">Conclusion</h2>

<p>So, that’s the image detection algorithm I developed for my AR art app. It’s pretty straightforward and efficient, with just a few lines of code. It’s also fast enough to run in real-time on a phone camera feed, which is nice.</p>

<p>Although it was designed for the specific images I had, you can customize it to suit your needs.</p>

<p>Now, the algorithm does have a few limitations. It doesn’t take into account the positioning of the input image, so it has to be in the exact orientation as the target image. Also, extreme lighting conditions, irregular shadows, shiny surfaces, and the like might affect its accuracy.</p>

<p>Overall, I’m pretty happy with how it turned out. While it’s not a general-purpose algorithm, it solved the problem for my art project perfectly. 😄</p>

<h3 id="demo">Demo!</h3>

<p>Want to try out the algorithm? Open this page on a desktop, and then use your phone to scan the QR code in the piece.</p>

<img srcset="/wares/dimensions/media/dimensions_finalset_800.generated.jpg 800w,/wares/dimensions/media/dimensions_finalset_1020.generated.jpg 1020w,/wares/dimensions/media/dimensions_finalset_1400.generated.jpg 1400w" sizes="not (min-width:800px) 800px,(max-width:1275px) 1020px, 1400px" alt="" src="https://leanrada.com/wares/dimensions/media/dimensions_finalset.jpg?ref=rss" spec="100% [800) 80% [1750) 1400" loading="lazy" width="400%" height="">
<span>Go to kalabasa.github.io/dimensions/ on your phone if QR doesn’t work.</span>
<p><span>Want to learn more about the art project that this image detection algorithm was a part of? Check out the <a target="_self" href="https://leanrada.com/wares/dimensions?ref=rss">Dimensions project</a>!</span>
            </p>
]]></description>
            <link>https://leanrada.com/notes/simple-image-recognition-vanilla-js?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/simple-image-recognition-vanilla-js?ref=rss</guid>
            <pubDate>Sat, 25 Feb 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Simple image recognition with vanilla JavaScript]]></title>
            <description><![CDATA[
<p>Hi there! I want to share my experience with an <a target="_blank" href="https://en.wikipedia.org/wiki/Computer_vision#Recognition"><strong>image recognition</strong></a> problem I faced in an art project (It was an <a target="_self" href="https://leanrada.com/wares/dimensions?ref=rss">augmented reality art project</a>).</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/image-recognition_664.generated.png 664w" sizes=" 664px" alt="Image recognition illustration" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/image-recognition.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Image recognition problems come in different forms.</span>
<p>As part of the project, I needed a mobile app to be able to recognize a particular art piece. Then it can overlay virtual effects onto the real-world image. The goal was to have a unique and engaging experience!</p>

<video muted="" autoplay="" loop="" aria-label="Demo video">
                <source src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/demo.mp4?ref=rss">
                <a href="https://leanrada.com/notes/simple-image-recognition-vanilla-js/demo.mp4?ref=rss">Demo video</a>
              </video>
<span>The app should recognize when the target art piece has been aligned.</span>
<p>There are various solutions available for tackling this problem, ranging from basic histogram matching to advanced convolutional neural networks. There are even libraries that can provide a solution right out of the box! But I decided to take on the challenge of developing my own solution instead of relying on existing tools. Not only did this allow me to learn something new, but it also let me have some fun approaching the problem!</p>

<p><span><strong>TL;DR</strong> - It converts the camera image into a feature vector and then compares that against a predefined target reference.</span></p>

<h2 id="color-and-illumination-theory">Color and illumination theory</h2>

<p>To begin solving the problem, we first need to understand the mechanics. It all starts by capturing an image from the camera.</p>

<p>Now, it’s important to keep in mind that the camera’s perception of color can be influenced by various factors. Factors include the lighting conditions in the room or the quality of the camera itself. We need to account for these variables in our solution.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/tc-vs-pc_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/tc-vs-pc.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>True color (TC) vs perceived color (PC)</span>
<p>Simply comparing raw pixel data against the target image would likely fail due to the unknown environmental factors. One way of addressing this is to massage the input to isolate the true color from the environmental factors.</p>

<p>For this, I created a graphical model for the perceived color. It’s roughly based on CGI illumination models. This was the key to making the image recognition algorithm more robust.</p>

<p>Here’s the equation:</p>

<pre><code>PC = TC * a + b
</code></pre>

<ul>
              <li><code>PC</code> is the color perceived from the camera sensor.</li>
              <li><code>TC</code> (unknown variable) is the true color of the material.</li>
              <li><code>a</code> and <code>b</code> (unknown variables) are parameters that together describe the vague real-world lighting variables like white balance, environmental illumination, camera sensor quality, and other factors.</li>
            </ul>

<p>The algorithm begins by calculating the average colors of three predetermined regions within the image. While these regions are specific to my art piece, you can adapt the algorithm to work with any configuration of (at least) three regions.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo2_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo2.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>The regions were specifically chosen to capture key features.</span>
<p>Let’s call the three colors <code>PC1</code>, <code>PC2</code>, and <code>PC3</code>.</p>

<p>To get the average, you can either (1) read over the pixels in those regions and average them, or (2) downsample the image and directly use pixel colors (typically faster). For this case, I used the former, which is reading over the pixels within each region to calculate the average color.</p>

<pre><code><span>// &lt;video&gt; element streams the camera, not shown here how</span>
video <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'video'</span><span>)</span><span>;</span>
<span>// &lt;canvas&gt; to hold a video frame for reading pixels</span>
canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> 

<span>// Capture a video frame into the canvas</span>
<span>const</span> canvasContext <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span><span>;</span>
canvasContext<span>.</span><span>drawImage</span><span>(</span>video<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> width<span>,</span> height<span>)</span><span>;</span>
<span>const</span> imageData <span>=</span> canvasContext
    <span>.</span><span>getImageData</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> width<span>,</span> height<span>)</span>
    <span>.</span>data<span>;</span>

<span>// Get the colors</span>
<span>const</span> pc1 <span>=</span> <span>getRegionAverageColor</span><span>(</span>imageData<span>,</span> regionRect1<span>)</span><span>;</span>
<span>const</span> pc2 <span>=</span> <span>getRegionAverageColor</span><span>(</span>imageData<span>,</span> regionRect2<span>)</span><span>;</span>
<span>const</span> pc3 <span>=</span> <span>getRegionAverageColor</span><span>(</span>imageData<span>,</span> regionRect3<span>)</span><span>;</span>

<span>function</span> <span>getRegionAverageColor</span><span>(</span><span>imageData<span>,</span> rect</span><span>)</span> <span>{</span>
  <span>const</span> lineStride <span>=</span> <span>4</span> <span>*</span> width<span>;</span>
  <span>let</span> r <span>=</span> <span>0</span><span>;</span>
  <span>let</span> g <span>=</span> <span>0</span><span>;</span>
  <span>let</span> b <span>=</span> <span>0</span><span>;</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> rect<span>.</span>y<span>;</span> j <span>&lt;</span> rect<span>.</span>y <span>+</span> rect<span>.</span>height<span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> rect<span>.</span>x<span>;</span> i <span>&lt;</span> rect<span>.</span>x <span>+</span> rect<span>.</span>width<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      r <span>+=</span> imageData<span>[</span>j <span>*</span> lineStride <span>+</span> i <span>*</span> <span>4</span><span>]</span> <span>/</span> <span>0xff</span><span>;</span>
      g <span>+=</span> imageData<span>[</span>j <span>*</span> lineStride <span>+</span> i <span>*</span> <span>4</span> <span>+</span> <span>1</span><span>]</span> <span>/</span> <span>0xff</span><span>;</span>
      b <span>+=</span> imageData<span>[</span>j <span>*</span> lineStride <span>+</span> i <span>*</span> <span>4</span> <span>+</span> <span>2</span><span>]</span> <span>/</span> <span>0xff</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>const</span> count <span>=</span> rect<span>.</span>width <span>*</span> rect<span>.</span>height<span>;</span>
  <span>return</span> <span>{</span>
    <span>r</span><span>:</span> r <span>/</span> count<span>,</span>
    <span>g</span><span>:</span> g <span>/</span> count<span>,</span>
    <span>b</span><span>:</span> b <span>/</span> count
  <span>}</span><span>;</span>
<span>}</span></code></pre>

<p>Refer to these MDN articles <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas">Manipulating_video_using_canvas</a> and <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData">ImageData</a> for details about the Web APIs.</p>

<p>After getting the colors, we can start processing them. First, subtract the top <code>PC1</code> and middle <code>PC2</code> colors, as well as the middle <code>PC2</code> and bottom <code>PC3</code> - like a 1-dimensional convolution. The order of subtraction doesn’t really matter. This produces two difference colors.</p>

<p>Let’s call the resulting colors <code>D1</code> and <code>D2</code>:</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo3_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo3.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<pre><code><span>// To subtract two colors, we subtract each RGB component</span>
<span>const</span> d1 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> pc1<span>.</span>r <span>-</span> pc2<span>.</span>r<span>,</span>
  <span>g</span><span>:</span> pc1<span>.</span>g <span>-</span> pc2<span>.</span>g<span>,</span>
  <span>b</span><span>:</span> pc1<span>.</span>b <span>-</span> pc2<span>.</span>b
<span>}</span><span>;</span>
<span>const</span> d2 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> pc2<span>.</span>r <span>-</span> pc3<span>.</span>r<span>,</span>
  <span>g</span><span>:</span> pc2<span>.</span>g <span>-</span> pc3<span>.</span>g<span>,</span>
  <span>b</span><span>:</span> pc2<span>.</span>b <span>-</span> pc3<span>.</span>b
<span>}</span><span>;</span></code></pre>

<p>Subtracting two perceived colors eliminates the unknown lighting variable <code>b</code>, as demonstrated in the following derivation:</p>

<pre><code>D1 = PC2 - PC1
  = (TC2 * a + b) - (TC1 * a + b)
  = TC2 * a - TC1 * a
  = (TC2 - TC1) * a
</code></pre>

<p>The resulting <code>D1</code> and <code>D2</code> are actually proportional to the true colors. But, they’re still both influenced by the lighting factor <code>a</code>:</p>

<pre><code>D1 = (TC2 - TC1) * a
D2 = (TC3 - TC2) * a
</code></pre>

<p>To remove the remaining lighting variable <code>a</code>, we can "normalize" the values. That is, divide each by the largest value among them.</p>

<pre><code>N1 = D1 / max(|D1|, |D2|)
N2 = D2 / max(|D1|, |D2|)
</code></pre>

<p>The resulting values <code>N1</code> and <code>N2</code> represent normalized <code>D1</code> and <code>D2</code> respectively.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo4_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo4.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>And here’s the code for that:</p>

<pre><code><span>// Get 'max(|D1|, |D2|)'</span>
<span>const</span> d1Magnitude <span>=</span> Math<span>.</span><span>hypot</span><span>(</span>d1<span>.</span>r<span>,</span> d1<span>.</span>g<span>,</span> d1<span>.</span>b<span>)</span><span>;</span>
<span>const</span> d2Magnitude <span>=</span> Math<span>.</span><span>hypot</span><span>(</span>d2<span>.</span>r<span>,</span> d2<span>.</span>g<span>,</span> d2<span>.</span>b<span>)</span><span>;</span>

<span>// Add 0.001 to avoid division by zero</span>
<span>const</span> max <span>=</span> Math<span>.</span><span>max</span><span>(</span>d1Magnitude<span>,</span> d2Magnitude<span>)</span> <span>+</span> <span>0.001</span><span>;</span>

<span>const</span> n1 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> d1<span>.</span>r <span>/</span> max<span>,</span>
  <span>g</span><span>:</span> d1<span>.</span>g <span>/</span> max<span>,</span>
  <span>b</span><span>:</span> d1<span>.</span>b <span>/</span> max<span>,</span>
<span>}</span><span>;</span>
<span>const</span> n2 <span>=</span> <span>{</span>
  <span>r</span><span>:</span> d2<span>.</span>r <span>/</span> max<span>,</span>
  <span>g</span><span>:</span> d2<span>.</span>g <span>/</span> max<span>,</span>
  <span>b</span><span>:</span> d2<span>.</span>b <span>/</span> max<span>,</span>
<span>}</span><span>;</span></code></pre>

<p>I’m not showing the full derivation here, but normalizing will get rid of the common factor <code>a</code>. The handwavy explanation is, if you divide two values having a common factor, that factor gets canceled out.</p>

<p>Thus, if we expand all the terms:</p>

<pre><code>N1 = (TC2 - TC1) / max(TC2 - TC1, TC3 - TC2)
N2 = (TC3 - TC2) / max(TC2 - TC1, TC3 - TC2)
</code></pre>

<p>The result is that the final values <code>N1</code> and <code>N2</code> are derived purely from true color and are not affected by lighting parameters. <small>According to the model anyway.</small></p>

<p>This whole preprocessing ensures that the algorithm is robust across different lighting conditions and phone cameras, as it only uses true color data.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_tester_664.generated.jpg 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_tester.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Actual test piece used in development. Even this badly-printed image in poor lighting can be recognized by the algorithm.</span>
<h2 id="feature-vectors">Feature vectors</h2>

<p>At this point, we can start looking at individual RGB values instead of thinking about "colors". You see, colors are just numbers representing red, green, and blue values.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/rgb_664.generated.png 664w" sizes=" 664px" alt="" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/rgb.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>A color is composed of RGB values</span>
<p>From the normalized colors <code>N1</code> and <code>N2</code>, we can obtain six numerical values (three from each). These values can be rolled into one combined series of numbers, which we’ll call the <strong>feature vector</strong> of the image. The feature vector can be thought of as a numerical representation of certain characteristics of the image.</p>

<pre><code><span>const</span> featureVector <span>=</span> <span>[</span>
  n1<span>.</span>r<span>,</span>
  n1<span>.</span>g<span>,</span>
  n1<span>.</span>b<span>,</span>
  n2<span>.</span>r<span>,</span>
  n2<span>.</span>g<span>,</span>
  n2<span>.</span>b<span>,</span>
<span>]</span><span>;</span></code></pre>

<p>In short, the feature vector <em>summarizes</em> the image.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo5_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo5.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>By turning colors into plain numbers, we say goodbye to subjective perceptions of color and enter the objective and computable realm of mathematics.</p>

<p>This reduces the problem of comparing image similarity into a simple numerical comparison. If the numbers match, then the images match!</p>

<p>Now, we just need the feature vector of the <em>target image</em> to compare with. We can precompute the same normalization process on the target image and hardcode the resulting feature vector in the app.</p>

<p>I also got a couple more samples from real photos of the print for good measure.</p>

<pre><code><span>// (original + real sample 1 + real sample 2) / 3</span>
<span>const</span> targetFeatureVector <span>=</span> <span>[</span>
  <span>(</span>
    <span>-</span><span>0.3593924173784146</span> <span>+</span>
    <span>-</span><span>0.3030924568415693</span> <span>+</span>
    <span>-</span><span>0.27620639981601575</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>-</span><span>0.611915816235142</span> <span>+</span>
    <span>-</span><span>0.590167832630535</span> <span>+</span>
    <span>-</span><span>0.5946857824325745</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>-</span><span>0.498629075974555</span> <span>+</span>
    <span>-</span><span>0.4975375806689763</span> <span>+</span>
    <span>-</span><span>0.49879828486061084</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>0.35716016633879705</span> <span>+</span>
    <span>0.4556467533062926</span> <span>+</span>
    <span>0.47164734468790415</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>0.17718492626963767</span> <span>+</span>
    <span>0.1053991137797178</span> <span>+</span>
    <span>0.13449453064454686</span>
  <span>)</span> <span>/</span> <span>3</span><span>,</span>
  <span>(</span>
    <span>0.2980055137889341</span> <span>+</span>
    <span>0.30589264583678</span> <span>+</span>
    <span>0.2811110391693084</span>
  <span>)</span> <span>/</span> <span>3</span>
<span>]</span><span>;</span></code></pre>

<p>Now that we’ve got the feature vectors for both the camera image and target image, we can compare them apples to apples.</p>

<img srcset="/notes/simple-image-recognition-vanilla-js/dimensions_illo6_664.generated.jpg 664w" sizes=" 664px" alt="diagram" src="https://leanrada.com/notes/simple-image-recognition-vanilla-js/dimensions_illo6.jpg?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<p>We can use Euclidean distance as a measure of vector similarity. Remember, vector similarity is our proxy for image similarity!</p>

<pre><code><span>const</span> vectorDistance <span>=</span> Math<span>.</span><span>hypot</span><span>(</span>
  <span>...</span>featureVector<span>.</span><span>map</span><span>(</span>
    <span>(</span><span>value<span>,</span> index</span><span>)</span> <span>=&gt;</span>
        targetFeatureVector<span>[</span>index<span>]</span> <span>-</span> value
  <span>)</span>
<span>)</span><span>;</span>

<span>if</span> <span>(</span>vectorDistance <span>&lt;</span> <span>THRESHOLD</span><span>)</span> <span>{</span>
  <span>// Image recognized!</span>
<span>}</span></code></pre>

<p>If the distance between the two vectors is below a certain threshold, then it’s a match!</p>

<p>Voilà! That’s the algorithm. You take the input image, turn it into a feature vector, and compare it to a precomputed target vector. The whole image detection code totals less than 200 lines and requires no external library! This algorithm was integrated into the AR app that came along with the art exhibition.</p>

<h2 id="conclusion">Conclusion</h2>

<p>So, that’s the image detection algorithm I developed for my AR art app. It’s pretty straightforward and efficient, with just a few lines of code. It’s also fast enough to run in real-time on a phone camera feed, which is nice.</p>

<p>Although it was designed for the specific images I had, you can customize it to suit your needs.</p>

<p>Now, the algorithm does have a few limitations. It doesn’t take into account the positioning of the input image, so it has to be in the exact orientation as the target image. Also, extreme lighting conditions, irregular shadows, shiny surfaces, and the like might affect its accuracy.</p>

<p>Overall, I’m pretty happy with how it turned out. While it’s not a general-purpose algorithm, it solved the problem for my art project perfectly. 😄</p>

<h3 id="demo">Demo!</h3>

<p>Want to try out the algorithm? Open this page on a desktop, and then use your phone to scan the QR code in the piece.</p>

<img srcset="/wares/dimensions/media/dimensions_finalset_800.generated.jpg 800w,/wares/dimensions/media/dimensions_finalset_1020.generated.jpg 1020w,/wares/dimensions/media/dimensions_finalset_1400.generated.jpg 1400w" sizes="not (min-width:800px) 800px,(max-width:1275px) 1020px, 1400px" alt="" src="https://leanrada.com/wares/dimensions/media/dimensions_finalset.jpg?ref=rss" spec="100% [800) 80% [1750) 1400" loading="lazy" width="400%" height="">
<span>Go to kalabasa.github.io/dimensions/ on your phone if QR doesn’t work.</span>
<p><span>Want to learn more about the art project that this image detection algorithm was a part of? Check out the <a target="_self" href="https://leanrada.com/wares/dimensions?ref=rss">Dimensions project</a>!</span>
            </p>
]]></description>
            <link>https://leanrada.com/notes/simple-image-recognition-vanilla-js?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/simple-image-recognition-vanilla-js?ref=rss</guid>
            <pubDate>Sat, 25 Feb 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Neural networks × genetic algorithms for Pong]]></title>
            <description><![CDATA[
<h1 id="pong-ai">Pong AI</h1>

<img srcset="/wares/pong-ai/media/pongai1_664.generated.png 664w" sizes=" 664px" alt="screenshot" src="https://leanrada.com/wares/pong-ai/media/pongai1.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<h2 id="neural-networks--genetic-algorithms">Neural networks &amp; genetic algorithms</h2>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Neural_network">Neural nets</a> have been around since the 1950s/60s. This Pong AI experiment was done back in 2014, around the time when a revival in neural networks was accelerating, that later brought about the deep learning, modern artificial intelligence that we associate with the term "AI" nowadays.</p>

<p>The Pong AI here, hovewer, has nothing to do with that deep stuff. I was largely unaware of those new developments in AI back then. This one is a very simple implementation of a 3-layer <a target="_blank" href="https://en.wikipedia.org/wiki/Feedforward_neural_network">feedforward neural network</a>.</p>

<p>The inputs of the network are ball position, heading, paddle position, etc. and the outputs directly control the paddle.</p>

<img srcset="/wares/pong-ai/media/net_664.generated.png 664w" sizes=" 664px" alt="network visualization" src="https://leanrada.com/wares/pong-ai/media/net.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Visualization of the network. Sorry about the pixelation (it was a product of that time).</span>
<p>Instead of the usual <a target="_blank" href="https://en.wikipedia.org/wiki/Backpropagation">backpropagation</a>, the learning method I used here was a <a target="_blank" href="https://en.wikipedia.org/wiki/Genetic_algorithm">genetic algorithm</a>. It’s an evolutionary algorithm that mimics natural selection, reproduction, and mutation to optimize the neural network’s weights. This was how the Pong "AI" learned.</p>

<p>To illustrate the learning process, let’s look at how the AI performs in different stages of learnedness.</p>

<p>Here’s an early-generation AI:</p>

<p><span><em>Note: The AI controls the left paddle. Ignore the right one; it’s just an automated paddle.</em></span></p>

<video muted="" autoplay="" loop="" aria-label="video of a generation 2 AI">
                <source src="https://leanrada.com/wares/pong-ai/media/gen2.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/gen2.mp4?ref=rss">video of a generation 2 AI</a>
              </video>
<span>Generation 2</span>
<p>As you can see, at this stage, its behaviour is still random with little to no awareness of the ball.</p>

<p>Sometimes it gets lucky and catches the ball, surviving another volley! This behaviour is rewarded by higher chances of reproduction. The longest surviving AIs in that generation reproduce more to populate the next generation.</p>

<video muted="" autoplay="" loop="" aria-label="video of a generation 19 AI">
                <source src="https://leanrada.com/wares/pong-ai/media/gen19.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/gen19.mp4?ref=rss">video of a generation 19 AI</a>
              </video>
<span>Generation 19</span>
<p>After a few generations, good behaviour emerges while bad behaviour dies out due to natural selection. We can see in generation 19 that it has evolved a behaviour where it tries to follow the ball.</p>

<p>Now, Pong is a very simple game. If you just follow the ball constantly, you won’t lose. At about 20 generations the AI has mastered this strategy and is surviving significantly longer. One can conclude that ball-following is the perfect strategy.</p>

<p>Or is it? 🤔</p>

<p>What if the ball was faster than the paddle? Then the paddle wouldn’t be able to keep up and the ball-following strategy will fail.</p>

<p>And that’s exactly what I did. I sped up the ball beyond the paddle’s max speed. Here’s how the AI adapted:</p>

<video muted="" autoplay="" loop="" aria-label="video of a generation 54 AI">
                <source src="https://leanrada.com/wares/pong-ai/media/gen54s.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/gen54s.mp4?ref=rss">video of a generation 54 AI</a>
              </video>
<span>Generation 54 with faster ball</span>
<p>At generation 54, with a faster ball, the AI has learned to <em>predict</em> the ball!</p>

<p>It also seems to reposition itself near the middle after every volley as if getting ready for the next shot.</p>

<p>This was a pretty cool result! I hadn’t expected this, especially considering how limited / noisy inputs were (in my human eyes, at least).</p>

<p>Beyond the ball-predicting strategy, I wasn’t able to discover any more breakthroughs with the AI’s behaviour. I mean, ball prediction is pretty much the true perfect strategy, regardless of ball speed. At this point I was satisfied with the experiment and moved on to something else.</p>

<p>Bonus video! Very fast ball, generation 700+:</p>

<video muted="" autoplay="" loop="" aria-label="video with very fast ball">
                <source src="https://leanrada.com/wares/pong-ai/media/bv.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/bv.mp4?ref=rss">video with very fast ball</a>
              </video>
]]></description>
            <link>https://leanrada.com/wares/pong-ai?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/wares/pong-ai?ref=rss</guid>
            <pubDate>Sat, 18 Feb 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Neural networks × genetic algorithms for Pong]]></title>
            <description><![CDATA[
<h1 id="pong-ai">Pong AI</h1>

<img srcset="/wares/pong-ai/media/pongai1_664.generated.png 664w" sizes=" 664px" alt="screenshot" src="https://leanrada.com/wares/pong-ai/media/pongai1.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">

<h2 id="neural-networks--genetic-algorithms">Neural networks &amp; genetic algorithms</h2>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Neural_network">Neural nets</a> have been around since the 1950s/60s. This Pong AI experiment was done back in 2014, around the time when a revival in neural networks was accelerating, that later brought about the deep learning, modern artificial intelligence that we associate with the term "AI" nowadays.</p>

<p>The Pong AI here, hovewer, has nothing to do with that deep stuff. I was largely unaware of those new developments in AI back then. This one is a very simple implementation of a 3-layer <a target="_blank" href="https://en.wikipedia.org/wiki/Feedforward_neural_network">feedforward neural network</a>.</p>

<p>The inputs of the network are ball position, heading, paddle position, etc. and the outputs directly control the paddle.</p>

<img srcset="/wares/pong-ai/media/net_664.generated.png 664w" sizes=" 664px" alt="network visualization" src="https://leanrada.com/wares/pong-ai/media/net.png?ref=rss" spec="100% [664) 664" loading="lazy" width="100%" height="">
<span>Visualization of the network. Sorry about the pixelation (it was a product of that time).</span>
<p>Instead of the usual <a target="_blank" href="https://en.wikipedia.org/wiki/Backpropagation">backpropagation</a>, the learning method I used here was a <a target="_blank" href="https://en.wikipedia.org/wiki/Genetic_algorithm">genetic algorithm</a>. It’s an evolutionary algorithm that mimics natural selection, reproduction, and mutation to optimize the neural network’s weights. This was how the Pong "AI" learned.</p>

<p>To illustrate the learning process, let’s look at how the AI performs in different stages of learnedness.</p>

<p>Here’s an early-generation AI:</p>

<p><span><em>Note: The AI controls the left paddle. Ignore the right one; it’s just an automated paddle.</em></span></p>

<video muted="" autoplay="" loop="" aria-label="video of a generation 2 AI">
                <source src="https://leanrada.com/wares/pong-ai/media/gen2.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/gen2.mp4?ref=rss">video of a generation 2 AI</a>
              </video>
<span>Generation 2</span>
<p>As you can see, at this stage, its behaviour is still random with little to no awareness of the ball.</p>

<p>Sometimes it gets lucky and catches the ball, surviving another volley! This behaviour is rewarded by higher chances of reproduction. The longest surviving AIs in that generation reproduce more to populate the next generation.</p>

<video muted="" autoplay="" loop="" aria-label="video of a generation 19 AI">
                <source src="https://leanrada.com/wares/pong-ai/media/gen19.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/gen19.mp4?ref=rss">video of a generation 19 AI</a>
              </video>
<span>Generation 19</span>
<p>After a few generations, good behaviour emerges while bad behaviour dies out due to natural selection. We can see in generation 19 that it has evolved a behaviour where it tries to follow the ball.</p>

<p>Now, Pong is a very simple game. If you just follow the ball constantly, you won’t lose. At about 20 generations the AI has mastered this strategy and is surviving significantly longer. One can conclude that ball-following is the perfect strategy.</p>

<p>Or is it? 🤔</p>

<p>What if the ball was faster than the paddle? Then the paddle wouldn’t be able to keep up and the ball-following strategy will fail.</p>

<p>And that’s exactly what I did. I sped up the ball beyond the paddle’s max speed. Here’s how the AI adapted:</p>

<video muted="" autoplay="" loop="" aria-label="video of a generation 54 AI">
                <source src="https://leanrada.com/wares/pong-ai/media/gen54s.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/gen54s.mp4?ref=rss">video of a generation 54 AI</a>
              </video>
<span>Generation 54 with faster ball</span>
<p>At generation 54, with a faster ball, the AI has learned to <em>predict</em> the ball!</p>

<p>It also seems to reposition itself near the middle after every volley as if getting ready for the next shot.</p>

<p>This was a pretty cool result! I hadn’t expected this, especially considering how limited / noisy inputs were (in my human eyes, at least).</p>

<p>Beyond the ball-predicting strategy, I wasn’t able to discover any more breakthroughs with the AI’s behaviour. I mean, ball prediction is pretty much the true perfect strategy, regardless of ball speed. At this point I was satisfied with the experiment and moved on to something else.</p>

<p>Bonus video! Very fast ball, generation 700+:</p>

<video muted="" autoplay="" loop="" aria-label="video with very fast ball">
                <source src="https://leanrada.com/wares/pong-ai/media/bv.mp4?ref=rss">
                <a href="https://leanrada.com/wares/pong-ai/media/bv.mp4?ref=rss">video with very fast ball</a>
              </video>
]]></description>
            <link>https://leanrada.com/wares/pong-ai?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/wares/pong-ai?ref=rss</guid>
            <pubDate>Sat, 18 Feb 2023 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>